!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	Development	//
ACMD23	SD/src/utility/SdInfo.h	/^uint8_t const ACMD23 = 0X17;$/;"	v
ACMD41	Robot_Control/src/SdCard.h	/^uint8_t const ACMD41   = 0X29;$/;"	v
ACMD41	SD/src/utility/SdInfo.h	/^uint8_t const ACMD41 = 0X29;$/;"	v
ACMFunctionalDescriptor	arduino/USBCore.h	/^} ACMFunctionalDescriptor;$/;"	t	typeref:struct:__anon23
ADDRESS_CITYNAME	Robot_Control/src/ArduinoRobot.h	142;"	d
ADDRESS_COUNTRYNAME	Robot_Control/src/ArduinoRobot.h	144;"	d
ADDRESS_ROBOTINFO	Robot_Control/src/ArduinoRobot.h	146;"	d
ADDRESS_ROBOTNAME	Robot_Control/src/ArduinoRobot.h	140;"	d
ADDRESS_USERNAME	Robot_Control/src/ArduinoRobot.h	138;"	d
ALIVETEST	GSM/src/GSM3ShieldV1BaseProvider.h	/^enum GSM3_commandType_e { XON, NONE, MODEMCONFIG, ALIVETEST, BEGINSMS, ENDSMS, AVAILABLESMS, FLUSHSMS,$/;"	e	enum:GSM3_commandType_e
ALLOW_DEPRECATED_FUNCTIONS	Robot_Control/src/Fat16Config.h	29;"	d
ALLOW_DEPRECATED_FUNCTIONS	SD/src/utility/SdFat.h	36;"	d
ANALOG	Firmata/Firmata.h	110;"	d
ANALOG_MAPPING_QUERY	Firmata/Firmata.h	81;"	d
ANALOG_MAPPING_RESPONSE	Firmata/Firmata.h	82;"	d
ANALOG_MESSAGE	Firmata/Firmata.h	51;"	d
ANSWERCALL	GSM/src/GSM3ShieldV1BaseProvider.h	/^	VOICECALL, ANSWERCALL, HANGCALL, RETRIEVECALLINGNUMBER, $/;"	e	enum:GSM3_commandType_e
ARDUINO_MAIN	arduino/wiring_digital.c	25;"	d	file:
ARDUINO_PINOUT_OPTIMIZE	Firmata/Boards.h	164;"	d
ARDUINO_PINOUT_OPTIMIZE	Firmata/Boards.h	196;"	d
ATTACHGPRS	GSM/src/GSM3ShieldV1BaseProvider.h	/^	ATTACHGPRS, DETACHGPRS, CONNECTTCPCLIENT, DISCONNECTTCP, BEGINWRITESOCKET, ENDWRITESOCKET, $/;"	e	enum:GSM3_commandType_e
AUTHORITATIVE_FLAG	Ethernet/src/Dns.cpp	27;"	d	file:
AVAILABLESMS	GSM/src/GSM3ShieldV1BaseProvider.h	/^enum GSM3_commandType_e { XON, NONE, MODEMCONFIG, ALIVETEST, BEGINSMS, ENDSMS, AVAILABLESMS, FLUSHSMS,$/;"	e	enum:GSM3_commandType_e
AVAILABLESOCKET	GSM/src/GSM3ShieldV1BaseProvider.h	/^	AVAILABLESOCKET, FLUSHSOCKET, CONNECTSERVER, GETIP, GETCONNECTSTATUS, GETLOCATION, GETICCID}; $/;"	e	enum:GSM3_commandType_e
AVAILABLE_TONE_PINS	arduino/Tone.cpp	101;"	d	file:
AVAILABLE_TONE_PINS	arduino/Tone.cpp	109;"	d	file:
AVAILABLE_TONE_PINS	arduino/Tone.cpp	117;"	d	file:
AVAILABLE_TONE_PINS	arduino/Tone.cpp	93;"	d	file:
Adafruit_GFX	Robot_Control/src/utility/Adafruit_GFX.cpp	/^Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):$/;"	f	class:Adafruit_GFX
Adafruit_GFX	Robot_Control/src/utility/Adafruit_GFX.h	/^class Adafruit_GFX : public Print {$/;"	c
Adafruit_GFX	TFT/src/utility/Adafruit_GFX.cpp	/^Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) :$/;"	f	class:Adafruit_GFX
Adafruit_GFX	TFT/src/utility/Adafruit_GFX.h	/^class Adafruit_GFX : public Print {$/;"	c
Adafruit_ST7735	TFT/src/utility/Adafruit_ST7735.cpp	/^Adafruit_ST7735::Adafruit_ST7735(uint8_t cs, uint8_t rs, uint8_t rst) : $/;"	f	class:Adafruit_ST7735
Adafruit_ST7735	TFT/src/utility/Adafruit_ST7735.cpp	/^Adafruit_ST7735::Adafruit_ST7735(uint8_t cs, uint8_t rs, uint8_t sid,$/;"	f	class:Adafruit_ST7735
Adafruit_ST7735	TFT/src/utility/Adafruit_ST7735.h	/^class Adafruit_ST7735 : public Adafruit_GFX {$/;"	c
AppendDescriptor	HID/src/HID.cpp	/^void HID_::AppendDescriptor(HIDSubDescriptor *node)$/;"	f	class:HID_
ArduinoRobot_h	Robot_Control/src/ArduinoRobot.h	20;"	d
ArduinoRobot_h	Robot_Motor/src/ArduinoRobotMotorBoard.h	2;"	d
Arduino_LCD	Robot_Control/src/Arduino_LCD.cpp	/^Arduino_LCD::Arduino_LCD(uint8_t cs, uint8_t rs, uint8_t rst) :$/;"	f	class:Arduino_LCD
Arduino_LCD	Robot_Control/src/Arduino_LCD.cpp	/^Arduino_LCD::Arduino_LCD(uint8_t cs, uint8_t rs, uint8_t sid, uint8_t sclk,$/;"	f	class:Arduino_LCD
Arduino_LCD	Robot_Control/src/Arduino_LCD.h	/^class Arduino_LCD : public Adafruit_GFX {$/;"	c
Arduino_h	arduino/Arduino.h	21;"	d
B0	arduino/binary.h	23;"	d
B00	arduino/binary.h	24;"	d
B000	arduino/binary.h	25;"	d
B0000	arduino/binary.h	26;"	d
B00000	arduino/binary.h	27;"	d
B000000	arduino/binary.h	28;"	d
B0000000	arduino/binary.h	29;"	d
B00000000	arduino/binary.h	30;"	d
B00000001	arduino/binary.h	38;"	d
B0000001	arduino/binary.h	37;"	d
B00000010	arduino/binary.h	45;"	d
B00000011	arduino/binary.h	52;"	d
B000001	arduino/binary.h	36;"	d
B0000010	arduino/binary.h	44;"	d
B00000100	arduino/binary.h	58;"	d
B00000101	arduino/binary.h	64;"	d
B0000011	arduino/binary.h	51;"	d
B00000110	arduino/binary.h	70;"	d
B00000111	arduino/binary.h	76;"	d
B00001	arduino/binary.h	35;"	d
B000010	arduino/binary.h	43;"	d
B0000100	arduino/binary.h	57;"	d
B00001000	arduino/binary.h	81;"	d
B00001001	arduino/binary.h	86;"	d
B0000101	arduino/binary.h	63;"	d
B00001010	arduino/binary.h	91;"	d
B00001011	arduino/binary.h	96;"	d
B000011	arduino/binary.h	50;"	d
B0000110	arduino/binary.h	69;"	d
B00001100	arduino/binary.h	101;"	d
B00001101	arduino/binary.h	106;"	d
B0000111	arduino/binary.h	75;"	d
B00001110	arduino/binary.h	111;"	d
B00001111	arduino/binary.h	116;"	d
B0001	arduino/binary.h	34;"	d
B00010	arduino/binary.h	42;"	d
B000100	arduino/binary.h	56;"	d
B0001000	arduino/binary.h	80;"	d
B00010000	arduino/binary.h	120;"	d
B00010001	arduino/binary.h	124;"	d
B0001001	arduino/binary.h	85;"	d
B00010010	arduino/binary.h	128;"	d
B00010011	arduino/binary.h	132;"	d
B000101	arduino/binary.h	62;"	d
B0001010	arduino/binary.h	90;"	d
B00010100	arduino/binary.h	136;"	d
B00010101	arduino/binary.h	140;"	d
B0001011	arduino/binary.h	95;"	d
B00010110	arduino/binary.h	144;"	d
B00010111	arduino/binary.h	148;"	d
B00011	arduino/binary.h	49;"	d
B000110	arduino/binary.h	68;"	d
B0001100	arduino/binary.h	100;"	d
B00011000	arduino/binary.h	152;"	d
B00011001	arduino/binary.h	156;"	d
B0001101	arduino/binary.h	105;"	d
B00011010	arduino/binary.h	160;"	d
B00011011	arduino/binary.h	164;"	d
B000111	arduino/binary.h	74;"	d
B0001110	arduino/binary.h	110;"	d
B00011100	arduino/binary.h	168;"	d
B00011101	arduino/binary.h	172;"	d
B0001111	arduino/binary.h	115;"	d
B00011110	arduino/binary.h	176;"	d
B00011111	arduino/binary.h	180;"	d
B001	arduino/binary.h	33;"	d
B0010	arduino/binary.h	41;"	d
B00100	arduino/binary.h	55;"	d
B001000	arduino/binary.h	79;"	d
B0010000	arduino/binary.h	119;"	d
B00100000	arduino/binary.h	183;"	d
B00100001	arduino/binary.h	186;"	d
B0010001	arduino/binary.h	123;"	d
B00100010	arduino/binary.h	189;"	d
B00100011	arduino/binary.h	192;"	d
B001001	arduino/binary.h	84;"	d
B0010010	arduino/binary.h	127;"	d
B00100100	arduino/binary.h	195;"	d
B00100101	arduino/binary.h	198;"	d
B0010011	arduino/binary.h	131;"	d
B00100110	arduino/binary.h	201;"	d
B00100111	arduino/binary.h	204;"	d
B00101	arduino/binary.h	61;"	d
B001010	arduino/binary.h	89;"	d
B0010100	arduino/binary.h	135;"	d
B00101000	arduino/binary.h	207;"	d
B00101001	arduino/binary.h	210;"	d
B0010101	arduino/binary.h	139;"	d
B00101010	arduino/binary.h	213;"	d
B00101011	arduino/binary.h	216;"	d
B001011	arduino/binary.h	94;"	d
B0010110	arduino/binary.h	143;"	d
B00101100	arduino/binary.h	219;"	d
B00101101	arduino/binary.h	222;"	d
B0010111	arduino/binary.h	147;"	d
B00101110	arduino/binary.h	225;"	d
B00101111	arduino/binary.h	228;"	d
B0011	arduino/binary.h	48;"	d
B00110	arduino/binary.h	67;"	d
B001100	arduino/binary.h	99;"	d
B0011000	arduino/binary.h	151;"	d
B00110000	arduino/binary.h	231;"	d
B00110001	arduino/binary.h	234;"	d
B0011001	arduino/binary.h	155;"	d
B00110010	arduino/binary.h	237;"	d
B00110011	arduino/binary.h	240;"	d
B001101	arduino/binary.h	104;"	d
B0011010	arduino/binary.h	159;"	d
B00110100	arduino/binary.h	243;"	d
B00110101	arduino/binary.h	246;"	d
B0011011	arduino/binary.h	163;"	d
B00110110	arduino/binary.h	249;"	d
B00110111	arduino/binary.h	252;"	d
B00111	arduino/binary.h	73;"	d
B001110	arduino/binary.h	109;"	d
B0011100	arduino/binary.h	167;"	d
B00111000	arduino/binary.h	255;"	d
B00111001	arduino/binary.h	258;"	d
B0011101	arduino/binary.h	171;"	d
B00111010	arduino/binary.h	261;"	d
B00111011	arduino/binary.h	264;"	d
B001111	arduino/binary.h	114;"	d
B0011110	arduino/binary.h	175;"	d
B00111100	arduino/binary.h	267;"	d
B00111101	arduino/binary.h	270;"	d
B0011111	arduino/binary.h	179;"	d
B00111110	arduino/binary.h	273;"	d
B00111111	arduino/binary.h	276;"	d
B01	arduino/binary.h	32;"	d
B010	arduino/binary.h	40;"	d
B0100	arduino/binary.h	54;"	d
B01000	arduino/binary.h	78;"	d
B010000	arduino/binary.h	118;"	d
B0100000	arduino/binary.h	182;"	d
B01000000	arduino/binary.h	278;"	d
B01000001	arduino/binary.h	280;"	d
B0100001	arduino/binary.h	185;"	d
B01000010	arduino/binary.h	282;"	d
B01000011	arduino/binary.h	284;"	d
B010001	arduino/binary.h	122;"	d
B0100010	arduino/binary.h	188;"	d
B01000100	arduino/binary.h	286;"	d
B01000101	arduino/binary.h	288;"	d
B0100011	arduino/binary.h	191;"	d
B01000110	arduino/binary.h	290;"	d
B01000111	arduino/binary.h	292;"	d
B01001	arduino/binary.h	83;"	d
B010010	arduino/binary.h	126;"	d
B0100100	arduino/binary.h	194;"	d
B01001000	arduino/binary.h	294;"	d
B01001001	arduino/binary.h	296;"	d
B0100101	arduino/binary.h	197;"	d
B01001010	arduino/binary.h	298;"	d
B01001011	arduino/binary.h	300;"	d
B010011	arduino/binary.h	130;"	d
B0100110	arduino/binary.h	200;"	d
B01001100	arduino/binary.h	302;"	d
B01001101	arduino/binary.h	304;"	d
B0100111	arduino/binary.h	203;"	d
B01001110	arduino/binary.h	306;"	d
B01001111	arduino/binary.h	308;"	d
B0101	arduino/binary.h	60;"	d
B01010	arduino/binary.h	88;"	d
B010100	arduino/binary.h	134;"	d
B0101000	arduino/binary.h	206;"	d
B01010000	arduino/binary.h	310;"	d
B01010001	arduino/binary.h	312;"	d
B0101001	arduino/binary.h	209;"	d
B01010010	arduino/binary.h	314;"	d
B01010011	arduino/binary.h	316;"	d
B010101	arduino/binary.h	138;"	d
B0101010	arduino/binary.h	212;"	d
B01010100	arduino/binary.h	318;"	d
B01010101	arduino/binary.h	320;"	d
B0101011	arduino/binary.h	215;"	d
B01010110	arduino/binary.h	322;"	d
B01010111	arduino/binary.h	324;"	d
B01011	arduino/binary.h	93;"	d
B010110	arduino/binary.h	142;"	d
B0101100	arduino/binary.h	218;"	d
B01011000	arduino/binary.h	326;"	d
B01011001	arduino/binary.h	328;"	d
B0101101	arduino/binary.h	221;"	d
B01011010	arduino/binary.h	330;"	d
B01011011	arduino/binary.h	332;"	d
B010111	arduino/binary.h	146;"	d
B0101110	arduino/binary.h	224;"	d
B01011100	arduino/binary.h	334;"	d
B01011101	arduino/binary.h	336;"	d
B0101111	arduino/binary.h	227;"	d
B01011110	arduino/binary.h	338;"	d
B01011111	arduino/binary.h	340;"	d
B011	arduino/binary.h	47;"	d
B0110	arduino/binary.h	66;"	d
B01100	arduino/binary.h	98;"	d
B011000	arduino/binary.h	150;"	d
B0110000	arduino/binary.h	230;"	d
B01100000	arduino/binary.h	342;"	d
B01100001	arduino/binary.h	344;"	d
B0110001	arduino/binary.h	233;"	d
B01100010	arduino/binary.h	346;"	d
B01100011	arduino/binary.h	348;"	d
B011001	arduino/binary.h	154;"	d
B0110010	arduino/binary.h	236;"	d
B01100100	arduino/binary.h	350;"	d
B01100101	arduino/binary.h	352;"	d
B0110011	arduino/binary.h	239;"	d
B01100110	arduino/binary.h	354;"	d
B01100111	arduino/binary.h	356;"	d
B01101	arduino/binary.h	103;"	d
B011010	arduino/binary.h	158;"	d
B0110100	arduino/binary.h	242;"	d
B01101000	arduino/binary.h	358;"	d
B01101001	arduino/binary.h	360;"	d
B0110101	arduino/binary.h	245;"	d
B01101010	arduino/binary.h	362;"	d
B01101011	arduino/binary.h	364;"	d
B011011	arduino/binary.h	162;"	d
B0110110	arduino/binary.h	248;"	d
B01101100	arduino/binary.h	366;"	d
B01101101	arduino/binary.h	368;"	d
B0110111	arduino/binary.h	251;"	d
B01101110	arduino/binary.h	370;"	d
B01101111	arduino/binary.h	372;"	d
B0111	arduino/binary.h	72;"	d
B01110	arduino/binary.h	108;"	d
B011100	arduino/binary.h	166;"	d
B0111000	arduino/binary.h	254;"	d
B01110000	arduino/binary.h	374;"	d
B01110001	arduino/binary.h	376;"	d
B0111001	arduino/binary.h	257;"	d
B01110010	arduino/binary.h	378;"	d
B01110011	arduino/binary.h	380;"	d
B011101	arduino/binary.h	170;"	d
B0111010	arduino/binary.h	260;"	d
B01110100	arduino/binary.h	382;"	d
B01110101	arduino/binary.h	384;"	d
B0111011	arduino/binary.h	263;"	d
B01110110	arduino/binary.h	386;"	d
B01110111	arduino/binary.h	388;"	d
B01111	arduino/binary.h	113;"	d
B011110	arduino/binary.h	174;"	d
B0111100	arduino/binary.h	266;"	d
B01111000	arduino/binary.h	390;"	d
B01111001	arduino/binary.h	392;"	d
B0111101	arduino/binary.h	269;"	d
B01111010	arduino/binary.h	394;"	d
B01111011	arduino/binary.h	396;"	d
B011111	arduino/binary.h	178;"	d
B0111110	arduino/binary.h	272;"	d
B01111100	arduino/binary.h	398;"	d
B01111101	arduino/binary.h	400;"	d
B0111111	arduino/binary.h	275;"	d
B01111110	arduino/binary.h	402;"	d
B01111111	arduino/binary.h	404;"	d
B1	arduino/binary.h	31;"	d
B10	arduino/binary.h	39;"	d
B100	arduino/binary.h	53;"	d
B1000	arduino/binary.h	77;"	d
B10000	arduino/binary.h	117;"	d
B100000	arduino/binary.h	181;"	d
B1000000	arduino/binary.h	277;"	d
B10000000	arduino/binary.h	405;"	d
B10000001	arduino/binary.h	406;"	d
B1000001	arduino/binary.h	279;"	d
B10000010	arduino/binary.h	407;"	d
B10000011	arduino/binary.h	408;"	d
B100001	arduino/binary.h	184;"	d
B1000010	arduino/binary.h	281;"	d
B10000100	arduino/binary.h	409;"	d
B10000101	arduino/binary.h	410;"	d
B1000011	arduino/binary.h	283;"	d
B10000110	arduino/binary.h	411;"	d
B10000111	arduino/binary.h	412;"	d
B10001	arduino/binary.h	121;"	d
B100010	arduino/binary.h	187;"	d
B1000100	arduino/binary.h	285;"	d
B10001000	arduino/binary.h	413;"	d
B10001001	arduino/binary.h	414;"	d
B1000101	arduino/binary.h	287;"	d
B10001010	arduino/binary.h	415;"	d
B10001011	arduino/binary.h	416;"	d
B100011	arduino/binary.h	190;"	d
B1000110	arduino/binary.h	289;"	d
B10001100	arduino/binary.h	417;"	d
B10001101	arduino/binary.h	418;"	d
B1000111	arduino/binary.h	291;"	d
B10001110	arduino/binary.h	419;"	d
B10001111	arduino/binary.h	420;"	d
B1001	arduino/binary.h	82;"	d
B10010	arduino/binary.h	125;"	d
B100100	arduino/binary.h	193;"	d
B1001000	arduino/binary.h	293;"	d
B10010000	arduino/binary.h	421;"	d
B10010001	arduino/binary.h	422;"	d
B1001001	arduino/binary.h	295;"	d
B10010010	arduino/binary.h	423;"	d
B10010011	arduino/binary.h	424;"	d
B100101	arduino/binary.h	196;"	d
B1001010	arduino/binary.h	297;"	d
B10010100	arduino/binary.h	425;"	d
B10010101	arduino/binary.h	426;"	d
B1001011	arduino/binary.h	299;"	d
B10010110	arduino/binary.h	427;"	d
B10010111	arduino/binary.h	428;"	d
B10011	arduino/binary.h	129;"	d
B100110	arduino/binary.h	199;"	d
B1001100	arduino/binary.h	301;"	d
B10011000	arduino/binary.h	429;"	d
B10011001	arduino/binary.h	430;"	d
B1001101	arduino/binary.h	303;"	d
B10011010	arduino/binary.h	431;"	d
B10011011	arduino/binary.h	432;"	d
B100111	arduino/binary.h	202;"	d
B1001110	arduino/binary.h	305;"	d
B10011100	arduino/binary.h	433;"	d
B10011101	arduino/binary.h	434;"	d
B1001111	arduino/binary.h	307;"	d
B10011110	arduino/binary.h	435;"	d
B10011111	arduino/binary.h	436;"	d
B101	arduino/binary.h	59;"	d
B1010	arduino/binary.h	87;"	d
B10100	arduino/binary.h	133;"	d
B101000	arduino/binary.h	205;"	d
B1010000	arduino/binary.h	309;"	d
B10100000	arduino/binary.h	437;"	d
B10100001	arduino/binary.h	438;"	d
B1010001	arduino/binary.h	311;"	d
B10100010	arduino/binary.h	439;"	d
B10100011	arduino/binary.h	440;"	d
B101001	arduino/binary.h	208;"	d
B1010010	arduino/binary.h	313;"	d
B10100100	arduino/binary.h	441;"	d
B10100101	arduino/binary.h	442;"	d
B1010011	arduino/binary.h	315;"	d
B10100110	arduino/binary.h	443;"	d
B10100111	arduino/binary.h	444;"	d
B10101	arduino/binary.h	137;"	d
B101010	arduino/binary.h	211;"	d
B1010100	arduino/binary.h	317;"	d
B10101000	arduino/binary.h	445;"	d
B10101001	arduino/binary.h	446;"	d
B1010101	arduino/binary.h	319;"	d
B10101010	arduino/binary.h	447;"	d
B10101011	arduino/binary.h	448;"	d
B101011	arduino/binary.h	214;"	d
B1010110	arduino/binary.h	321;"	d
B10101100	arduino/binary.h	449;"	d
B10101101	arduino/binary.h	450;"	d
B1010111	arduino/binary.h	323;"	d
B10101110	arduino/binary.h	451;"	d
B10101111	arduino/binary.h	452;"	d
B1011	arduino/binary.h	92;"	d
B10110	arduino/binary.h	141;"	d
B101100	arduino/binary.h	217;"	d
B1011000	arduino/binary.h	325;"	d
B10110000	arduino/binary.h	453;"	d
B10110001	arduino/binary.h	454;"	d
B1011001	arduino/binary.h	327;"	d
B10110010	arduino/binary.h	455;"	d
B10110011	arduino/binary.h	456;"	d
B101101	arduino/binary.h	220;"	d
B1011010	arduino/binary.h	329;"	d
B10110100	arduino/binary.h	457;"	d
B10110101	arduino/binary.h	458;"	d
B1011011	arduino/binary.h	331;"	d
B10110110	arduino/binary.h	459;"	d
B10110111	arduino/binary.h	460;"	d
B10111	arduino/binary.h	145;"	d
B101110	arduino/binary.h	223;"	d
B1011100	arduino/binary.h	333;"	d
B10111000	arduino/binary.h	461;"	d
B10111001	arduino/binary.h	462;"	d
B1011101	arduino/binary.h	335;"	d
B10111010	arduino/binary.h	463;"	d
B10111011	arduino/binary.h	464;"	d
B101111	arduino/binary.h	226;"	d
B1011110	arduino/binary.h	337;"	d
B10111100	arduino/binary.h	465;"	d
B10111101	arduino/binary.h	466;"	d
B1011111	arduino/binary.h	339;"	d
B10111110	arduino/binary.h	467;"	d
B10111111	arduino/binary.h	468;"	d
B11	arduino/binary.h	46;"	d
B110	arduino/binary.h	65;"	d
B1100	arduino/binary.h	97;"	d
B11000	arduino/binary.h	149;"	d
B110000	arduino/binary.h	229;"	d
B1100000	arduino/binary.h	341;"	d
B11000000	arduino/binary.h	469;"	d
B11000001	arduino/binary.h	470;"	d
B1100001	arduino/binary.h	343;"	d
B11000010	arduino/binary.h	471;"	d
B11000011	arduino/binary.h	472;"	d
B110001	arduino/binary.h	232;"	d
B1100010	arduino/binary.h	345;"	d
B11000100	arduino/binary.h	473;"	d
B11000101	arduino/binary.h	474;"	d
B1100011	arduino/binary.h	347;"	d
B11000110	arduino/binary.h	475;"	d
B11000111	arduino/binary.h	476;"	d
B11001	arduino/binary.h	153;"	d
B110010	arduino/binary.h	235;"	d
B1100100	arduino/binary.h	349;"	d
B11001000	arduino/binary.h	477;"	d
B11001001	arduino/binary.h	478;"	d
B1100101	arduino/binary.h	351;"	d
B11001010	arduino/binary.h	479;"	d
B11001011	arduino/binary.h	480;"	d
B110011	arduino/binary.h	238;"	d
B1100110	arduino/binary.h	353;"	d
B11001100	arduino/binary.h	481;"	d
B11001101	arduino/binary.h	482;"	d
B1100111	arduino/binary.h	355;"	d
B11001110	arduino/binary.h	483;"	d
B11001111	arduino/binary.h	484;"	d
B1101	arduino/binary.h	102;"	d
B11010	arduino/binary.h	157;"	d
B110100	arduino/binary.h	241;"	d
B1101000	arduino/binary.h	357;"	d
B11010000	arduino/binary.h	485;"	d
B11010001	arduino/binary.h	486;"	d
B1101001	arduino/binary.h	359;"	d
B11010010	arduino/binary.h	487;"	d
B11010011	arduino/binary.h	488;"	d
B110101	arduino/binary.h	244;"	d
B1101010	arduino/binary.h	361;"	d
B11010100	arduino/binary.h	489;"	d
B11010101	arduino/binary.h	490;"	d
B1101011	arduino/binary.h	363;"	d
B11010110	arduino/binary.h	491;"	d
B11010111	arduino/binary.h	492;"	d
B11011	arduino/binary.h	161;"	d
B110110	arduino/binary.h	247;"	d
B1101100	arduino/binary.h	365;"	d
B11011000	arduino/binary.h	493;"	d
B11011001	arduino/binary.h	494;"	d
B1101101	arduino/binary.h	367;"	d
B11011010	arduino/binary.h	495;"	d
B11011011	arduino/binary.h	496;"	d
B110111	arduino/binary.h	250;"	d
B1101110	arduino/binary.h	369;"	d
B11011100	arduino/binary.h	497;"	d
B11011101	arduino/binary.h	498;"	d
B1101111	arduino/binary.h	371;"	d
B11011110	arduino/binary.h	499;"	d
B11011111	arduino/binary.h	500;"	d
B111	arduino/binary.h	71;"	d
B1110	arduino/binary.h	107;"	d
B11100	arduino/binary.h	165;"	d
B111000	arduino/binary.h	253;"	d
B1110000	arduino/binary.h	373;"	d
B11100000	arduino/binary.h	501;"	d
B11100001	arduino/binary.h	502;"	d
B1110001	arduino/binary.h	375;"	d
B11100010	arduino/binary.h	503;"	d
B11100011	arduino/binary.h	504;"	d
B111001	arduino/binary.h	256;"	d
B1110010	arduino/binary.h	377;"	d
B11100100	arduino/binary.h	505;"	d
B11100101	arduino/binary.h	506;"	d
B1110011	arduino/binary.h	379;"	d
B11100110	arduino/binary.h	507;"	d
B11100111	arduino/binary.h	508;"	d
B11101	arduino/binary.h	169;"	d
B111010	arduino/binary.h	259;"	d
B1110100	arduino/binary.h	381;"	d
B11101000	arduino/binary.h	509;"	d
B11101001	arduino/binary.h	510;"	d
B1110101	arduino/binary.h	383;"	d
B11101010	arduino/binary.h	511;"	d
B11101011	arduino/binary.h	512;"	d
B111011	arduino/binary.h	262;"	d
B1110110	arduino/binary.h	385;"	d
B11101100	arduino/binary.h	513;"	d
B11101101	arduino/binary.h	514;"	d
B1110111	arduino/binary.h	387;"	d
B11101110	arduino/binary.h	515;"	d
B11101111	arduino/binary.h	516;"	d
B1111	arduino/binary.h	112;"	d
B11110	arduino/binary.h	173;"	d
B111100	arduino/binary.h	265;"	d
B1111000	arduino/binary.h	389;"	d
B11110000	arduino/binary.h	517;"	d
B11110001	arduino/binary.h	518;"	d
B1111001	arduino/binary.h	391;"	d
B11110010	arduino/binary.h	519;"	d
B11110011	arduino/binary.h	520;"	d
B111101	arduino/binary.h	268;"	d
B1111010	arduino/binary.h	393;"	d
B11110100	arduino/binary.h	521;"	d
B11110101	arduino/binary.h	522;"	d
B1111011	arduino/binary.h	395;"	d
B11110110	arduino/binary.h	523;"	d
B11110111	arduino/binary.h	524;"	d
B11111	arduino/binary.h	177;"	d
B111110	arduino/binary.h	271;"	d
B1111100	arduino/binary.h	397;"	d
B11111000	arduino/binary.h	525;"	d
B11111001	arduino/binary.h	526;"	d
B1111101	arduino/binary.h	399;"	d
B11111010	arduino/binary.h	527;"	d
B11111011	arduino/binary.h	528;"	d
B111111	arduino/binary.h	274;"	d
B1111110	arduino/binary.h	401;"	d
B11111100	arduino/binary.h	529;"	d
B11111101	arduino/binary.h	530;"	d
B1111111	arduino/binary.h	403;"	d
B11111110	arduino/binary.h	531;"	d
B11111111	arduino/binary.h	532;"	d
BATTERY_BMP	Robot_Control/src/ArduinoRobot.h	53;"	d
BEEP_DOUBLE	Robot_Control/src/ArduinoRobot.h	48;"	d
BEEP_LONG	Robot_Control/src/ArduinoRobot.h	49;"	d
BEEP_SIMPLE	Robot_Control/src/ArduinoRobot.h	47;"	d
BEGINSMS	GSM/src/GSM3ShieldV1BaseProvider.h	/^enum GSM3_commandType_e { XON, NONE, MODEMCONFIG, ALIVETEST, BEGINSMS, ENDSMS, AVAILABLESMS, FLUSHSMS,$/;"	e	enum:GSM3_commandType_e
BEGINWRITESOCKET	GSM/src/GSM3ShieldV1BaseProvider.h	/^	ATTACHGPRS, DETACHGPRS, CONNECTTCPCLIENT, DISCONNECTTCP, BEGINWRITESOCKET, ENDWRITESOCKET, $/;"	e	enum:GSM3_commandType_e
BIN	arduino/Print.h	32;"	d
BLACK	Robot_Control/src/ArduinoRobot.h	148;"	d
BLESTREAM_MIN_FLUSH_INTERVAL	Firmata/utility/BLEStream.h	23;"	d
BLESTREAM_TXBUFFER_FLUSH_INTERVAL	Firmata/utility/BLEStream.h	22;"	d
BLEStream	Firmata/utility/BLEStream.h	/^BLEStream::BLEStream(unsigned char req, unsigned char rdy, unsigned char rst) :$/;"	f	class:BLEStream
BLEStream	Firmata/utility/BLEStream.h	/^class BLEStream : public BLEPeripheral, public Stream$/;"	c
BLE_RDY	Firmata/examples/StandardFirmataBLE/bleConfig.h	44;"	d
BLE_REQ	Firmata/examples/StandardFirmataBLE/bleConfig.h	43;"	d
BLE_RST	Firmata/examples/StandardFirmataBLE/bleConfig.h	45;"	d
BLINKLED	Robot_IR_Remote/src/IRremoteInt.h	429;"	d
BLINKLED	Robot_IR_Remote/src/IRremoteInt.h	433;"	d
BLINKLED	Robot_IR_Remote/src/IRremoteInt.h	437;"	d
BLINKLED	Robot_IR_Remote/src/IRremoteInt.h	441;"	d
BLINKLED_OFF	Robot_IR_Remote/src/IRremoteInt.h	431;"	d
BLINKLED_OFF	Robot_IR_Remote/src/IRremoteInt.h	435;"	d
BLINKLED_OFF	Robot_IR_Remote/src/IRremoteInt.h	439;"	d
BLINKLED_OFF	Robot_IR_Remote/src/IRremoteInt.h	443;"	d
BLINKLED_ON	Robot_IR_Remote/src/IRremoteInt.h	430;"	d
BLINKLED_ON	Robot_IR_Remote/src/IRremoteInt.h	434;"	d
BLINKLED_ON	Robot_IR_Remote/src/IRremoteInt.h	438;"	d
BLINKLED_ON	Robot_IR_Remote/src/IRremoteInt.h	442;"	d
BLUE	Robot_Control/src/ArduinoRobot.h	149;"	d
BOOTSIG0	Robot_Control/src/FatStructs.h	/^uint8_t const BOOTSIG0 = 0X55;$/;"	v
BOOTSIG0	SD/src/utility/FatStructs.h	/^uint8_t const BOOTSIG0 = 0X55;$/;"	v
BOOTSIG1	Robot_Control/src/FatStructs.h	/^uint8_t const BOOTSIG1 = 0XAA;$/;"	v
BOOTSIG1	SD/src/utility/FatStructs.h	/^uint8_t const BOOTSIG1 = 0XAA;$/;"	v
BUFFERSIZETWEET	GSM/src/GSM3MobileServerService.cpp	40;"	d	file:
BUFFER_LENGTH	Wire/src/Wire.h	28;"	d
BUFFPIXEL	Robot_Control/src/lcd.cpp	22;"	d	file:
BUFFPIXEL	Robot_Control/src/utility/Adafruit_GFX.cpp	637;"	d	file:
BUFFPIXEL	TFT/src/utility/Adafruit_GFX.cpp	660;"	d	file:
BUFFPIXEL	TFT/src/utility/Adafruit_GFX.h	229;"	d
BUTTON_DOWN	Robot_Control/src/ArduinoRobot.h	40;"	d
BUTTON_LEFT	Robot_Control/src/ArduinoRobot.h	39;"	d
BUTTON_MIDDLE	Robot_Control/src/ArduinoRobot.h	43;"	d
BUTTON_NONE	Robot_Control/src/ArduinoRobot.h	38;"	d
BUTTON_RIGHT	Robot_Control/src/ArduinoRobot.h	42;"	d
BUTTON_UP	Robot_Control/src/ArduinoRobot.h	41;"	d
B_IR0	Robot_Control/src/ArduinoRobot.h	127;"	d
B_IR1	Robot_Control/src/ArduinoRobot.h	128;"	d
B_IR2	Robot_Control/src/ArduinoRobot.h	129;"	d
B_IR3	Robot_Control/src/ArduinoRobot.h	130;"	d
B_IR4	Robot_Control/src/ArduinoRobot.h	131;"	d
B_TK1	Robot_Control/src/ArduinoRobot.h	116;"	d
B_TK1	Robot_Motor/src/ArduinoRobotMotorBoard.h	46;"	d
B_TK2	Robot_Control/src/ArduinoRobot.h	117;"	d
B_TK2	Robot_Motor/src/ArduinoRobotMotorBoard.h	47;"	d
B_TK3	Robot_Control/src/ArduinoRobot.h	118;"	d
B_TK3	Robot_Motor/src/ArduinoRobotMotorBoard.h	48;"	d
B_TK4	Robot_Control/src/ArduinoRobot.h	119;"	d
B_TK4	Robot_Motor/src/ArduinoRobotMotorBoard.h	49;"	d
Bcmd	Robot_Control/src/Arduino_LCD.cpp	/^  Bcmd[] = {                    \/\/ Initialization commands for 7735B screens$/;"	v
Bcmd	TFT/src/utility/Adafruit_ST7735.cpp	/^  Bcmd[] = {                  \/\/ Initialization commands for 7735B screens$/;"	v	file:
Binary_h	arduino/binary.h	21;"	d
BuildRequest	Ethernet/src/Dns.cpp	/^uint16_t DNSClient::BuildRequest(const char* aName)$/;"	f	class:DNSClient
CACHE_FOR_READ	Robot_Control/src/Fat16.h	/^  static uint8_t const CACHE_FOR_READ  = 0;    \/\/ cache a block for read$/;"	m	class:Fat16
CACHE_FOR_READ	SD/src/utility/SdFat.h	/^  static uint8_t const CACHE_FOR_READ = 0;$/;"	m	class:SdVolume
CACHE_FOR_WRITE	Robot_Control/src/Fat16.h	/^  static uint8_t const CACHE_FOR_WRITE = 1;    \/\/ cache a block and set dirty$/;"	m	class:Fat16
CACHE_FOR_WRITE	SD/src/utility/SdFat.h	/^  static uint8_t const CACHE_FOR_WRITE = 1;$/;"	m	class:SdVolume
CALLING	GSM/src/GSM3MobileVoiceProvider.h	/^enum GSM3_voiceCall_st { IDLE_CALL, CALLING, RECEIVINGCALL, TALKING};$/;"	e	enum:GSM3_voiceCall_st
CAPABILITY_QUERY	Firmata/Firmata.h	79;"	d
CAPABILITY_RESPONSE	Firmata/Firmata.h	80;"	d
CDCCSInterfaceDescriptor	arduino/USBCore.h	/^} CDCCSInterfaceDescriptor;$/;"	t	typeref:struct:__anon20
CDCCSInterfaceDescriptor4	arduino/USBCore.h	/^} CDCCSInterfaceDescriptor4;$/;"	t	typeref:struct:__anon21
CDCDescriptor	arduino/USBCore.h	/^} CDCDescriptor;$/;"	t	typeref:struct:__anon24
CDC_ABSTRACT_CONTROL_MANAGEMENT	arduino/USBCore.h	120;"	d
CDC_ABSTRACT_CONTROL_MODEL	arduino/USBCore.h	118;"	d
CDC_ACM_INTERFACE	arduino/USBDesc.h	32;"	d
CDC_CALL_MANAGEMENT	arduino/USBCore.h	117;"	d
CDC_COMMUNICATION_INTERFACE_CLASS	arduino/USBCore.h	115;"	d
CDC_CS_ENDPOINT	arduino/USBCore.h	123;"	d
CDC_CS_INTERFACE	arduino/USBCore.h	122;"	d
CDC_DATA_INTERFACE	arduino/USBDesc.h	33;"	d
CDC_DATA_INTERFACE_CLASS	arduino/USBCore.h	124;"	d
CDC_ENDPOINT_ACM	arduino/USBDesc.h	35;"	d
CDC_ENDPOINT_IN	arduino/USBDesc.h	37;"	d
CDC_ENDPOINT_OUT	arduino/USBDesc.h	36;"	d
CDC_ENPOINT_COUNT	arduino/USBDesc.h	30;"	d
CDC_FIRST_ENDPOINT	arduino/USBDesc.h	34;"	d
CDC_GET_LINE_CODING	arduino/USBCore.h	59;"	d
CDC_GetInterface	arduino/CDC.cpp	/^int CDC_GetInterface(u8* interfaceNum)$/;"	f
CDC_HEADER	arduino/USBCore.h	119;"	d
CDC_INTERFACE_COUNT	arduino/USBDesc.h	29;"	d
CDC_RX	arduino/USBDesc.h	41;"	d
CDC_SEND_BREAK	arduino/USBCore.h	61;"	d
CDC_SET_CONTROL_LINE_STATE	arduino/USBCore.h	60;"	d
CDC_SET_LINE_CODING	arduino/USBCore.h	58;"	d
CDC_Setup	arduino/CDC.cpp	/^bool CDC_Setup(USBSetup& setup)$/;"	f
CDC_TX	arduino/USBDesc.h	42;"	d
CDC_UNION	arduino/USBCore.h	121;"	d
CDC_V1_10	arduino/USBCore.h	114;"	d
CHANGE	arduino/Arduino.h	60;"	d
CHANNEL_FOR_TIMER1	Servo/src/sam/ServoTimers.h	53;"	d
CHANNEL_FOR_TIMER1	Servo/src/samd/ServoTimers.h	42;"	d
CHANNEL_FOR_TIMER2	Servo/src/sam/ServoTimers.h	60;"	d
CHANNEL_FOR_TIMER2	Servo/src/samd/ServoTimers.h	53;"	d
CHANNEL_FOR_TIMER3	Servo/src/sam/ServoTimers.h	67;"	d
CHANNEL_FOR_TIMER4	Servo/src/sam/ServoTimers.h	74;"	d
CHANNEL_FOR_TIMER5	Servo/src/sam/ServoTimers.h	81;"	d
CH_BASE	Ethernet/src/utility/w5100.h	/^  static const uint16_t CH_BASE = 0x0400;$/;"	m	class:W5100Class
CH_SIZE	Ethernet/src/utility/w5100.h	/^  static const uint16_t CH_SIZE = 0x0100;$/;"	m	class:W5100Class
CID	Robot_Control/src/SdInfo.h	/^typedef struct CID {$/;"	s
CID	SD/src/utility/SdInfo.h	/^typedef struct CID {$/;"	s
CITYNAME	Robot_Control/src/utility/RobotTextManager.h	6;"	d
CLASS_IN	Ethernet/src/Dns.cpp	39;"	d	file:
CLEAR_FEATURE	arduino/USBCore.h	25;"	d
CLOSE	Ethernet/src/utility/w5100.h	/^  static const uint8_t CLOSE  = 0x00;$/;"	m	class:SnMR
CLOSED	Ethernet/src/utility/w5100.h	/^  static const uint8_t CLOSED      = 0x00;$/;"	m	class:SnSR
CLOSE_WAIT	Ethernet/src/utility/w5100.h	/^  static const uint8_t CLOSE_WAIT  = 0x1C;$/;"	m	class:SnSR
CLOSING	Ethernet/src/utility/w5100.h	/^  static const uint8_t CLOSING     = 0x1A;$/;"	m	class:SnSR
CMD0	Robot_Control/src/SdCard.h	/^uint8_t const CMD0     = 0X00;$/;"	v
CMD0	SD/src/utility/SdInfo.h	/^uint8_t const CMD0 = 0X00;$/;"	v
CMD10	Robot_Control/src/SdCard.h	/^uint8_t const CMD10    = 0X0A;$/;"	v
CMD10	SD/src/utility/SdInfo.h	/^uint8_t const CMD10 = 0X0A;$/;"	v
CMD13	Robot_Control/src/SdCard.h	/^uint8_t const CMD13    = 0X0D;$/;"	v
CMD13	SD/src/utility/SdInfo.h	/^uint8_t const CMD13 = 0X0D;$/;"	v
CMD17	Robot_Control/src/SdCard.h	/^uint8_t const CMD17    = 0X11;$/;"	v
CMD17	SD/src/utility/SdInfo.h	/^uint8_t const CMD17 = 0X11;$/;"	v
CMD24	Robot_Control/src/SdCard.h	/^uint8_t const CMD24    = 0X18;$/;"	v
CMD24	SD/src/utility/SdInfo.h	/^uint8_t const CMD24 = 0X18;$/;"	v
CMD25	SD/src/utility/SdInfo.h	/^uint8_t const CMD25 = 0X19;$/;"	v
CMD32	SD/src/utility/SdInfo.h	/^uint8_t const CMD32 = 0X20;$/;"	v
CMD33	SD/src/utility/SdInfo.h	/^uint8_t const CMD33 = 0X21;$/;"	v
CMD38	SD/src/utility/SdInfo.h	/^uint8_t const CMD38 = 0X26;$/;"	v
CMD55	Robot_Control/src/SdCard.h	/^uint8_t const CMD55    = 0X37;$/;"	v
CMD55	SD/src/utility/SdInfo.h	/^uint8_t const CMD55 = 0X37;$/;"	v
CMD58	SD/src/utility/SdInfo.h	/^uint8_t const CMD58 = 0X3A;$/;"	v
CMD8	SD/src/utility/SdInfo.h	/^uint8_t const CMD8 = 0X08;$/;"	v
CMD9	Robot_Control/src/SdCard.h	/^uint8_t const CMD9     = 0X09;$/;"	v
CMD9	SD/src/utility/SdInfo.h	/^uint8_t const CMD9 = 0X09;$/;"	v
CMFunctionalDescriptor	arduino/USBCore.h	/^} CMFunctionalDescriptor;$/;"	t	typeref:struct:__anon22
CN_IR	Robot_Control/src/ArduinoRobot.h	83;"	d
CN_IR	Robot_Motor/src/ArduinoRobotMotorBoard.h	37;"	d
CN_LEFT_MOTOR	Robot_Control/src/ArduinoRobot.h	81;"	d
CN_LEFT_MOTOR	Robot_Motor/src/ArduinoRobotMotorBoard.h	35;"	d
CN_RIGHT_MOTOR	Robot_Control/src/ArduinoRobot.h	82;"	d
CN_RIGHT_MOTOR	Robot_Motor/src/ArduinoRobotMotorBoard.h	36;"	d
COM2A0	arduino/Tone.cpp	46;"	d	file:
COM2A1	arduino/Tone.cpp	45;"	d	file:
COMMAND_ACTION_DONE	Robot_Control/src/ArduinoRobot.h	74;"	d
COMMAND_ACTION_DONE	Robot_Motor/src/ArduinoRobotMotorBoard.h	27;"	d
COMMAND_ANALOG_READ	Robot_Control/src/ArduinoRobot.h	68;"	d
COMMAND_ANALOG_READ	Robot_Motor/src/ArduinoRobotMotorBoard.h	21;"	d
COMMAND_ANALOG_READ_RE	Robot_Control/src/ArduinoRobot.h	69;"	d
COMMAND_ANALOG_READ_RE	Robot_Motor/src/ArduinoRobotMotorBoard.h	22;"	d
COMMAND_ANALOG_WRITE	Robot_Control/src/ArduinoRobot.h	66;"	d
COMMAND_ANALOG_WRITE	Robot_Motor/src/ArduinoRobotMotorBoard.h	19;"	d
COMMAND_DIGITAL_READ	Robot_Control/src/ArduinoRobot.h	70;"	d
COMMAND_DIGITAL_READ	Robot_Motor/src/ArduinoRobotMotorBoard.h	23;"	d
COMMAND_DIGITAL_READ_RE	Robot_Control/src/ArduinoRobot.h	71;"	d
COMMAND_DIGITAL_READ_RE	Robot_Motor/src/ArduinoRobotMotorBoard.h	24;"	d
COMMAND_DIGITAL_WRITE	Robot_Control/src/ArduinoRobot.h	67;"	d
COMMAND_DIGITAL_WRITE	Robot_Motor/src/ArduinoRobotMotorBoard.h	20;"	d
COMMAND_LINE_FOLLOW_CONFIG	Robot_Control/src/ArduinoRobot.h	78;"	d
COMMAND_LINE_FOLLOW_CONFIG	Robot_Motor/src/ArduinoRobotMotorBoard.h	31;"	d
COMMAND_MOTORS_STOP	Robot_Control/src/ArduinoRobot.h	65;"	d
COMMAND_MOTORS_STOP	Robot_Motor/src/ArduinoRobotMotorBoard.h	18;"	d
COMMAND_PAUSE_MODE	Robot_Control/src/ArduinoRobot.h	77;"	d
COMMAND_PAUSE_MODE	Robot_Motor/src/ArduinoRobotMotorBoard.h	30;"	d
COMMAND_READ_IR	Robot_Control/src/ArduinoRobot.h	72;"	d
COMMAND_READ_IR	Robot_Motor/src/ArduinoRobotMotorBoard.h	25;"	d
COMMAND_READ_IR_RE	Robot_Control/src/ArduinoRobot.h	73;"	d
COMMAND_READ_IR_RE	Robot_Motor/src/ArduinoRobotMotorBoard.h	26;"	d
COMMAND_READ_TRIM	Robot_Control/src/ArduinoRobot.h	75;"	d
COMMAND_READ_TRIM	Robot_Motor/src/ArduinoRobotMotorBoard.h	28;"	d
COMMAND_READ_TRIM_RE	Robot_Control/src/ArduinoRobot.h	76;"	d
COMMAND_READ_TRIM_RE	Robot_Motor/src/ArduinoRobotMotorBoard.h	29;"	d
COMMAND_RUN	Robot_Control/src/ArduinoRobot.h	64;"	d
COMMAND_RUN	Robot_Motor/src/ArduinoRobotMotorBoard.h	17;"	d
COMMAND_SWITCH_MODE	Robot_Control/src/ArduinoRobot.h	63;"	d
COMMAND_SWITCH_MODE	Robot_Motor/src/ArduinoRobotMotorBoard.h	16;"	d
COMPASS_BMP	Robot_Control/src/ArduinoRobot.h	54;"	d
CON	Ethernet/src/utility/w5100.h	/^  static const uint8_t CON     = 0x01;$/;"	m	class:SnIR
CONNECTING	GSM/src/GSM3MobileAccessProvider.h	/^enum GSM3_NetworkStatus_t { ERROR, IDLE, CONNECTING, GSM_READY, GPRS_READY, TRANSPARENT_CONNECTED, OFF};$/;"	e	enum:GSM3_NetworkStatus_t
CONNECTSERVER	GSM/src/GSM3ShieldV1BaseProvider.h	/^	AVAILABLESOCKET, FLUSHSOCKET, CONNECTSERVER, GETIP, GETCONNECTSTATUS, GETLOCATION, GETICCID}; $/;"	e	enum:GSM3_commandType_e
CONNECTTCPCLIENT	GSM/src/GSM3ShieldV1BaseProvider.h	/^	ATTACHGPRS, DETACHGPRS, CONNECTTCPCLIENT, DISCONNECTTCP, BEGINWRITESOCKET, ENDWRITESOCKET, $/;"	e	enum:GSM3_commandType_e
CONTROL_BMP	Robot_Control/src/ArduinoRobot.h	55;"	d
COUNTRYNAME	Robot_Control/src/utility/RobotTextManager.h	7;"	d
CSD	Robot_Control/src/SdInfo.h	/^typedef struct CSD {$/;"	s
CSDV1	SD/src/utility/SdInfo.h	/^typedef struct CSDV1 {$/;"	s
CSDV2	SD/src/utility/SdInfo.h	/^typedef struct CSDV2 {$/;"	s
CYAN	Robot_Control/src/ArduinoRobot.h	152;"	d
Channel	Servo/src/avr/Servo.cpp	/^static volatile int8_t Channel[_Nbr_16timers ];             \/\/ counter for the servo being pulsed for each timer (or -1 if refresh interval)$/;"	v	file:
Channel	Servo/src/sam/Servo.cpp	/^static volatile int8_t Channel[_Nbr_16timers ];             \/\/ counter for the servo being pulsed for each timer (or -1 if refresh interval)$/;"	v	file:
Character_h	arduino/WCharacter.h	21;"	d
ClassInterfaceRequest	arduino/USBCore.cpp	/^bool ClassInterfaceRequest(USBSetup& setup)$/;"	f	file:
ClearIN	arduino/USBCore.cpp	/^static inline void ClearIN(void)$/;"	f	file:
ClearOUT	arduino/USBCore.cpp	/^static inline void ClearOUT(void)$/;"	f	file:
ClearSetupInt	arduino/USBCore.cpp	/^static inline void ClearSetupInt()$/;"	f	file:
Client	arduino/Client.h	/^class Client : public Stream {$/;"	c
Color565	Robot_Control/src/Arduino_LCD.cpp	/^uint16_t Arduino_LCD::Color565(uint8_t r, uint8_t g, uint8_t b) {$/;"	f	class:Arduino_LCD
Color565	TFT/src/utility/Adafruit_ST7735.h	/^  uint16_t Color565(uint8_t r, uint8_t g, uint8_t b) { return newColor(r, g, b);}$/;"	f	class:Adafruit_ST7735
Compass	Robot_Control/src/Compass.h	/^class Compass{$/;"	c
Compass_h	Robot_Control/src/Compass.h	20;"	d
ConfigDescriptor	arduino/USBCore.h	/^} ConfigDescriptor;$/;"	t	typeref:struct:__anon16
D10	Robot_Control/src/ArduinoRobot.h	121;"	d
D7	Robot_Control/src/ArduinoRobot.h	124;"	d
D8	Robot_Control/src/ArduinoRobot.h	123;"	d
D9	Robot_Control/src/ArduinoRobot.h	122;"	d
DATA_RES_ACCEPTED	Robot_Control/src/SdCard.cpp	/^uint8_t const DATA_RES_ACCEPTED    = 0X05;$/;"	v
DATA_RES_ACCEPTED	SD/src/utility/SdInfo.h	/^uint8_t const DATA_RES_ACCEPTED = 0X05;$/;"	v
DATA_RES_CRC_ERROR	Robot_Control/src/SdCard.cpp	/^uint8_t const DATA_RES_CRC_ERROR   = 0X0B;$/;"	v
DATA_RES_MASK	Robot_Control/src/SdCard.cpp	/^uint8_t const DATA_RES_MASK        = 0X1F;$/;"	v
DATA_RES_MASK	SD/src/utility/SdInfo.h	/^uint8_t const DATA_RES_MASK = 0X1F;$/;"	v
DATA_RES_WRITE_ERROR	Robot_Control/src/SdCard.cpp	/^uint8_t const DATA_RES_WRITE_ERROR = 0X0D;$/;"	v
DATA_START_BLOCK	Robot_Control/src/SdCard.cpp	/^uint8_t const DATA_START_BLOCK = 0XFE;$/;"	v
DATA_START_BLOCK	SD/src/utility/SdInfo.h	/^uint8_t const DATA_START_BLOCK = 0XFE;$/;"	v
DCS_MODE	GSM/src/GSM3ShieldV1BandManagement.h	/^typedef enum GSM3GSMBand {UNDEFINED, EGSM_MODE, DCS_MODE, PCS_MODE, EGSM_DCS_MODE, GSM850_PCS_MODE, GSM850_EGSM_DCS_PCS_MODE};$/;"	e	enum:GSM3GSMBand
DEBUG_BEGIN	Firmata/utility/firmataDebug.h	5;"	d
DEBUG_BEGIN	Firmata/utility/firmataDebug.h	9;"	d
DEBUG_PRINT	Firmata/utility/firmataDebug.h	11;"	d
DEBUG_PRINT	Firmata/utility/firmataDebug.h	7;"	d
DEBUG_PRINTLN	Firmata/utility/firmataDebug.h	10;"	d
DEBUG_PRINTLN	Firmata/utility/firmataDebug.h	6;"	d
DEC	arduino/Print.h	29;"	d
DECODED	Robot_IR_Remote/src/IRremoteInt.h	79;"	d
DEFAULT	arduino/Arduino.h	65;"	d
DEFAULT	arduino/Arduino.h	70;"	d
DEFAULT	arduino/Arduino.h	83;"	d
DEFAULT_LEASE	Ethernet/src/Dhcp.h	48;"	d
DEFAULT_PULSE_WIDTH	Servo/src/Servo.h	76;"	d
DEFAULT_PWM_RESOLUTION	Firmata/Boards.h	733;"	d
DEFAULT_PWM_RESOLUTION	Firmata/Boards.h	751;"	d
DEG_TO_RAD	arduino/Arduino.h	50;"	d
DELAY	Robot_Control/src/Arduino_LCD.cpp	106;"	d	file:
DELAY	TFT/src/utility/Adafruit_ST7735.cpp	124;"	d	file:
DELAY_TABLE	GSM/src/GSM3SoftSerial.cpp	/^} DELAY_TABLE;$/;"	t	typeref:struct:_DELAY_TABLE	file:
DETACHGPRS	GSM/src/GSM3ShieldV1BaseProvider.h	/^	ATTACHGPRS, DETACHGPRS, CONNECTTCPCLIENT, DISCONNECTTCP, BEGINWRITESOCKET, ENDWRITESOCKET, $/;"	e	enum:GSM3_commandType_e
DEVICEADDRESS	Robot_Control/src/EEPROM_I2C.h	11;"	d
DEVICE_CLASS	arduino/USBCore.cpp	71;"	d	file:
DEVICE_REMOTE_WAKEUP	arduino/USBCore.h	80;"	d
DHCP_ACK	Ethernet/src/Dhcp.h	32;"	d
DHCP_BOOTREPLY	Ethernet/src/Dhcp.h	25;"	d
DHCP_BOOTREQUEST	Ethernet/src/Dhcp.h	24;"	d
DHCP_CHECK_NONE	Ethernet/src/Dhcp.h	50;"	d
DHCP_CHECK_REBIND_FAIL	Ethernet/src/Dhcp.h	53;"	d
DHCP_CHECK_REBIND_OK	Ethernet/src/Dhcp.h	54;"	d
DHCP_CHECK_RENEW_FAIL	Ethernet/src/Dhcp.h	51;"	d
DHCP_CHECK_RENEW_OK	Ethernet/src/Dhcp.h	52;"	d
DHCP_CLIENT_PORT	Ethernet/src/Dhcp.h	21;"	d
DHCP_DECLINE	Ethernet/src/Dhcp.h	31;"	d
DHCP_DISCOVER	Ethernet/src/Dhcp.h	28;"	d
DHCP_FLAGSBROADCAST	Ethernet/src/Dhcp.h	17;"	d
DHCP_HLENETHERNET	Ethernet/src/Dhcp.h	40;"	d
DHCP_HOPS	Ethernet/src/Dhcp.h	41;"	d
DHCP_HTYPE100MB	Ethernet/src/Dhcp.h	38;"	d
DHCP_HTYPE10MB	Ethernet/src/Dhcp.h	37;"	d
DHCP_INFORM	Ethernet/src/Dhcp.h	35;"	d
DHCP_NAK	Ethernet/src/Dhcp.h	33;"	d
DHCP_OFFER	Ethernet/src/Dhcp.h	29;"	d
DHCP_RELEASE	Ethernet/src/Dhcp.h	34;"	d
DHCP_REQUEST	Ethernet/src/Dhcp.h	30;"	d
DHCP_SECS	Ethernet/src/Dhcp.h	42;"	d
DHCP_SERVER_PORT	Ethernet/src/Dhcp.h	20;"	d
DIGITAL_MESSAGE	Firmata/Firmata.h	50;"	d
DIR_ATT_ARCHIVE	Robot_Control/src/FatStructs.h	/^uint8_t const DIR_ATT_ARCHIVE = 0X20;$/;"	v
DIR_ATT_ARCHIVE	SD/src/utility/FatStructs.h	/^uint8_t const DIR_ATT_ARCHIVE = 0X20;$/;"	v
DIR_ATT_DEFINED_BITS	Robot_Control/src/FatStructs.h	/^uint8_t const DIR_ATT_DEFINED_BITS = 0X3F;$/;"	v
DIR_ATT_DEFINED_BITS	SD/src/utility/FatStructs.h	/^uint8_t const DIR_ATT_DEFINED_BITS = 0X3F;$/;"	v
DIR_ATT_DIRECTORY	Robot_Control/src/FatStructs.h	/^uint8_t const DIR_ATT_DIRECTORY = 0X10;$/;"	v
DIR_ATT_DIRECTORY	SD/src/utility/FatStructs.h	/^uint8_t const DIR_ATT_DIRECTORY = 0X10;$/;"	v
DIR_ATT_FILE_TYPE_MASK	Robot_Control/src/FatStructs.h	/^uint8_t const DIR_ATT_FILE_TYPE_MASK = (DIR_ATT_VOLUME_ID | DIR_ATT_DIRECTORY);$/;"	v
DIR_ATT_FILE_TYPE_MASK	SD/src/utility/FatStructs.h	/^uint8_t const DIR_ATT_FILE_TYPE_MASK = (DIR_ATT_VOLUME_ID | DIR_ATT_DIRECTORY);$/;"	v
DIR_ATT_HIDDEN	Robot_Control/src/FatStructs.h	/^uint8_t const DIR_ATT_HIDDEN = 0X02;$/;"	v
DIR_ATT_HIDDEN	SD/src/utility/FatStructs.h	/^uint8_t const DIR_ATT_HIDDEN = 0X02;$/;"	v
DIR_ATT_LONG_NAME	Robot_Control/src/FatStructs.h	/^uint8_t const DIR_ATT_LONG_NAME = 0X0F;$/;"	v
DIR_ATT_LONG_NAME	SD/src/utility/FatStructs.h	/^uint8_t const DIR_ATT_LONG_NAME = 0X0F;$/;"	v
DIR_ATT_LONG_NAME_MASK	Robot_Control/src/FatStructs.h	/^uint8_t const DIR_ATT_LONG_NAME_MASK = 0X3F;$/;"	v
DIR_ATT_LONG_NAME_MASK	SD/src/utility/FatStructs.h	/^uint8_t const DIR_ATT_LONG_NAME_MASK = 0X3F;$/;"	v
DIR_ATT_READ_ONLY	Robot_Control/src/FatStructs.h	/^uint8_t const DIR_ATT_READ_ONLY = 0X01;$/;"	v
DIR_ATT_READ_ONLY	SD/src/utility/FatStructs.h	/^uint8_t const DIR_ATT_READ_ONLY = 0X01;$/;"	v
DIR_ATT_SYSTEM	Robot_Control/src/FatStructs.h	/^uint8_t const DIR_ATT_SYSTEM = 0X04;$/;"	v
DIR_ATT_SYSTEM	SD/src/utility/FatStructs.h	/^uint8_t const DIR_ATT_SYSTEM = 0X04;$/;"	v
DIR_ATT_VOLUME_ID	Robot_Control/src/FatStructs.h	/^uint8_t const DIR_ATT_VOLUME_ID = 0X08;$/;"	v
DIR_ATT_VOLUME_ID	SD/src/utility/FatStructs.h	/^uint8_t const DIR_ATT_VOLUME_ID = 0X08;$/;"	v
DIR_IS_FILE	Robot_Control/src/FatStructs.h	/^static inline uint8_t DIR_IS_FILE(const dir_t* dir) {$/;"	f
DIR_IS_FILE	SD/src/utility/FatStructs.h	/^static inline uint8_t DIR_IS_FILE(const dir_t* dir) {$/;"	f
DIR_IS_FILE_OR_SUBDIR	Robot_Control/src/FatStructs.h	/^static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {$/;"	f
DIR_IS_FILE_OR_SUBDIR	SD/src/utility/FatStructs.h	/^static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {$/;"	f
DIR_IS_LONG_NAME	Robot_Control/src/FatStructs.h	/^static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {$/;"	f
DIR_IS_LONG_NAME	SD/src/utility/FatStructs.h	/^static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {$/;"	f
DIR_IS_SUBDIR	Robot_Control/src/FatStructs.h	/^static inline uint8_t DIR_IS_SUBDIR(const dir_t* dir) {$/;"	f
DIR_IS_SUBDIR	SD/src/utility/FatStructs.h	/^static inline uint8_t DIR_IS_SUBDIR(const dir_t* dir) {$/;"	f
DIR_NAME_0XE5	Robot_Control/src/FatStructs.h	/^uint8_t const DIR_NAME_0XE5 = 0X05;$/;"	v
DIR_NAME_0XE5	SD/src/utility/FatStructs.h	/^uint8_t const DIR_NAME_0XE5 = 0X05;$/;"	v
DIR_NAME_DELETED	Robot_Control/src/FatStructs.h	/^uint8_t const DIR_NAME_DELETED = 0XE5;$/;"	v
DIR_NAME_DELETED	SD/src/utility/FatStructs.h	/^uint8_t const DIR_NAME_DELETED = 0XE5;$/;"	v
DIR_NAME_FREE	Robot_Control/src/FatStructs.h	/^uint8_t const DIR_NAME_FREE = 0X00;$/;"	v
DIR_NAME_FREE	SD/src/utility/FatStructs.h	/^uint8_t const DIR_NAME_FREE = 0X00;$/;"	v
DISCON	Ethernet/src/utility/w5100.h	/^  static const uint8_t DISCON  = 0x02;$/;"	m	class:SnIR
DISCONNECTTCP	GSM/src/GSM3ShieldV1BaseProvider.h	/^	ATTACHGPRS, DETACHGPRS, CONNECTTCPCLIENT, DISCONNECTTCP, BEGINWRITESOCKET, ENDWRITESOCKET, $/;"	e	enum:GSM3_commandType_e
DISH	Robot_IR_Remote/src/IRremote.h	42;"	d
DISH_BITS	Robot_IR_Remote/src/IRremoteInt.h	163;"	d
DISH_BIT_MARK	Robot_IR_Remote/src/IRremoteInt.h	143;"	d
DISH_HDR_MARK	Robot_IR_Remote/src/IRremoteInt.h	141;"	d
DISH_HDR_SPACE	Robot_IR_Remote/src/IRremoteInt.h	142;"	d
DISH_ONE_SPACE	Robot_IR_Remote/src/IRremoteInt.h	144;"	d
DISH_RPT_SPACE	Robot_IR_Remote/src/IRremoteInt.h	146;"	d
DISH_TOP_BIT	Robot_IR_Remote/src/IRremoteInt.h	147;"	d
DISH_ZERO_SPACE	Robot_IR_Remote/src/IRremoteInt.h	145;"	d
DISPLAY	arduino/Arduino.h	55;"	d
DNSClient	Ethernet/src/Dns.h	/^class DNSClient$/;"	c
DNSClient_h	Ethernet/src/Dns.h	6;"	d
DNS_HEADER_SIZE	Ethernet/src/Dns.cpp	18;"	d	file:
DNS_PORT	Ethernet/src/Dns.cpp	42;"	d	file:
D_CDCCS	arduino/USBCore.h	281;"	d
D_CDCCS4	arduino/USBCore.h	282;"	d
D_CONFIG	arduino/USBCore.h	269;"	d
D_DEVICE	arduino/USBCore.h	266;"	d
D_ENDPOINT	arduino/USBCore.h	275;"	d
D_HIDREPORT	HID/src/HID.h	121;"	d
D_IAD	arduino/USBCore.h	278;"	d
D_INTERFACE	arduino/USBCore.h	272;"	d
DebugPulse	SoftwareSerial/src/SoftwareSerial.cpp	/^inline void DebugPulse(uint8_t pin, uint8_t count)$/;"	f
DebugPulse	SoftwareSerial/src/SoftwareSerial.cpp	/^inline void DebugPulse(uint8_t, uint8_t) {}$/;"	f
DeviceDescriptor	arduino/USBCore.h	/^} DeviceDescriptor;$/;"	t	typeref:struct:__anon15
DhcpClass	Ethernet/src/Dhcp.h	/^class DhcpClass {$/;"	c
Dhcp_h	Ethernet/src/Dhcp.h	5;"	d
EE24LC512MAXBYTES	Robot_Control/src/EEPROM_I2C.h	10;"	d
EEPROM	EEPROM/src/EEPROM.h	/^static EEPROMClass EEPROM;$/;"	v
EEPROMClass	EEPROM/src/EEPROM.h	/^struct EEPROMClass{$/;"	s
EEPROM_BMP	Robot_Control/src/ArduinoRobot.h	/^struct EEPROM_BMP{$/;"	s
EEPROM_I2C	Robot_Control/src/EEPROM_I2C.h	/^class EEPROM_I2C{$/;"	c
EEPROM_I2C_h	Robot_Control/src/EEPROM_I2C.h	2;"	d
EEPROM_h	EEPROM/src/EEPROM.h	22;"	d
EEPtr	EEPROM/src/EEPROM.h	/^    EEPtr( const int index )$/;"	f	struct:EEPtr
EEPtr	EEPROM/src/EEPROM.h	/^struct EEPtr{$/;"	s
EERef	EEPROM/src/EEPROM.h	/^    EERef( const int index )$/;"	f	struct:EERef
EERef	EEPROM/src/EEPROM.h	/^struct EERef{$/;"	s
EGSM_DCS_MODE	GSM/src/GSM3ShieldV1BandManagement.h	/^typedef enum GSM3GSMBand {UNDEFINED, EGSM_MODE, DCS_MODE, PCS_MODE, EGSM_DCS_MODE, GSM850_PCS_MODE, GSM850_EGSM_DCS_PCS_MODE};$/;"	e	enum:GSM3GSMBand
EGSM_MODE	GSM/src/GSM3ShieldV1BandManagement.h	/^typedef enum GSM3GSMBand {UNDEFINED, EGSM_MODE, DCS_MODE, PCS_MODE, EGSM_DCS_MODE, GSM850_PCS_MODE, GSM850_EGSM_DCS_PCS_MODE};$/;"	e	enum:GSM3GSMBand
EMPTY	Robot_Control/src/utility/RobotTextManager.h	8;"	d
ENCODER	Firmata/Firmata.h	117;"	d
ENCODER_DATA	Firmata/Firmata.h	67;"	d
ENDPOINT_HALT	arduino/USBCore.h	81;"	d
ENDSMS	GSM/src/GSM3ShieldV1BaseProvider.h	/^enum GSM3_commandType_e { XON, NONE, MODEMCONFIG, ALIVETEST, BEGINSMS, ENDSMS, AVAILABLESMS, FLUSHSMS,$/;"	e	enum:GSM3_commandType_e
ENDWRITESOCKET	GSM/src/GSM3ShieldV1BaseProvider.h	/^	ATTACHGPRS, DETACHGPRS, CONNECTTCPCLIENT, DISCONNECTTCP, BEGINWRITESOCKET, ENDWRITESOCKET, $/;"	e	enum:GSM3_commandType_e
END_SYSEX	Firmata/Firmata.h	62;"	d
EP_DOUBLE_64	arduino/USBCore.cpp	333;"	d	file:
EP_SINGLE_16	arduino/USBCore.cpp	334;"	d	file:
EP_SINGLE_64	arduino/USBCore.cpp	332;"	d	file:
EP_TYPE_BULK_IN	arduino/USBAPI.h	51;"	d
EP_TYPE_BULK_OUT	arduino/USBAPI.h	52;"	d
EP_TYPE_CONTROL	arduino/USBAPI.h	50;"	d
EP_TYPE_INTERRUPT_IN	arduino/USBAPI.h	53;"	d
EP_TYPE_INTERRUPT_OUT	arduino/USBAPI.h	54;"	d
EP_TYPE_ISOCHRONOUS_IN	arduino/USBAPI.h	55;"	d
EP_TYPE_ISOCHRONOUS_OUT	arduino/USBAPI.h	56;"	d
ERR	Robot_IR_Remote/src/IRremoteInt.h	78;"	d
ERROR	GSM/src/GSM3MobileAccessProvider.h	/^enum GSM3_NetworkStatus_t { ERROR, IDLE, CONNECTING, GSM_READY, GPRS_READY, TRANSPARENT_CONNECTED, OFF};$/;"	e	enum:GSM3_NetworkStatus_t
ESP8266_WIFI	Firmata/examples/StandardFirmataWiFi/wifiConfig.h	84;"	d
ESTABLISHED	Ethernet/src/utility/w5100.h	/^  static const uint8_t ESTABLISHED = 0x17;$/;"	m	class:SnSR
ETHERNETCLIENTSTREAM_H	Firmata/utility/EthernetClientStream.h	21;"	d
ETHERNET_SHIELD_SPI_CS	Ethernet/src/utility/w5100.h	15;"	d
EULER	arduino/Arduino.h	52;"	d
EVEN_PARITY	arduino/USBAPI.h	/^		EVEN_PARITY = 2,$/;"	e	enum:Serial_::__anon11
EXTENDED_ANALOG	Firmata/Firmata.h	76;"	d
EXTERNAL	arduino/Arduino.h	66;"	d
EXTERNAL	arduino/Arduino.h	71;"	d
EXTERNAL	arduino/Arduino.h	84;"	d
EXTERNAL_INT_0	arduino/wiring_private.h	46;"	d
EXTERNAL_INT_1	arduino/wiring_private.h	47;"	d
EXTERNAL_INT_2	arduino/wiring_private.h	48;"	d
EXTERNAL_INT_3	arduino/wiring_private.h	49;"	d
EXTERNAL_INT_4	arduino/wiring_private.h	50;"	d
EXTERNAL_INT_5	arduino/wiring_private.h	51;"	d
EXTERNAL_INT_6	arduino/wiring_private.h	52;"	d
EXTERNAL_INT_7	arduino/wiring_private.h	53;"	d
EXTERNAL_NUM_INTERRUPTS	arduino/wiring_private.h	57;"	d
EXTERNAL_NUM_INTERRUPTS	arduino/wiring_private.h	59;"	d
EXTERNAL_NUM_INTERRUPTS	arduino/wiring_private.h	61;"	d
EXTERNAL_NUM_INTERRUPTS	arduino/wiring_private.h	63;"	d
EasyTransfer2	Robot_Control/src/EasyTransfer2.h	/^class EasyTransfer2 {$/;"	c
EasyTransfer2	Robot_Motor/src/EasyTransfer2.h	/^class EasyTransfer2 {$/;"	c
EasyTransfer2_h	Robot_Control/src/EasyTransfer2.h	25;"	d
EasyTransfer2_h	Robot_Motor/src/EasyTransfer2.h	25;"	d
EndpointDescriptor	arduino/USBCore.h	/^} EndpointDescriptor;$/;"	t	typeref:struct:__anon18
Ethernet	Ethernet/src/Ethernet.cpp	/^EthernetClass Ethernet;$/;"	v
EthernetClass	Ethernet/src/Ethernet.h	/^class EthernetClass {$/;"	c
EthernetClient	Ethernet/src/EthernetClient.cpp	/^EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {$/;"	f	class:EthernetClient
EthernetClient	Ethernet/src/EthernetClient.cpp	/^EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {$/;"	f	class:EthernetClient
EthernetClient	Ethernet/src/EthernetClient.h	/^class EthernetClient : public Client {$/;"	c
EthernetClientStream	Firmata/utility/EthernetClientStream.h	/^EthernetClientStream::EthernetClientStream(Client &client, IPAddress localip, IPAddress ip, const char* host, uint16_t port)$/;"	f	class:EthernetClientStream
EthernetClientStream	Firmata/utility/EthernetClientStream.h	/^class EthernetClientStream : public Stream$/;"	c
EthernetServer	Ethernet/src/EthernetServer.cpp	/^EthernetServer::EthernetServer(uint16_t port)$/;"	f	class:EthernetServer
EthernetServer	Ethernet/src/EthernetServer.h	/^class EthernetServer : $/;"	c
EthernetUDP	Ethernet/src/EthernetUdp.cpp	/^EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}$/;"	f	class:EthernetUDP
EthernetUDP	Ethernet/src/EthernetUdp.h	/^class EthernetUDP : public UDP {$/;"	c
F	arduino/WString.h	38;"	d
FALLING	arduino/Arduino.h	61;"	d
FAT16EOC	Robot_Control/src/FatStructs.h	/^uint16_t const FAT16EOC = 0XFFFF;$/;"	v
FAT16EOC	SD/src/utility/FatStructs.h	/^uint16_t const FAT16EOC = 0XFFFF;$/;"	v
FAT16EOC_MIN	Robot_Control/src/FatStructs.h	/^uint16_t const FAT16EOC_MIN = 0XFFF8;$/;"	v
FAT16EOC_MIN	SD/src/utility/FatStructs.h	/^uint16_t const FAT16EOC_MIN = 0XFFF8;$/;"	v
FAT16_DEBUG_SUPPORT	Robot_Control/src/Fat16Config.h	37;"	d
FAT16_VERSION	Robot_Control/src/Fat16.h	34;"	d
FAT32EOC	Robot_Control/src/FatStructs.h	/^uint32_t const FAT32EOC = 0X0FFFFFFF;$/;"	v
FAT32EOC	SD/src/utility/FatStructs.h	/^uint32_t const FAT32EOC = 0X0FFFFFFF;$/;"	v
FAT32EOC_MIN	Robot_Control/src/FatStructs.h	/^uint32_t const FAT32EOC_MIN = 0X0FFFFFF8;$/;"	v
FAT32EOC_MIN	SD/src/utility/FatStructs.h	/^uint32_t const FAT32EOC_MIN = 0X0FFFFFF8;$/;"	v
FAT32MASK	Robot_Control/src/FatStructs.h	/^uint32_t const FAT32MASK = 0X0FFFFFFF;$/;"	v
FAT32MASK	SD/src/utility/FatStructs.h	/^uint32_t const FAT32MASK = 0X0FFFFFFF;$/;"	v
FAT_DATE	Robot_Control/src/Fat16.h	/^static inline uint16_t FAT_DATE(uint16_t year, uint8_t month, uint8_t day) {$/;"	f
FAT_DATE	SD/src/utility/SdFat.h	/^static inline uint16_t FAT_DATE(uint16_t year, uint8_t month, uint8_t day) {$/;"	f
FAT_DAY	Robot_Control/src/Fat16.h	/^static inline uint8_t FAT_DAY(uint16_t fatDate) {$/;"	f
FAT_DAY	SD/src/utility/SdFat.h	/^static inline uint8_t FAT_DAY(uint16_t fatDate) {$/;"	f
FAT_DEFAULT_DATE	Robot_Control/src/Fat16.h	/^uint16_t const FAT_DEFAULT_DATE = ((2000 - 1980) << 9) | (1 << 5) | 1;$/;"	v
FAT_DEFAULT_DATE	SD/src/utility/SdFat.h	/^uint16_t const FAT_DEFAULT_DATE = ((2000 - 1980) << 9) | (1 << 5) | 1;$/;"	v
FAT_DEFAULT_TIME	Robot_Control/src/Fat16.h	/^uint16_t const FAT_DEFAULT_TIME = (1 << 11);$/;"	v
FAT_DEFAULT_TIME	SD/src/utility/SdFat.h	/^uint16_t const FAT_DEFAULT_TIME = (1 << 11);$/;"	v
FAT_FILE_TYPE_CLOSED	SD/src/utility/SdFat.h	/^uint8_t const FAT_FILE_TYPE_CLOSED = 0;$/;"	v
FAT_FILE_TYPE_MIN_DIR	SD/src/utility/SdFat.h	/^uint8_t const FAT_FILE_TYPE_MIN_DIR = FAT_FILE_TYPE_ROOT16;$/;"	v
FAT_FILE_TYPE_NORMAL	SD/src/utility/SdFat.h	/^uint8_t const FAT_FILE_TYPE_NORMAL = 1;$/;"	v
FAT_FILE_TYPE_ROOT16	SD/src/utility/SdFat.h	/^uint8_t const FAT_FILE_TYPE_ROOT16 = 2;$/;"	v
FAT_FILE_TYPE_ROOT32	SD/src/utility/SdFat.h	/^uint8_t const FAT_FILE_TYPE_ROOT32 = 3;$/;"	v
FAT_FILE_TYPE_SUBDIR	SD/src/utility/SdFat.h	/^uint8_t const FAT_FILE_TYPE_SUBDIR = 4;$/;"	v
FAT_HOUR	Robot_Control/src/Fat16.h	/^static inline uint8_t FAT_HOUR(uint16_t fatTime) {$/;"	f
FAT_HOUR	SD/src/utility/SdFat.h	/^static inline uint8_t FAT_HOUR(uint16_t fatTime) {$/;"	f
FAT_MINUTE	Robot_Control/src/Fat16.h	/^static inline uint8_t FAT_MINUTE(uint16_t fatTime) {$/;"	f
FAT_MINUTE	SD/src/utility/SdFat.h	/^static inline uint8_t FAT_MINUTE(uint16_t fatTime) {$/;"	f
FAT_MONTH	Robot_Control/src/Fat16.h	/^static inline uint8_t FAT_MONTH(uint16_t fatDate) {$/;"	f
FAT_MONTH	SD/src/utility/SdFat.h	/^static inline uint8_t FAT_MONTH(uint16_t fatDate) {$/;"	f
FAT_SECOND	Robot_Control/src/Fat16.h	/^static inline uint8_t FAT_SECOND(uint16_t fatTime) {$/;"	f
FAT_SECOND	SD/src/utility/SdFat.h	/^static inline uint8_t FAT_SECOND(uint16_t fatTime) {$/;"	f
FAT_TIME	Robot_Control/src/Fat16.h	/^static inline uint16_t FAT_TIME(uint8_t hour, uint8_t minute, uint8_t second) {$/;"	f
FAT_TIME	SD/src/utility/SdFat.h	/^static inline uint16_t FAT_TIME(uint8_t hour, uint8_t minute, uint8_t second) {$/;"	f
FAT_YEAR	Robot_Control/src/Fat16.h	/^static inline uint16_t FAT_YEAR(uint16_t fatDate) {$/;"	f
FAT_YEAR	SD/src/utility/SdFat.h	/^static inline uint16_t FAT_YEAR(uint16_t fatDate) {$/;"	f
FEATURE_REMOTE_WAKEUP_ENABLED	arduino/USBCore.h	86;"	d
FEATURE_SELFPOWERED_ENABLED	arduino/USBCore.h	85;"	d
FILE_READ	SD/src/SD.h	23;"	d
FILE_WRITE	SD/src/SD.h	24;"	d
FIN_WAIT	Ethernet/src/utility/w5100.h	/^  static const uint8_t FIN_WAIT    = 0x18;$/;"	m	class:SnSR
FIRMATA_BLE_LOCAL_NAME	Firmata/examples/StandardFirmataBLE/bleConfig.h	20;"	d
FIRMATA_BUGFIX_VERSION	Firmata/Firmata.h	40;"	d
FIRMATA_DEBUG_H	Firmata/utility/firmataDebug.h	2;"	d
FIRMATA_FIRMWARE_BUGFIX_VERSION	Firmata/Firmata.h	33;"	d
FIRMATA_FIRMWARE_MAJOR_VERSION	Firmata/Firmata.h	31;"	d
FIRMATA_FIRMWARE_MINOR_VERSION	Firmata/Firmata.h	32;"	d
FIRMATA_MAJOR_VERSION	Firmata/Firmata.h	38;"	d
FIRMATA_MINOR_VERSION	Firmata/Firmata.h	39;"	d
FIRMATA_PROTOCOL_BUGFIX_VERSION	Firmata/Firmata.h	25;"	d
FIRMATA_PROTOCOL_MAJOR_VERSION	Firmata/Firmata.h	23;"	d
FIRMATA_PROTOCOL_MINOR_VERSION	Firmata/Firmata.h	24;"	d
FIRMATA_SERIAL_FEATURE	Firmata/utility/SerialFirmata.h	33;"	d
FIRMATA_STRING	Firmata/Firmata.h	89;"	d
FLUSHSMS	GSM/src/GSM3ShieldV1BaseProvider.h	/^enum GSM3_commandType_e { XON, NONE, MODEMCONFIG, ALIVETEST, BEGINSMS, ENDSMS, AVAILABLESMS, FLUSHSMS,$/;"	e	enum:GSM3_commandType_e
FLUSHSOCKET	GSM/src/GSM3ShieldV1BaseProvider.h	/^	AVAILABLESOCKET, FLUSHSOCKET, CONNECTSERVER, GETIP, GETCONNECTSTATUS, GETLOCATION, GETICCID}; $/;"	e	enum:GSM3_commandType_e
FNV_BASIS_32	Robot_IR_Remote/src/IRremote.cpp	755;"	d	file:
FNV_PRIME_32	Robot_IR_Remote/src/IRremote.cpp	754;"	d	file:
FONT5X7_H	Robot_Control/src/glcdfont.c	5;"	d	file:
FONT5X7_H	TFT/src/utility/glcdfont.c	7;"	d	file:
FRACT_INC	arduino/wiring.c	35;"	d	file:
FRACT_MAX	arduino/wiring.c	36;"	d	file:
FREQ	Robot_Control/src/Squawk.cpp	17;"	d	file:
F_FILE_DIR_DIRTY	Robot_Control/src/Fat16.h	/^  static uint8_t const F_FILE_DIR_DIRTY = 0X80;  \/\/ require sync directory entry$/;"	m	class:Fat16
F_FILE_DIR_DIRTY	SD/src/utility/SdFat.h	/^  static uint8_t const F_FILE_DIR_DIRTY = 0X80;$/;"	m	class:SdFile
F_FILE_UNBUFFERED_READ	SD/src/utility/SdFat.h	/^  static uint8_t const F_FILE_UNBUFFERED_READ = 0X40;$/;"	m	class:SdFile
F_OFLAG	Robot_Control/src/Fat16.h	/^  static uint8_t const F_OFLAG = O_ACCMODE | O_APPEND | O_SYNC;$/;"	m	class:Fat16
F_OFLAG	SD/src/utility/SdFat.h	/^  static uint8_t const F_OFLAG = (O_ACCMODE | O_APPEND | O_SYNC);$/;"	m	class:SdFile
F_UNUSED	SD/src/utility/SdFat.h	/^  static uint8_t const F_UNUSED = 0X30;$/;"	m	class:SdFile
Fat16	Robot_Control/src/Fat16.h	/^  Fat16(void) : flags_(0) {}$/;"	f	class:Fat16
Fat16	Robot_Control/src/Fat16.h	/^class Fat16 : public Print {$/;"	c
Fat16Config_h	Robot_Control/src/Fat16Config.h	25;"	d
Fat16_h	Robot_Control/src/Fat16.h	21;"	d
Fat16util_h	Robot_Control/src/Fat16util.h	2;"	d
FatStructs_h	Robot_Control/src/FatStructs.h	21;"	d
FatStructs_h	SD/src/utility/FatStructs.h	21;"	d
FifoByteCount	arduino/USBCore.cpp	/^static inline u8 FifoByteCount()$/;"	f	file:
FifoFree	arduino/USBCore.cpp	/^static inline u8 FifoFree()$/;"	f	file:
File	SD/src/File.cpp	/^File::File(SdFile f, const char *n) {$/;"	f	class:File
File	SD/src/File.cpp	/^File::File(void) {$/;"	f	class:File
File	SD/src/SD.h	/^class File : public Stream {$/;"	c	namespace:SDLib
Firmata	Firmata/Firmata.cpp	/^FirmataClass Firmata;$/;"	v
FirmataClass	Firmata/Firmata.cpp	/^FirmataClass::FirmataClass()$/;"	f	class:FirmataClass
FirmataClass	Firmata/Firmata.h	/^class FirmataClass$/;"	c
FirmataFeature	Firmata/utility/FirmataFeature.h	/^class FirmataFeature$/;"	c
FirmataFeature_h	Firmata/utility/FirmataFeature.h	25;"	d
FirmataStream	Firmata/Firmata.h	/^    Stream *FirmataStream;$/;"	m	class:FirmataClass
Firmata_Boards_h	Firmata/Boards.h	17;"	d
Firmata_h	Firmata/Firmata.h	15;"	d
FrameNumber	arduino/USBCore.cpp	/^static inline u8 FrameNumber()$/;"	f	file:
FreeRam	Robot_Control/src/Fat16util.h	/^static int FreeRam(void) {$/;"	f
FreeRam	SD/src/utility/SdFatUtil.h	/^static UNUSEDOK int FreeRam(void) {$/;"	f
GAP_TICKS	Robot_IR_Remote/src/IRremoteInt.h	170;"	d
GCC_VERSION	SoftwareSerial/src/SoftwareSerial.h	47;"	d
GCM_FOR_TIMER_1	Servo/src/samd/ServoTimers.h	49;"	d
GCM_FOR_TIMER_2	Servo/src/samd/ServoTimers.h	59;"	d
GEARS_BMP	Robot_Control/src/ArduinoRobot.h	56;"	d
GETCONNECTSTATUS	GSM/src/GSM3ShieldV1BaseProvider.h	/^	AVAILABLESOCKET, FLUSHSOCKET, CONNECTSERVER, GETIP, GETCONNECTSTATUS, GETLOCATION, GETICCID}; $/;"	e	enum:GSM3_commandType_e
GETICCID	GSM/src/GSM3ShieldV1BaseProvider.h	/^	AVAILABLESOCKET, FLUSHSOCKET, CONNECTSERVER, GETIP, GETCONNECTSTATUS, GETLOCATION, GETICCID}; $/;"	e	enum:GSM3_commandType_e
GETIP	GSM/src/GSM3ShieldV1BaseProvider.h	/^	AVAILABLESOCKET, FLUSHSOCKET, CONNECTSERVER, GETIP, GETCONNECTSTATUS, GETLOCATION, GETICCID}; $/;"	e	enum:GSM3_commandType_e
GETLOCATION	GSM/src/GSM3ShieldV1BaseProvider.h	/^	AVAILABLESOCKET, FLUSHSOCKET, CONNECTSERVER, GETIP, GETCONNECTSTATUS, GETLOCATION, GETICCID}; $/;"	e	enum:GSM3_commandType_e
GET_CONFIGURATION	arduino/USBCore.h	30;"	d
GET_DESCRIPTOR	arduino/USBCore.h	28;"	d
GET_INTERFACE	arduino/USBCore.h	32;"	d
GET_STATUS	arduino/USBCore.h	24;"	d
GGP	Ethernet/src/utility/w5100.h	/^  static const uint8_t GGP  = 3;$/;"	m	class:IPPROTO
GPRS	GSM/src/GSM.h	57;"	d
GPRS_READY	GSM/src/GSM3MobileAccessProvider.h	/^enum GSM3_NetworkStatus_t { ERROR, IDLE, CONNECTING, GSM_READY, GPRS_READY, TRANSPARENT_CONNECTED, OFF};$/;"	e	enum:GSM3_NetworkStatus_t
GREEN	Robot_Control/src/ArduinoRobot.h	151;"	d
GSM	GSM/src/GSM.h	56;"	d
GSM3CircularBuffer	GSM/src/GSM3CircularBuffer.cpp	/^GSM3CircularBuffer::GSM3CircularBuffer(GSM3CircularBufferManager* mgr)$/;"	f	class:GSM3CircularBuffer
GSM3CircularBuffer	GSM/src/GSM3CircularBuffer.h	/^class GSM3CircularBuffer$/;"	c
GSM3CircularBufferManager	GSM/src/GSM3CircularBuffer.h	/^class GSM3CircularBufferManager$/;"	c
GSM3GSMBand	GSM/src/GSM3ShieldV1BandManagement.h	/^typedef enum GSM3GSMBand {UNDEFINED, EGSM_MODE, DCS_MODE, PCS_MODE, EGSM_DCS_MODE, GSM850_PCS_MODE, GSM850_EGSM_DCS_PCS_MODE};$/;"	g
GSM3MOBILECLIENTSERVICE_CLIENT	GSM/src/GSM3MobileClientService.cpp	43;"	d	file:
GSM3MOBILECLIENTSERVICE_SYNCH	GSM/src/GSM3MobileClientService.cpp	45;"	d	file:
GSM3MOBILECLIENTSERVICE_WRITING	GSM/src/GSM3MobileClientService.cpp	44;"	d	file:
GSM3MOBILESERVERSERVICE_SYNCH	GSM/src/GSM3MobileServerService.cpp	42;"	d	file:
GSM3MobileAccessProvider	GSM/src/GSM3MobileAccessProvider.h	/^class GSM3MobileAccessProvider$/;"	c
GSM3MobileCellManagement	GSM/src/GSM3MobileCellManagement.h	/^class GSM3MobileCellManagement$/;"	c
GSM3MobileClientProvider	GSM/src/GSM3MobileClientProvider.h	/^		GSM3MobileClientProvider(){};$/;"	f	class:GSM3MobileClientProvider
GSM3MobileClientProvider	GSM/src/GSM3MobileClientProvider.h	/^class GSM3MobileClientProvider$/;"	c
GSM3MobileClientService	GSM/src/GSM3MobileClientService.cpp	/^GSM3MobileClientService::GSM3MobileClientService(bool synch)$/;"	f	class:GSM3MobileClientService
GSM3MobileClientService	GSM/src/GSM3MobileClientService.cpp	/^GSM3MobileClientService::GSM3MobileClientService(int socket, bool synch)$/;"	f	class:GSM3MobileClientService
GSM3MobileClientService	GSM/src/GSM3MobileClientService.h	/^class GSM3MobileClientService : public Client$/;"	c
GSM3MobileDataNetworkProvider	GSM/src/GSM3MobileDataNetworkProvider.h	/^class GSM3MobileDataNetworkProvider$/;"	c
GSM3MobileMockupProvider	GSM/src/GSM3MobileMockupProvider.cpp	/^GSM3MobileMockupProvider::GSM3MobileMockupProvider()$/;"	f	class:GSM3MobileMockupProvider
GSM3MobileMockupProvider	GSM/src/GSM3MobileMockupProvider.h	/^class GSM3MobileMockupProvider: public GSM3MobileNetworkProvider$/;"	c
GSM3MobileNetworkProvider	GSM/src/GSM3MobileNetworkProvider.cpp	/^GSM3MobileNetworkProvider::GSM3MobileNetworkProvider()$/;"	f	class:GSM3MobileNetworkProvider
GSM3MobileNetworkProvider	GSM/src/GSM3MobileNetworkProvider.h	/^class GSM3MobileNetworkProvider $/;"	c
GSM3MobileNetworkRegistry	GSM/src/GSM3MobileNetworkRegistry.cpp	/^GSM3MobileNetworkRegistry::GSM3MobileNetworkRegistry()$/;"	f	class:GSM3MobileNetworkRegistry
GSM3MobileNetworkRegistry	GSM/src/GSM3MobileNetworkRegistry.h	/^class GSM3MobileNetworkRegistry$/;"	c
GSM3MobileSMSProvider	GSM/src/GSM3MobileSMSProvider.h	/^class GSM3MobileSMSProvider$/;"	c
GSM3MobileServerProvider	GSM/src/GSM3MobileServerProvider.h	/^		GSM3MobileServerProvider(){};$/;"	f	class:GSM3MobileServerProvider
GSM3MobileServerProvider	GSM/src/GSM3MobileServerProvider.h	/^class GSM3MobileServerProvider$/;"	c
GSM3MobileServerService	GSM/src/GSM3MobileServerService.cpp	/^GSM3MobileServerService::GSM3MobileServerService(uint8_t port, bool synch)$/;"	f	class:GSM3MobileServerService
GSM3MobileServerService	GSM/src/GSM3MobileServerService.h	/^class GSM3MobileServerService : public Server$/;"	c
GSM3MobileVoiceProvider	GSM/src/GSM3MobileVoiceProvider.h	/^class GSM3MobileVoiceProvider$/;"	c
GSM3SMSSERVICE_SYNCH	GSM/src/GSM3SMSService.cpp	42;"	d	file:
GSM3SMSService	GSM/src/GSM3SMSService.cpp	/^GSM3SMSService::GSM3SMSService(bool synch)$/;"	f	class:GSM3SMSService
GSM3SMSService	GSM/src/GSM3SMSService.h	/^class GSM3SMSService : public Stream $/;"	c
GSM3ShieldV1	GSM/src/GSM3ShieldV1.cpp	/^GSM3ShieldV1::GSM3ShieldV1(bool db) $/;"	f	class:GSM3ShieldV1
GSM3ShieldV1	GSM/src/GSM3ShieldV1.h	/^class GSM3ShieldV1 : public GSM3MobileNetworkProvider, public GSM3ShieldV1BaseProvider$/;"	c
GSM3ShieldV1AccessProvider	GSM/src/GSM3ShieldV1AccessProvider.cpp	/^GSM3ShieldV1AccessProvider::GSM3ShieldV1AccessProvider(bool debug)$/;"	f	class:GSM3ShieldV1AccessProvider
GSM3ShieldV1AccessProvider	GSM/src/GSM3ShieldV1AccessProvider.h	/^class GSM3ShieldV1AccessProvider : public GSM3MobileAccessProvider, public GSM3ShieldV1BaseProvider$/;"	c
GSM3ShieldV1BandManagement	GSM/src/GSM3ShieldV1BandManagement.cpp	/^GSM3ShieldV1BandManagement::GSM3ShieldV1BandManagement(bool trace): modem(trace)$/;"	f	class:GSM3ShieldV1BandManagement
GSM3ShieldV1BandManagement	GSM/src/GSM3ShieldV1BandManagement.h	/^class GSM3ShieldV1BandManagement$/;"	c
GSM3ShieldV1BaseProvider	GSM/src/GSM3ShieldV1BaseProvider.h	/^class GSM3ShieldV1BaseProvider$/;"	c
GSM3ShieldV1CellManagement	GSM/src/GSM3ShieldV1CellManagement.cpp	/^GSM3ShieldV1CellManagement::GSM3ShieldV1CellManagement()$/;"	f	class:GSM3ShieldV1CellManagement
GSM3ShieldV1CellManagement	GSM/src/GSM3ShieldV1CellManagement.h	/^class GSM3ShieldV1CellManagement : public GSM3MobileCellManagement, public GSM3ShieldV1BaseProvider$/;"	c
GSM3ShieldV1ClientProvider	GSM/src/GSM3ShieldV1ClientProvider.cpp	/^GSM3ShieldV1ClientProvider::GSM3ShieldV1ClientProvider()$/;"	f	class:GSM3ShieldV1ClientProvider
GSM3ShieldV1ClientProvider	GSM/src/GSM3ShieldV1ClientProvider.h	/^class GSM3ShieldV1ClientProvider : public GSM3MobileClientProvider,  public GSM3ShieldV1BaseProvider$/;"	c
GSM3ShieldV1DataNetworkProvider	GSM/src/GSM3ShieldV1DataNetworkProvider.h	/^class GSM3ShieldV1DataNetworkProvider : public GSM3MobileDataNetworkProvider, public GSM3ShieldV1BaseProvider$/;"	c
GSM3ShieldV1DirectModemProvider	GSM/src/GSM3ShieldV1DirectModemProvider.cpp	/^GSM3ShieldV1DirectModemProvider::GSM3ShieldV1DirectModemProvider(bool t)$/;"	f	class:GSM3ShieldV1DirectModemProvider
GSM3ShieldV1DirectModemProvider	GSM/src/GSM3ShieldV1DirectModemProvider.h	/^class GSM3ShieldV1DirectModemProvider : public GSM3ShieldV1BaseProvider, public Stream$/;"	c
GSM3ShieldV1ModemCore	GSM/src/GSM3ShieldV1ModemCore.cpp	/^GSM3ShieldV1ModemCore::GSM3ShieldV1ModemCore() : gss()$/;"	f	class:GSM3ShieldV1ModemCore
GSM3ShieldV1ModemCore	GSM/src/GSM3ShieldV1ModemCore.h	/^class GSM3ShieldV1ModemCore : public GSM3SoftSerialMgr, public Print$/;"	c
GSM3ShieldV1ModemVerification	GSM/src/GSM3ShieldV1ModemVerification.cpp	/^GSM3ShieldV1ModemVerification::GSM3ShieldV1ModemVerification()$/;"	f	class:GSM3ShieldV1ModemVerification
GSM3ShieldV1ModemVerification	GSM/src/GSM3ShieldV1ModemVerification.h	/^class GSM3ShieldV1ModemVerification$/;"	c
GSM3ShieldV1MultiClientProvider	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^GSM3ShieldV1MultiClientProvider::GSM3ShieldV1MultiClientProvider()$/;"	f	class:GSM3ShieldV1MultiClientProvider
GSM3ShieldV1MultiClientProvider	GSM/src/GSM3ShieldV1MultiClientProvider.h	/^class GSM3ShieldV1MultiClientProvider : public GSM3MobileClientProvider,  public GSM3ShieldV1BaseProvider$/;"	c
GSM3ShieldV1MultiServerProvider	GSM/src/GSM3ShieldV1MultiServerProvider.cpp	/^GSM3ShieldV1MultiServerProvider::GSM3ShieldV1MultiServerProvider()$/;"	f	class:GSM3ShieldV1MultiServerProvider
GSM3ShieldV1MultiServerProvider	GSM/src/GSM3ShieldV1MultiServerProvider.h	/^class GSM3ShieldV1MultiServerProvider : public GSM3MobileServerProvider,  public GSM3ShieldV1BaseProvider$/;"	c
GSM3ShieldV1PinManagement	GSM/src/GSM3ShieldV1PinManagement.cpp	/^GSM3ShieldV1PinManagement::GSM3ShieldV1PinManagement()$/;"	f	class:GSM3ShieldV1PinManagement
GSM3ShieldV1PinManagement	GSM/src/GSM3ShieldV1PinManagement.h	/^class GSM3ShieldV1PinManagement$/;"	c
GSM3ShieldV1SMSProvider	GSM/src/GSM3ShieldV1SMSProvider.cpp	/^GSM3ShieldV1SMSProvider::GSM3ShieldV1SMSProvider()$/;"	f	class:GSM3ShieldV1SMSProvider
GSM3ShieldV1SMSProvider	GSM/src/GSM3ShieldV1SMSProvider.h	/^class GSM3ShieldV1SMSProvider : public GSM3MobileSMSProvider, public GSM3ShieldV1BaseProvider$/;"	c
GSM3ShieldV1ScanNetworks	GSM/src/GSM3ShieldV1ScanNetworks.cpp	/^GSM3ShieldV1ScanNetworks::GSM3ShieldV1ScanNetworks(bool trace): modem(trace)$/;"	f	class:GSM3ShieldV1ScanNetworks
GSM3ShieldV1ScanNetworks	GSM/src/GSM3ShieldV1ScanNetworks.h	/^class GSM3ShieldV1ScanNetworks$/;"	c
GSM3ShieldV1ServerProvider	GSM/src/GSM3ShieldV1ServerProvider.cpp	/^GSM3ShieldV1ServerProvider::GSM3ShieldV1ServerProvider()$/;"	f	class:GSM3ShieldV1ServerProvider
GSM3ShieldV1ServerProvider	GSM/src/GSM3ShieldV1ServerProvider.h	/^class GSM3ShieldV1ServerProvider : public GSM3MobileServerProvider,  public GSM3ShieldV1BaseProvider$/;"	c
GSM3ShieldV1VoiceProvider	GSM/src/GSM3ShieldV1VoiceProvider.cpp	/^GSM3ShieldV1VoiceProvider::GSM3ShieldV1VoiceProvider()$/;"	f	class:GSM3ShieldV1VoiceProvider
GSM3ShieldV1VoiceProvider	GSM/src/GSM3ShieldV1VoiceProvider.h	/^class GSM3ShieldV1VoiceProvider : public GSM3MobileVoiceProvider, public GSM3ShieldV1BaseProvider$/;"	c
GSM3SoftSerial	GSM/src/GSM3SoftSerial.cpp	/^GSM3SoftSerial::GSM3SoftSerial():$/;"	f	class:GSM3SoftSerial
GSM3SoftSerial	GSM/src/GSM3SoftSerial.h	/^class GSM3SoftSerial : public GSM3CircularBufferManager$/;"	c
GSM3SoftSerialMgr	GSM/src/GSM3SoftSerial.h	/^class GSM3SoftSerialMgr$/;"	c
GSM3VOICECALLSERVICE_SYNCH	GSM/src/GSM3VoiceCallService.cpp	42;"	d	file:
GSM3VoiceCallService	GSM/src/GSM3VoiceCallService.cpp	/^GSM3VoiceCallService::GSM3VoiceCallService(bool synch)$/;"	f	class:GSM3VoiceCallService
GSM3VoiceCallService	GSM/src/GSM3VoiceCallService.h	/^class GSM3VoiceCallService$/;"	c
GSM3_NetworkStatus_t	GSM/src/GSM3MobileAccessProvider.h	/^enum GSM3_NetworkStatus_t { ERROR, IDLE, CONNECTING, GSM_READY, GPRS_READY, TRANSPARENT_CONNECTED, OFF};$/;"	g
GSM3_commandType_e	GSM/src/GSM3ShieldV1BaseProvider.h	/^enum GSM3_commandType_e { XON, NONE, MODEMCONFIG, ALIVETEST, BEGINSMS, ENDSMS, AVAILABLESMS, FLUSHSMS,$/;"	g
GSM3_modemlinest_e	GSM/src/GSM3MobileMockupProvider.h	/^		enum GSM3_modemlinest_e { IDLE, WAITINGANSWER, SENDINGSMS};$/;"	g	class:GSM3MobileMockupProvider
GSM3_voiceCall_st	GSM/src/GSM3MobileVoiceProvider.h	/^enum GSM3_voiceCall_st { IDLE_CALL, CALLING, RECEIVINGCALL, TALKING};$/;"	g
GSM850_EGSM_DCS_PCS_MODE	GSM/src/GSM3ShieldV1BandManagement.h	/^typedef enum GSM3GSMBand {UNDEFINED, EGSM_MODE, DCS_MODE, PCS_MODE, EGSM_DCS_MODE, GSM850_PCS_MODE, GSM850_EGSM_DCS_PCS_MODE};$/;"	e	enum:GSM3GSMBand
GSM850_PCS_MODE	GSM/src/GSM3ShieldV1BandManagement.h	/^typedef enum GSM3GSMBand {UNDEFINED, EGSM_MODE, DCS_MODE, PCS_MODE, EGSM_DCS_MODE, GSM850_PCS_MODE, GSM850_EGSM_DCS_PCS_MODE};$/;"	e	enum:GSM3GSMBand
GSMBand	GSM/src/GSM.h	66;"	d
GSMCell	GSM/src/GSM.h	65;"	d
GSMClient	GSM/src/GSM.h	58;"	d
GSMModem	GSM/src/GSM.h	64;"	d
GSMPIN	GSM/src/GSM.h	63;"	d
GSMScanner	GSM/src/GSM.h	67;"	d
GSMServer	GSM/src/GSM.h	59;"	d
GSMVoiceCall	GSM/src/GSM.h	60;"	d
GSM_MODE_DCS	GSM/src/GSM3ShieldV1BandManagement.h	43;"	d
GSM_MODE_EGSM	GSM/src/GSM3ShieldV1BandManagement.h	42;"	d
GSM_MODE_EGSM_DCS	GSM/src/GSM3ShieldV1BandManagement.h	45;"	d
GSM_MODE_GSM850_EGSM_DCS_PCS	GSM/src/GSM3ShieldV1BandManagement.h	47;"	d
GSM_MODE_GSM850_PCS	GSM/src/GSM3ShieldV1BandManagement.h	46;"	d
GSM_MODE_PCS	GSM/src/GSM3ShieldV1BandManagement.h	44;"	d
GSM_MODE_UNDEFINED	GSM/src/GSM3ShieldV1BandManagement.h	41;"	d
GSM_READY	GSM/src/GSM3MobileAccessProvider.h	/^enum GSM3_NetworkStatus_t { ERROR, IDLE, CONNECTING, GSM_READY, GPRS_READY, TRANSPARENT_CONNECTED, OFF};$/;"	e	enum:GSM3_NetworkStatus_t
GSM_SMS	GSM/src/GSM.h	61;"	d
Gcmd	TFT/src/utility/Adafruit_ST7735.cpp	/^  Gcmd[] = {                  \/\/ Initialization commands for 7735B screens$/;"	v	file:
HALF_PI	arduino/Arduino.h	48;"	d
HANDLER_FOR_TIMER1	Servo/src/sam/Servo.cpp	/^void HANDLER_FOR_TIMER1(void) {$/;"	f
HANDLER_FOR_TIMER1	Servo/src/sam/ServoTimers.h	56;"	d
HANDLER_FOR_TIMER1	Servo/src/samd/Servo.cpp	/^void HANDLER_FOR_TIMER1(void) {$/;"	f
HANDLER_FOR_TIMER1	Servo/src/samd/ServoTimers.h	48;"	d
HANDLER_FOR_TIMER2	Servo/src/sam/Servo.cpp	/^void HANDLER_FOR_TIMER2(void) {$/;"	f
HANDLER_FOR_TIMER2	Servo/src/sam/ServoTimers.h	63;"	d
HANDLER_FOR_TIMER2	Servo/src/samd/Servo.cpp	/^void HANDLER_FOR_TIMER2(void) {$/;"	f
HANDLER_FOR_TIMER2	Servo/src/samd/ServoTimers.h	58;"	d
HANDLER_FOR_TIMER3	Servo/src/sam/Servo.cpp	/^void HANDLER_FOR_TIMER3(void) {$/;"	f
HANDLER_FOR_TIMER3	Servo/src/sam/ServoTimers.h	70;"	d
HANDLER_FOR_TIMER4	Servo/src/sam/Servo.cpp	/^void HANDLER_FOR_TIMER4(void) {$/;"	f
HANDLER_FOR_TIMER4	Servo/src/sam/ServoTimers.h	77;"	d
HANDLER_FOR_TIMER5	Servo/src/sam/Servo.cpp	/^void HANDLER_FOR_TIMER5(void) {$/;"	f
HANDLER_FOR_TIMER5	Servo/src/sam/ServoTimers.h	84;"	d
HANGCALL	GSM/src/GSM3ShieldV1BaseProvider.h	/^	VOICECALL, ANSWERCALL, HANGCALL, RETRIEVECALLINGNUMBER, $/;"	e	enum:GSM3_commandType_e
HAVE_CDCSERIAL	arduino/USBAPI.h	154;"	d
HAVE_HWSERIAL0	arduino/HardwareSerial.h	144;"	d
HAVE_HWSERIAL1	arduino/HardwareSerial.h	148;"	d
HAVE_HWSERIAL2	arduino/HardwareSerial.h	152;"	d
HAVE_HWSERIAL3	arduino/HardwareSerial.h	156;"	d
HEIGHT	Robot_Control/src/utility/Adafruit_GFX.h	/^    WIDTH, HEIGHT;   \/\/ This is the 'raw' display w\/h - never changes$/;"	m	class:Adafruit_GFX
HEIGHT	TFT/src/utility/Adafruit_GFX.h	/^	WIDTH, HEIGHT;   \/\/ this is the 'raw' display w\/h - never changes$/;"	m	class:Adafruit_GFX
HEX	arduino/Print.h	30;"	d
HI4	Robot_Control/src/Squawk.cpp	14;"	d	file:
HID	HID/src/HID.cpp	/^HID_& HID()$/;"	f
HIDDescDescriptor	HID/src/HID.h	/^} HIDDescDescriptor;$/;"	t	typeref:struct:__anon8
HIDDescriptor	HID/src/HID.h	/^} HIDDescriptor;$/;"	t	typeref:struct:__anon9
HIDSubDescriptor	HID/src/HID.h	/^  HIDSubDescriptor(const void *d, const uint16_t l) : data(d), length(l) { }$/;"	f	class:HIDSubDescriptor
HIDSubDescriptor	HID/src/HID.h	/^class HIDSubDescriptor {$/;"	c
HID_	HID/src/HID.cpp	/^HID_::HID_(void) : PluggableUSBModule(1, 1, epType),$/;"	f	class:HID_
HID_	HID/src/HID.h	/^class HID_ : public PluggableUSBModule$/;"	c
HID_BOOT_PROTOCOL	HID/src/HID.h	54;"	d
HID_GET_IDLE	HID/src/HID.h	33;"	d
HID_GET_PROTOCOL	HID/src/HID.h	34;"	d
HID_GET_REPORT	HID/src/HID.h	32;"	d
HID_HID_DESCRIPTOR_TYPE	HID/src/HID.h	39;"	d
HID_PHYSICAL_DESCRIPTOR_TYPE	HID/src/HID.h	41;"	d
HID_PROTOCOL_KEYBOARD	HID/src/HID.h	49;"	d
HID_PROTOCOL_MOUSE	HID/src/HID.h	50;"	d
HID_PROTOCOL_NONE	HID/src/HID.h	48;"	d
HID_REPORT_DESCRIPTOR_TYPE	HID/src/HID.h	40;"	d
HID_REPORT_PROTOCOL	HID/src/HID.h	55;"	d
HID_REPORT_TYPE_FEATURE	HID/src/HID.h	60;"	d
HID_REPORT_TYPE_INPUT	HID/src/HID.h	58;"	d
HID_REPORT_TYPE_OUTPUT	HID/src/HID.h	59;"	d
HID_SET_IDLE	HID/src/HID.h	36;"	d
HID_SET_PROTOCOL	HID/src/HID.h	37;"	d
HID_SET_REPORT	HID/src/HID.h	35;"	d
HID_SUBCLASS_BOOT_INTERFACE	HID/src/HID.h	45;"	d
HID_SUBCLASS_NONE	HID/src/HID.h	44;"	d
HID_h	HID/src/HID.h	20;"	d
HIGH	arduino/Arduino.h	40;"	d
HMC6352ReadAddress	Robot_Control/src/Compass.h	30;"	d
HMC6352SlaveAddress	Robot_Control/src/Compass.h	29;"	d
HOME_BMP	Robot_Control/src/ArduinoRobot.h	52;"	d
HOST_CONNECTION_CONNECTED	Firmata/utility/WiFiStream.h	28;"	d
HOST_CONNECTION_DISCONNECTED	Firmata/utility/WiFiStream.h	27;"	d
HOST_NAME	Ethernet/src/Dhcp.h	47;"	d
HW_SERIAL0	Firmata/utility/SerialFirmata.h	36;"	d
HW_SERIAL1	Firmata/utility/SerialFirmata.h	37;"	d
HW_SERIAL2	Firmata/utility/SerialFirmata.h	38;"	d
HW_SERIAL3	Firmata/utility/SerialFirmata.h	39;"	d
HWrestart	GSM/src/GSM3ShieldV1AccessProvider.cpp	/^int GSM3ShieldV1AccessProvider::HWrestart()$/;"	f	class:GSM3ShieldV1AccessProvider
HWstart	GSM/src/GSM3ShieldV1AccessProvider.cpp	/^int GSM3ShieldV1AccessProvider::HWstart()$/;"	f	class:GSM3ShieldV1AccessProvider
HardwareSerial	arduino/HardwareSerial.h	/^class HardwareSerial : public Stream$/;"	c
HardwareSerial	arduino/HardwareSerial_private.h	/^HardwareSerial::HardwareSerial($/;"	f	class:HardwareSerial
HardwareSerial_h	arduino/HardwareSerial.h	25;"	d
I2C	Firmata/Firmata.h	114;"	d
I2C_CONFIG	Firmata/Firmata.h	75;"	d
I2C_REPLY	Firmata/Firmata.h	74;"	d
I2C_REQUEST	Firmata/Firmata.h	73;"	d
IADDescriptor	arduino/USBCore.h	/^} IADDescriptor;$/;"	t	typeref:struct:__anon19
ICMP	Ethernet/src/utility/w5100.h	/^  static const uint8_t ICMP = 1;$/;"	m	class:IPPROTO
IDLE	GSM/src/GSM3MobileAccessProvider.h	/^enum GSM3_NetworkStatus_t { ERROR, IDLE, CONNECTING, GSM_READY, GPRS_READY, TRANSPARENT_CONNECTED, OFF};$/;"	e	enum:GSM3_NetworkStatus_t
IDLE	GSM/src/GSM3MobileMockupProvider.h	/^		enum GSM3_modemlinest_e { IDLE, WAITINGANSWER, SENDINGSMS};$/;"	e	enum:GSM3MobileMockupProvider::GSM3_modemlinest_e
IDLE_CALL	GSM/src/GSM3MobileVoiceProvider.h	/^enum GSM3_voiceCall_st { IDLE_CALL, CALLING, RECEIVINGCALL, TALKING};$/;"	e	enum:GSM3_voiceCall_st
IDM_AR0	Ethernet/src/utility/w5100.h	22;"	d
IDM_AR1	Ethernet/src/utility/w5100.h	23;"	d
IDM_DR	Ethernet/src/utility/w5100.h	24;"	d
IDM_OR	Ethernet/src/utility/w5100.h	21;"	d
IDP	Ethernet/src/utility/w5100.h	/^  static const uint8_t IDP  = 22;$/;"	m	class:IPPROTO
ID_TC_FOR_TIMER1	Servo/src/sam/ServoTimers.h	54;"	d
ID_TC_FOR_TIMER1	Servo/src/samd/ServoTimers.h	46;"	d
ID_TC_FOR_TIMER2	Servo/src/sam/ServoTimers.h	61;"	d
ID_TC_FOR_TIMER2	Servo/src/samd/ServoTimers.h	56;"	d
ID_TC_FOR_TIMER3	Servo/src/sam/ServoTimers.h	68;"	d
ID_TC_FOR_TIMER4	Servo/src/sam/ServoTimers.h	75;"	d
ID_TC_FOR_TIMER5	Servo/src/sam/ServoTimers.h	82;"	d
IGMP	Ethernet/src/utility/w5100.h	/^  static const uint8_t IGMP = 2;$/;"	m	class:IPPROTO
IGNORE	Firmata/Firmata.h	118;"	d
ILI9163C_BLACK	Robot_Control/src/Arduino_LCD.h	85;"	d
ILI9163C_BLUE	Robot_Control/src/Arduino_LCD.h	86;"	d
ILI9163C_CASET	Robot_Control/src/Arduino_LCD.h	52;"	d
ILI9163C_COLMOD	Robot_Control/src/Arduino_LCD.h	58;"	d
ILI9163C_CYAN	Robot_Control/src/Arduino_LCD.h	89;"	d
ILI9163C_DISPOFF	Robot_Control/src/Arduino_LCD.h	50;"	d
ILI9163C_DISPON	Robot_Control/src/Arduino_LCD.h	51;"	d
ILI9163C_DISSET5	Robot_Control/src/Arduino_LCD.h	65;"	d
ILI9163C_FRMCTR1	Robot_Control/src/Arduino_LCD.h	61;"	d
ILI9163C_FRMCTR2	Robot_Control/src/Arduino_LCD.h	62;"	d
ILI9163C_FRMCTR3	Robot_Control/src/Arduino_LCD.h	63;"	d
ILI9163C_GMCTRN1	Robot_Control/src/Arduino_LCD.h	82;"	d
ILI9163C_GMCTRP1	Robot_Control/src/Arduino_LCD.h	81;"	d
ILI9163C_GREEN	Robot_Control/src/Arduino_LCD.h	88;"	d
ILI9163C_INVCTR	Robot_Control/src/Arduino_LCD.h	64;"	d
ILI9163C_INVOFF	Robot_Control/src/Arduino_LCD.h	48;"	d
ILI9163C_INVON	Robot_Control/src/Arduino_LCD.h	49;"	d
ILI9163C_MADCTL	Robot_Control/src/Arduino_LCD.h	59;"	d
ILI9163C_MAGENTA	Robot_Control/src/Arduino_LCD.h	90;"	d
ILI9163C_NOP	Robot_Control/src/Arduino_LCD.h	38;"	d
ILI9163C_NORON	Robot_Control/src/Arduino_LCD.h	46;"	d
ILI9163C_PTLAR	Robot_Control/src/Arduino_LCD.h	57;"	d
ILI9163C_PTLON	Robot_Control/src/Arduino_LCD.h	45;"	d
ILI9163C_PWCTR1	Robot_Control/src/Arduino_LCD.h	67;"	d
ILI9163C_PWCTR2	Robot_Control/src/Arduino_LCD.h	68;"	d
ILI9163C_PWCTR3	Robot_Control/src/Arduino_LCD.h	69;"	d
ILI9163C_PWCTR4	Robot_Control/src/Arduino_LCD.h	70;"	d
ILI9163C_PWCTR5	Robot_Control/src/Arduino_LCD.h	71;"	d
ILI9163C_PWCTR6	Robot_Control/src/Arduino_LCD.h	79;"	d
ILI9163C_RAMRD	Robot_Control/src/Arduino_LCD.h	55;"	d
ILI9163C_RAMWR	Robot_Control/src/Arduino_LCD.h	54;"	d
ILI9163C_RASET	Robot_Control/src/Arduino_LCD.h	53;"	d
ILI9163C_RDDID	Robot_Control/src/Arduino_LCD.h	40;"	d
ILI9163C_RDDST	Robot_Control/src/Arduino_LCD.h	41;"	d
ILI9163C_RDID1	Robot_Control/src/Arduino_LCD.h	74;"	d
ILI9163C_RDID2	Robot_Control/src/Arduino_LCD.h	75;"	d
ILI9163C_RDID3	Robot_Control/src/Arduino_LCD.h	76;"	d
ILI9163C_RDID4	Robot_Control/src/Arduino_LCD.h	77;"	d
ILI9163C_RED	Robot_Control/src/Arduino_LCD.h	87;"	d
ILI9163C_SLPIN	Robot_Control/src/Arduino_LCD.h	43;"	d
ILI9163C_SLPOUT	Robot_Control/src/Arduino_LCD.h	44;"	d
ILI9163C_SWRESET	Robot_Control/src/Arduino_LCD.h	39;"	d
ILI9163C_TFTHEIGHT	Robot_Control/src/Arduino_LCD.h	36;"	d
ILI9163C_TFTWIDTH	Robot_Control/src/Arduino_LCD.h	35;"	d
ILI9163C_VMCTR1	Robot_Control/src/Arduino_LCD.h	72;"	d
ILI9163C_WHITE	Robot_Control/src/Arduino_LCD.h	92;"	d
ILI9163C_YELLOW	Robot_Control/src/Arduino_LCD.h	91;"	d
IMANUFACTURER	arduino/USBDesc.h	44;"	d
IMPLEMENT_ISR	arduino/WInterrupts.c	283;"	d	file:
INICIO_BMP	Robot_Control/src/ArduinoRobot.h	60;"	d
INIT	Ethernet/src/utility/w5100.h	/^  static const uint8_t INIT        = 0x13;$/;"	m	class:SnSR
INITR_BLACKTAB	TFT/src/utility/Adafruit_ST7735.h	35;"	d
INITR_GREENTAB	Robot_Control/src/Arduino_LCD.h	32;"	d
INITR_GREENTAB	TFT/src/utility/Adafruit_ST7735.h	33;"	d
INITR_REDTAB	Robot_Control/src/Arduino_LCD.h	33;"	d
INITR_REDTAB	TFT/src/utility/Adafruit_ST7735.h	34;"	d
INPUT	arduino/Arduino.h	43;"	d
INPUT_PULLUP	arduino/Arduino.h	45;"	d
INTENCLR_BIT_FOR_TIMER_1	Servo/src/samd/ServoTimers.h	44;"	d
INTENCLR_BIT_FOR_TIMER_2	Servo/src/samd/ServoTimers.h	55;"	d
INTENSET_BIT_FOR_TIMER_1	Servo/src/samd/ServoTimers.h	43;"	d
INTENSET_BIT_FOR_TIMER_2	Servo/src/samd/ServoTimers.h	54;"	d
INTERFACE_COUNT	arduino/USBDesc.h	39;"	d
INTERNAL	arduino/Arduino.h	68;"	d
INTERNAL	arduino/Arduino.h	73;"	d
INTERNAL	arduino/Arduino.h	81;"	d
INTERNAL1V1	arduino/Arduino.h	67;"	d
INTERNAL1V1	arduino/Arduino.h	72;"	d
INTERNAL1V1	arduino/Arduino.h	78;"	d
INTERNAL2V56	arduino/Arduino.h	74;"	d
INTERNAL2V56	arduino/Arduino.h	79;"	d
INTERNAL2V56_EXTCAP	arduino/Arduino.h	75;"	d
INTFLAG_BIT_FOR_TIMER_1	Servo/src/samd/ServoTimers.h	45;"	d
INVALID_RESPONSE	Ethernet/src/Dns.cpp	49;"	d	file:
INVALID_SERVER	Ethernet/src/Dns.cpp	47;"	d	file:
INVALID_SERVO	Servo/src/Servo.h	82;"	d
IP	Ethernet/src/utility/w5100.h	/^  static const uint8_t IP   = 0;$/;"	m	class:IPPROTO
IPAddress	arduino/IPAddress.cpp	/^IPAddress::IPAddress()$/;"	f	class:IPAddress
IPAddress	arduino/IPAddress.cpp	/^IPAddress::IPAddress(const uint8_t *address)$/;"	f	class:IPAddress
IPAddress	arduino/IPAddress.cpp	/^IPAddress::IPAddress(uint32_t address)$/;"	f	class:IPAddress
IPAddress	arduino/IPAddress.cpp	/^IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)$/;"	f	class:IPAddress
IPAddress	arduino/IPAddress.h	/^class IPAddress : public Printable {$/;"	c
IPAddress_h	arduino/IPAddress.h	21;"	d
IPPROTO	Ethernet/src/utility/w5100.h	/^class IPPROTO {$/;"	c
IPRAW	Ethernet/src/utility/w5100.h	/^  static const uint8_t IPRAW       = 0x32;$/;"	m	class:SnSR
IPRAW	Ethernet/src/utility/w5100.h	/^  static const uint8_t IPRAW  = 0x03;$/;"	m	class:SnMR
IPRODUCT	arduino/USBDesc.h	45;"	d
IRQn_FOR_TIMER1	Servo/src/sam/ServoTimers.h	55;"	d
IRQn_FOR_TIMER1	Servo/src/samd/ServoTimers.h	47;"	d
IRQn_FOR_TIMER2	Servo/src/sam/ServoTimers.h	62;"	d
IRQn_FOR_TIMER2	Servo/src/samd/ServoTimers.h	57;"	d
IRQn_FOR_TIMER3	Servo/src/sam/ServoTimers.h	69;"	d
IRQn_FOR_TIMER4	Servo/src/sam/ServoTimers.h	76;"	d
IRQn_FOR_TIMER5	Servo/src/sam/ServoTimers.h	83;"	d
IRREMOTETOOLS_H	Robot_IR_Remote/src/IRremoteTools.h	2;"	d
IR_USE_TIMER1	Robot_IR_Remote/src/IRremoteInt.h	41;"	d
IR_USE_TIMER1	Robot_IR_Remote/src/IRremoteInt.h	62;"	d
IR_USE_TIMER2	Robot_IR_Remote/src/IRremoteInt.h	34;"	d
IR_USE_TIMER2	Robot_IR_Remote/src/IRremoteInt.h	52;"	d
IR_USE_TIMER2	Robot_IR_Remote/src/IRremoteInt.h	58;"	d
IR_USE_TIMER2	Robot_IR_Remote/src/IRremoteInt.h	67;"	d
IR_USE_TIMER4_HS	Robot_IR_Remote/src/IRremoteInt.h	47;"	d
IRarray	Robot_Control/src/ArduinoRobot.h	/^		uint16_t IRarray[5];$/;"	m	class:RobotControl
IRread	Robot_Motor/src/ArduinoRobotMotorBoard.cpp	/^int RobotMotorBoard::IRread(uint8_t num){$/;"	f	class:RobotMotorBoard
IRrecived	Robot_IR_Remote/src/IRremoteTools.cpp	/^bool IRrecived(){$/;"	f
IRrecv	Robot_IR_Remote/src/IRremote.cpp	/^IRrecv::IRrecv(int recvpin)$/;"	f	class:IRrecv
IRrecv	Robot_IR_Remote/src/IRremote.h	/^class IRrecv$/;"	c
IRremote_h	Robot_IR_Remote/src/IRremote.h	16;"	d
IRremoteint_h	Robot_IR_Remote/src/IRremoteInt.h	17;"	d
IRs	Robot_Motor/src/ArduinoRobotMotorBoard.h	/^		Multiplexer IRs;$/;"	m	class:RobotMotorBoard
ISERIAL	arduino/USBDesc.h	46;"	d
ISERIAL_MAX_LEN	arduino/USBDesc.h	27;"	d
ISR	GSM/src/GSM3SoftSerial.cpp	/^ISR(PCINT0_vect)$/;"	f
ISR	GSM/src/GSM3SoftSerial.cpp	/^ISR(PCINT1_vect)$/;"	f
ISR	GSM/src/GSM3SoftSerial.cpp	/^ISR(PCINT2_vect)$/;"	f
ISR	GSM/src/GSM3SoftSerial.cpp	/^ISR(PCINT3_vect)$/;"	f
ISR	Robot_IR_Remote/src/IRremote.cpp	/^ISR(TIMER_INTR_NAME)$/;"	f
ISR	SoftwareSerial/src/SoftwareSerial.cpp	/^ISR(PCINT0_vect)$/;"	f
ISR	Wire/src/utility/twi.c	/^ISR(TWI_vect)$/;"	f
ISR	arduino/HardwareSerial0.cpp	/^  ISR(USART_RX_vect)$/;"	f
ISR	arduino/HardwareSerial0.cpp	/^ISR(UART0_UDRE_vect)$/;"	f
ISR	arduino/HardwareSerial1.cpp	/^ISR(UART1_RX_vect)$/;"	f
ISR	arduino/HardwareSerial1.cpp	/^ISR(UART1_UDRE_vect)$/;"	f
ISR	arduino/HardwareSerial2.cpp	/^ISR(USART2_RX_vect)$/;"	f
ISR	arduino/HardwareSerial2.cpp	/^ISR(USART2_UDRE_vect)$/;"	f
ISR	arduino/HardwareSerial3.cpp	/^ISR(USART3_RX_vect)$/;"	f
ISR	arduino/HardwareSerial3.cpp	/^ISR(USART3_UDRE_vect)$/;"	f
ISR	arduino/Tone.cpp	/^ISR(TIMER0_COMPA_vect)$/;"	f
ISR	arduino/Tone.cpp	/^ISR(TIMER1_COMPA_vect)$/;"	f
ISR	arduino/Tone.cpp	/^ISR(TIMER2_COMPA_vect)$/;"	f
ISR	arduino/Tone.cpp	/^ISR(TIMER3_COMPA_vect)$/;"	f
ISR	arduino/Tone.cpp	/^ISR(TIMER4_COMPA_vect)$/;"	f
ISR	arduino/Tone.cpp	/^ISR(TIMER5_COMPA_vect)$/;"	f
ISR	arduino/USBCore.cpp	/^ISR(USB_COM_vect)$/;"	f
ISR	arduino/USBCore.cpp	/^ISR(USB_GEN_vect)$/;"	f
ISR	arduino/wiring.c	/^ISR(TIM0_OVF_vect)$/;"	f
IS_IGNORE_BLE_PINS	Firmata/examples/StandardFirmataBLE/bleConfig.h	111;"	d
IS_IGNORE_PIN	Firmata/examples/StandardFirmataEthernet/ethernetConfig.h	88;"	d
IS_IGNORE_PIN	Firmata/examples/StandardFirmataWiFi/wifiConfig.h	226;"	d
IS_IGNORE_PIN	Firmata/examples/StandardFirmataWiFi/wifiConfig.h	231;"	d
IS_IGNORE_PIN	Firmata/examples/StandardFirmataWiFi/wifiConfig.h	235;"	d
IS_IGNORE_PIN	Firmata/examples/StandardFirmataWiFi/wifiConfig.h	238;"	d
IS_PIN_ANALOG	Firmata/Boards.h	155;"	d
IS_PIN_ANALOG	Firmata/Boards.h	171;"	d
IS_PIN_ANALOG	Firmata/Boards.h	188;"	d
IS_PIN_ANALOG	Firmata/Boards.h	211;"	d
IS_PIN_ANALOG	Firmata/Boards.h	235;"	d
IS_PIN_ANALOG	Firmata/Boards.h	251;"	d
IS_PIN_ANALOG	Firmata/Boards.h	274;"	d
IS_PIN_ANALOG	Firmata/Boards.h	294;"	d
IS_PIN_ANALOG	Firmata/Boards.h	314;"	d
IS_PIN_ANALOG	Firmata/Boards.h	334;"	d
IS_PIN_ANALOG	Firmata/Boards.h	364;"	d
IS_PIN_ANALOG	Firmata/Boards.h	388;"	d
IS_PIN_ANALOG	Firmata/Boards.h	411;"	d
IS_PIN_ANALOG	Firmata/Boards.h	430;"	d
IS_PIN_ANALOG	Firmata/Boards.h	450;"	d
IS_PIN_ANALOG	Firmata/Boards.h	470;"	d
IS_PIN_ANALOG	Firmata/Boards.h	487;"	d
IS_PIN_ANALOG	Firmata/Boards.h	504;"	d
IS_PIN_ANALOG	Firmata/Boards.h	520;"	d
IS_PIN_ANALOG	Firmata/Boards.h	537;"	d
IS_PIN_ANALOG	Firmata/Boards.h	556;"	d
IS_PIN_ANALOG	Firmata/Boards.h	574;"	d
IS_PIN_ANALOG	Firmata/Boards.h	592;"	d
IS_PIN_ANALOG	Firmata/Boards.h	610;"	d
IS_PIN_ANALOG	Firmata/Boards.h	628;"	d
IS_PIN_ANALOG	Firmata/Boards.h	646;"	d
IS_PIN_ANALOG	Firmata/Boards.h	664;"	d
IS_PIN_ANALOG	Firmata/Boards.h	682;"	d
IS_PIN_ANALOG	Firmata/Boards.h	703;"	d
IS_PIN_ANALOG	Firmata/Boards.h	722;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	154;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	170;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	187;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	210;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	234;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	250;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	273;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	293;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	313;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	333;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	363;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	387;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	410;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	429;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	449;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	469;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	486;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	503;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	519;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	536;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	555;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	573;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	591;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	609;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	627;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	645;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	663;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	681;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	702;"	d
IS_PIN_DIGITAL	Firmata/Boards.h	721;"	d
IS_PIN_I2C	Firmata/Boards.h	158;"	d
IS_PIN_I2C	Firmata/Boards.h	174;"	d
IS_PIN_I2C	Firmata/Boards.h	191;"	d
IS_PIN_I2C	Firmata/Boards.h	214;"	d
IS_PIN_I2C	Firmata/Boards.h	238;"	d
IS_PIN_I2C	Firmata/Boards.h	254;"	d
IS_PIN_I2C	Firmata/Boards.h	277;"	d
IS_PIN_I2C	Firmata/Boards.h	297;"	d
IS_PIN_I2C	Firmata/Boards.h	317;"	d
IS_PIN_I2C	Firmata/Boards.h	337;"	d
IS_PIN_I2C	Firmata/Boards.h	367;"	d
IS_PIN_I2C	Firmata/Boards.h	391;"	d
IS_PIN_I2C	Firmata/Boards.h	414;"	d
IS_PIN_I2C	Firmata/Boards.h	433;"	d
IS_PIN_I2C	Firmata/Boards.h	453;"	d
IS_PIN_I2C	Firmata/Boards.h	473;"	d
IS_PIN_I2C	Firmata/Boards.h	490;"	d
IS_PIN_I2C	Firmata/Boards.h	507;"	d
IS_PIN_I2C	Firmata/Boards.h	523;"	d
IS_PIN_I2C	Firmata/Boards.h	540;"	d
IS_PIN_I2C	Firmata/Boards.h	559;"	d
IS_PIN_I2C	Firmata/Boards.h	577;"	d
IS_PIN_I2C	Firmata/Boards.h	595;"	d
IS_PIN_I2C	Firmata/Boards.h	613;"	d
IS_PIN_I2C	Firmata/Boards.h	631;"	d
IS_PIN_I2C	Firmata/Boards.h	649;"	d
IS_PIN_I2C	Firmata/Boards.h	667;"	d
IS_PIN_I2C	Firmata/Boards.h	685;"	d
IS_PIN_I2C	Firmata/Boards.h	706;"	d
IS_PIN_I2C	Firmata/Boards.h	725;"	d
IS_PIN_INTERRUPT	Firmata/Boards.h	727;"	d
IS_PIN_PWM	Firmata/Boards.h	156;"	d
IS_PIN_PWM	Firmata/Boards.h	172;"	d
IS_PIN_PWM	Firmata/Boards.h	189;"	d
IS_PIN_PWM	Firmata/Boards.h	212;"	d
IS_PIN_PWM	Firmata/Boards.h	236;"	d
IS_PIN_PWM	Firmata/Boards.h	252;"	d
IS_PIN_PWM	Firmata/Boards.h	275;"	d
IS_PIN_PWM	Firmata/Boards.h	295;"	d
IS_PIN_PWM	Firmata/Boards.h	315;"	d
IS_PIN_PWM	Firmata/Boards.h	335;"	d
IS_PIN_PWM	Firmata/Boards.h	365;"	d
IS_PIN_PWM	Firmata/Boards.h	389;"	d
IS_PIN_PWM	Firmata/Boards.h	412;"	d
IS_PIN_PWM	Firmata/Boards.h	431;"	d
IS_PIN_PWM	Firmata/Boards.h	451;"	d
IS_PIN_PWM	Firmata/Boards.h	471;"	d
IS_PIN_PWM	Firmata/Boards.h	488;"	d
IS_PIN_PWM	Firmata/Boards.h	505;"	d
IS_PIN_PWM	Firmata/Boards.h	521;"	d
IS_PIN_PWM	Firmata/Boards.h	538;"	d
IS_PIN_PWM	Firmata/Boards.h	557;"	d
IS_PIN_PWM	Firmata/Boards.h	575;"	d
IS_PIN_PWM	Firmata/Boards.h	593;"	d
IS_PIN_PWM	Firmata/Boards.h	611;"	d
IS_PIN_PWM	Firmata/Boards.h	629;"	d
IS_PIN_PWM	Firmata/Boards.h	647;"	d
IS_PIN_PWM	Firmata/Boards.h	665;"	d
IS_PIN_PWM	Firmata/Boards.h	683;"	d
IS_PIN_PWM	Firmata/Boards.h	704;"	d
IS_PIN_PWM	Firmata/Boards.h	723;"	d
IS_PIN_SERIAL	Firmata/Boards.h	216;"	d
IS_PIN_SERIAL	Firmata/Boards.h	239;"	d
IS_PIN_SERIAL	Firmata/Boards.h	256;"	d
IS_PIN_SERIAL	Firmata/Boards.h	279;"	d
IS_PIN_SERIAL	Firmata/Boards.h	299;"	d
IS_PIN_SERIAL	Firmata/Boards.h	319;"	d
IS_PIN_SERIAL	Firmata/Boards.h	339;"	d
IS_PIN_SERIAL	Firmata/Boards.h	368;"	d
IS_PIN_SERIAL	Firmata/Boards.h	392;"	d
IS_PIN_SERIAL	Firmata/Boards.h	415;"	d
IS_PIN_SERIAL	Firmata/Boards.h	435;"	d
IS_PIN_SERIAL	Firmata/Boards.h	455;"	d
IS_PIN_SERIAL	Firmata/Boards.h	475;"	d
IS_PIN_SERIAL	Firmata/Boards.h	708;"	d
IS_PIN_SERIAL	Firmata/Boards.h	728;"	d
IS_PIN_SERIAL	Firmata/Boards.h	747;"	d
IS_PIN_SERVO	Firmata/Boards.h	157;"	d
IS_PIN_SERVO	Firmata/Boards.h	173;"	d
IS_PIN_SERVO	Firmata/Boards.h	190;"	d
IS_PIN_SERVO	Firmata/Boards.h	213;"	d
IS_PIN_SERVO	Firmata/Boards.h	237;"	d
IS_PIN_SERVO	Firmata/Boards.h	253;"	d
IS_PIN_SERVO	Firmata/Boards.h	276;"	d
IS_PIN_SERVO	Firmata/Boards.h	296;"	d
IS_PIN_SERVO	Firmata/Boards.h	316;"	d
IS_PIN_SERVO	Firmata/Boards.h	336;"	d
IS_PIN_SERVO	Firmata/Boards.h	366;"	d
IS_PIN_SERVO	Firmata/Boards.h	390;"	d
IS_PIN_SERVO	Firmata/Boards.h	413;"	d
IS_PIN_SERVO	Firmata/Boards.h	432;"	d
IS_PIN_SERVO	Firmata/Boards.h	452;"	d
IS_PIN_SERVO	Firmata/Boards.h	472;"	d
IS_PIN_SERVO	Firmata/Boards.h	489;"	d
IS_PIN_SERVO	Firmata/Boards.h	506;"	d
IS_PIN_SERVO	Firmata/Boards.h	522;"	d
IS_PIN_SERVO	Firmata/Boards.h	539;"	d
IS_PIN_SERVO	Firmata/Boards.h	558;"	d
IS_PIN_SERVO	Firmata/Boards.h	576;"	d
IS_PIN_SERVO	Firmata/Boards.h	594;"	d
IS_PIN_SERVO	Firmata/Boards.h	612;"	d
IS_PIN_SERVO	Firmata/Boards.h	630;"	d
IS_PIN_SERVO	Firmata/Boards.h	648;"	d
IS_PIN_SERVO	Firmata/Boards.h	666;"	d
IS_PIN_SERVO	Firmata/Boards.h	684;"	d
IS_PIN_SERVO	Firmata/Boards.h	705;"	d
IS_PIN_SERVO	Firmata/Boards.h	724;"	d
IS_PIN_SPI	Firmata/Boards.h	159;"	d
IS_PIN_SPI	Firmata/Boards.h	175;"	d
IS_PIN_SPI	Firmata/Boards.h	215;"	d
IS_PIN_SPI	Firmata/Boards.h	255;"	d
IS_PIN_SPI	Firmata/Boards.h	278;"	d
IS_PIN_SPI	Firmata/Boards.h	298;"	d
IS_PIN_SPI	Firmata/Boards.h	318;"	d
IS_PIN_SPI	Firmata/Boards.h	338;"	d
IS_PIN_SPI	Firmata/Boards.h	434;"	d
IS_PIN_SPI	Firmata/Boards.h	454;"	d
IS_PIN_SPI	Firmata/Boards.h	474;"	d
IS_PIN_SPI	Firmata/Boards.h	491;"	d
IS_PIN_SPI	Firmata/Boards.h	541;"	d
IS_PIN_SPI	Firmata/Boards.h	560;"	d
IS_PIN_SPI	Firmata/Boards.h	578;"	d
IS_PIN_SPI	Firmata/Boards.h	596;"	d
IS_PIN_SPI	Firmata/Boards.h	614;"	d
IS_PIN_SPI	Firmata/Boards.h	632;"	d
IS_PIN_SPI	Firmata/Boards.h	650;"	d
IS_PIN_SPI	Firmata/Boards.h	668;"	d
IS_PIN_SPI	Firmata/Boards.h	686;"	d
IS_PIN_SPI	Firmata/Boards.h	707;"	d
IS_PIN_SPI	Firmata/Boards.h	726;"	d
IS_PIN_SPI	Firmata/Boards.h	743;"	d
InitControl	arduino/USBCore.cpp	/^void InitControl(int end)$/;"	f
InitEP	arduino/USBCore.cpp	/^void InitEP(u8 index, u8 type, u8 size)$/;"	f	file:
InitEndpoints	arduino/USBCore.cpp	/^void InitEndpoints()$/;"	f	file:
InterfaceDescriptor	arduino/USBCore.h	/^} InterfaceDescriptor;$/;"	t	typeref:struct:__anon17
JVC	Robot_IR_Remote/src/IRremote.h	45;"	d
JVC_BITS	Robot_IR_Remote/src/IRremoteInt.h	208;"	d
JVC_BIT_MARK	Robot_IR_Remote/src/IRremoteInt.h	157;"	d
JVC_HDR_MARK	Robot_IR_Remote/src/IRremoteInt.h	155;"	d
JVC_HDR_SPACE	Robot_IR_Remote/src/IRremoteInt.h	156;"	d
JVC_ONE_SPACE	Robot_IR_Remote/src/IRremoteInt.h	158;"	d
JVC_RPT_LENGTH	Robot_IR_Remote/src/IRremoteInt.h	160;"	d
JVC_ZERO_SPACE	Robot_IR_Remote/src/IRremoteInt.h	159;"	d
KD	Robot_Motor/src/LineFollow.h	/^		uint8_t KD;$/;"	m	class:LineFollow
KP	Robot_Motor/src/LineFollow.h	/^		uint8_t KP;$/;"	m	class:LineFollow
LABEL_COMPRESSION_MASK	Ethernet/src/Dns.cpp	40;"	d	file:
LAST_ACK	Ethernet/src/utility/w5100.h	/^  static const uint8_t LAST_ACK    = 0x1D;$/;"	m	class:SnSR
LCD_1LINE	LiquidCrystal/src/LiquidCrystal.h	41;"	d
LCD_2LINE	LiquidCrystal/src/LiquidCrystal.h	40;"	d
LCD_4BITMODE	LiquidCrystal/src/LiquidCrystal.h	39;"	d
LCD_5x10DOTS	LiquidCrystal/src/LiquidCrystal.h	42;"	d
LCD_5x8DOTS	LiquidCrystal/src/LiquidCrystal.h	43;"	d
LCD_8BITMODE	LiquidCrystal/src/LiquidCrystal.h	38;"	d
LCD_BLINKOFF	LiquidCrystal/src/LiquidCrystal.h	29;"	d
LCD_BLINKON	LiquidCrystal/src/LiquidCrystal.h	28;"	d
LCD_CLEARDISPLAY	LiquidCrystal/src/LiquidCrystal.h	8;"	d
LCD_CURSORMOVE	LiquidCrystal/src/LiquidCrystal.h	33;"	d
LCD_CURSOROFF	LiquidCrystal/src/LiquidCrystal.h	27;"	d
LCD_CURSORON	LiquidCrystal/src/LiquidCrystal.h	26;"	d
LCD_CURSORSHIFT	LiquidCrystal/src/LiquidCrystal.h	12;"	d
LCD_DISPLAYCONTROL	LiquidCrystal/src/LiquidCrystal.h	11;"	d
LCD_DISPLAYMOVE	LiquidCrystal/src/LiquidCrystal.h	32;"	d
LCD_DISPLAYOFF	LiquidCrystal/src/LiquidCrystal.h	25;"	d
LCD_DISPLAYON	LiquidCrystal/src/LiquidCrystal.h	24;"	d
LCD_ENTRYLEFT	LiquidCrystal/src/LiquidCrystal.h	19;"	d
LCD_ENTRYMODESET	LiquidCrystal/src/LiquidCrystal.h	10;"	d
LCD_ENTRYRIGHT	LiquidCrystal/src/LiquidCrystal.h	18;"	d
LCD_ENTRYSHIFTDECREMENT	LiquidCrystal/src/LiquidCrystal.h	21;"	d
LCD_ENTRYSHIFTINCREMENT	LiquidCrystal/src/LiquidCrystal.h	20;"	d
LCD_FUNCTIONSET	LiquidCrystal/src/LiquidCrystal.h	13;"	d
LCD_MOVELEFT	LiquidCrystal/src/LiquidCrystal.h	35;"	d
LCD_MOVERIGHT	LiquidCrystal/src/LiquidCrystal.h	34;"	d
LCD_RETURNHOME	LiquidCrystal/src/LiquidCrystal.h	9;"	d
LCD_SETCGRAMADDR	LiquidCrystal/src/LiquidCrystal.h	14;"	d
LCD_SETDDRAMADDR	LiquidCrystal/src/LiquidCrystal.h	15;"	d
LED1	Robot_Control/src/ArduinoRobot.h	134;"	d
LIGHT_BMP	Robot_Control/src/ArduinoRobot.h	57;"	d
LINE_FOLLOW_H	Robot_Motor/src/LineFollow.h	2;"	d
LISTEN	Ethernet/src/utility/w5100.h	/^  static const uint8_t LISTEN      = 0x14;$/;"	m	class:SnSR
LO4	Robot_Control/src/Squawk.cpp	13;"	d	file:
LOW	arduino/Arduino.h	41;"	d
LSBFIRST	SPI/src/SPI.h	40;"	d
LSBFIRST	arduino/Arduino.h	57;"	d
LS_DATE	Robot_Control/src/Fat16.h	/^uint8_t const LS_DATE = 1;$/;"	v
LS_DATE	SD/src/utility/SdFat.h	/^uint8_t const LS_DATE = 1;$/;"	v
LS_R	SD/src/utility/SdFat.h	/^uint8_t const LS_R = 4;$/;"	v
LS_SIZE	Robot_Control/src/Fat16.h	/^uint8_t const LS_SIZE = 2;$/;"	v
LS_SIZE	SD/src/utility/SdFat.h	/^uint8_t const LS_SIZE = 2;$/;"	v
LTOL	Robot_IR_Remote/src/IRremoteInt.h	166;"	d
LineFollow	Robot_Motor/src/LineFollow.h	/^class LineFollow{$/;"	c
LineFollow	Robot_Motor/src/lineFollow.cpp	/^LineFollow::LineFollow(){$/;"	f	class:LineFollow
LineInfo	arduino/CDC.cpp	/^} LineInfo;$/;"	t	typeref:struct:__anon13	file:
LiquidCrystal	LiquidCrystal/src/LiquidCrystal.cpp	/^LiquidCrystal::LiquidCrystal(uint8_t rs,  uint8_t enable,$/;"	f	class:LiquidCrystal
LiquidCrystal	LiquidCrystal/src/LiquidCrystal.cpp	/^LiquidCrystal::LiquidCrystal(uint8_t rs, uint8_t enable,$/;"	f	class:LiquidCrystal
LiquidCrystal	LiquidCrystal/src/LiquidCrystal.cpp	/^LiquidCrystal::LiquidCrystal(uint8_t rs, uint8_t rw, uint8_t enable,$/;"	f	class:LiquidCrystal
LiquidCrystal	LiquidCrystal/src/LiquidCrystal.h	/^class LiquidCrystal : public Print {$/;"	c
LiquidCrystal_h	LiquidCrystal/src/LiquidCrystal.h	2;"	d
LockEP	arduino/USBCore.cpp	/^	LockEP(u8 ep) : _sreg(SREG)$/;"	f	class:LockEP
LockEP	arduino/USBCore.cpp	/^class LockEP$/;"	c	file:
LookaheadMode	arduino/Stream.h	/^enum LookaheadMode{$/;"	g
M0	Robot_Control/src/ArduinoRobot.h	106;"	d
M1	Robot_Control/src/ArduinoRobot.h	107;"	d
M2	Robot_Control/src/ArduinoRobot.h	108;"	d
M3	Robot_Control/src/ArduinoRobot.h	109;"	d
M4	Robot_Control/src/ArduinoRobot.h	110;"	d
M5	Robot_Control/src/ArduinoRobot.h	111;"	d
M6	Robot_Control/src/ArduinoRobot.h	112;"	d
M7	Robot_Control/src/ArduinoRobot.h	113;"	d
MACRAW	Ethernet/src/utility/w5100.h	/^  static const uint8_t MACRAW      = 0x42;$/;"	m	class:SnSR
MACRAW	Ethernet/src/utility/w5100.h	/^  static const uint8_t MACRAW = 0x04;$/;"	m	class:SnMR
MADCTL_MH	Robot_Control/src/Arduino_LCD.cpp	570;"	d	file:
MADCTL_MH	TFT/src/utility/Adafruit_ST7735.cpp	606;"	d	file:
MADCTL_ML	Robot_Control/src/Arduino_LCD.cpp	568;"	d	file:
MADCTL_ML	TFT/src/utility/Adafruit_ST7735.cpp	604;"	d	file:
MADCTL_MV	Robot_Control/src/Arduino_LCD.cpp	567;"	d	file:
MADCTL_MV	TFT/src/utility/Adafruit_ST7735.cpp	603;"	d	file:
MADCTL_MX	Robot_Control/src/Arduino_LCD.cpp	566;"	d	file:
MADCTL_MX	TFT/src/utility/Adafruit_ST7735.cpp	602;"	d	file:
MADCTL_MY	Robot_Control/src/Arduino_LCD.cpp	565;"	d	file:
MADCTL_MY	TFT/src/utility/Adafruit_ST7735.cpp	601;"	d	file:
MADCTL_RGB	Robot_Control/src/Arduino_LCD.cpp	569;"	d	file:
MADCTL_RGB	TFT/src/utility/Adafruit_ST7735.cpp	605;"	d	file:
MAGENTA	Robot_Control/src/ArduinoRobot.h	153;"	d
MAGIC_COOKIE	Ethernet/src/Dhcp.h	44;"	d
MAGIC_KEY	arduino/USBCore.h	291;"	d
MAGIC_KEY_POS	arduino/USBCore.h	295;"	d
MARK	Robot_IR_Remote/src/IRremoteInt.h	196;"	d
MARK_EXCESS	Robot_IR_Remote/src/IRremote.h	92;"	d
MARK_PARITY	arduino/USBAPI.h	/^		MARK_PARITY = 3,$/;"	e	enum:Serial_::__anon11
MATCH	Robot_IR_Remote/src/IRremote.cpp	/^int MATCH(int measured, int desired) {$/;"	f
MATCH	Robot_IR_Remote/src/IRremote.cpp	/^int MATCH(int measured, int desired) {return measured >= TICKS_LOW(desired) && measured <= TICKS_HIGH(desired);}$/;"	f
MATCH_MARK	Robot_IR_Remote/src/IRremote.cpp	/^int MATCH_MARK(int measured_ticks, int desired_us) {$/;"	f
MATCH_MARK	Robot_IR_Remote/src/IRremote.cpp	/^int MATCH_MARK(int measured_ticks, int desired_us) {return MATCH(measured_ticks, (desired_us + MARK_EXCESS));}$/;"	f
MATCH_SPACE	Robot_IR_Remote/src/IRremote.cpp	/^int MATCH_SPACE(int measured_ticks, int desired_us) {$/;"	f
MATCH_SPACE	Robot_IR_Remote/src/IRremote.cpp	/^int MATCH_SPACE(int measured_ticks, int desired_us) {return MATCH(measured_ticks, (desired_us - MARK_EXCESS));}$/;"	f
MAX	Robot_Control/src/Squawk.cpp	16;"	d	file:
MAX_COMPONENT_LEN	SD/src/SD.cpp	58;"	d	file:
MAX_DATA_BYTES	Firmata/Firmata.h	42;"	d
MAX_DHCP_OPT	Ethernet/src/Dhcp.h	45;"	d
MAX_PULSE_WIDTH	Servo/src/Servo.h	75;"	d
MAX_SERIAL_PORTS	Firmata/utility/SerialFirmata.h	49;"	d
MAX_SERVOS	Firmata/Boards.h	32;"	d
MAX_SERVOS	Firmata/Boards.h	534;"	d
MAX_SERVOS	Firmata/Boards.h	553;"	d
MAX_SERVOS	Firmata/Boards.h	571;"	d
MAX_SERVOS	Firmata/Boards.h	589;"	d
MAX_SERVOS	Firmata/Boards.h	607;"	d
MAX_SERVOS	Firmata/Boards.h	625;"	d
MAX_SERVOS	Firmata/Boards.h	643;"	d
MAX_SERVOS	Firmata/Boards.h	661;"	d
MAX_SERVOS	Firmata/Boards.h	679;"	d
MAX_SERVOS	Servo/src/Servo.h	80;"	d
MAX_SOCK_NUM	Ethernet/src/Ethernet.h	11;"	d
MAX_SOCK_NUM	Ethernet/src/utility/w5100.h	17;"	d
MEGA_SOFT_SPI	SD/src/utility/Sd2Card.h	47;"	d
MICROSECONDS_PER_TIMER0_OVERFLOW	arduino/wiring.c	27;"	d	file:
MILLIS_INC	arduino/wiring.c	30;"	d	file:
MILLIS_RECONNECT	Firmata/utility/EthernetClientStream.h	29;"	d
MILLIS_RECONNECT	Firmata/utility/WiFiClientStream.h	31;"	d
MIN	Robot_Control/src/Squawk.cpp	15;"	d	file:
MIN_PULSE_WIDTH	Servo/src/Servo.h	74;"	d
MIN_RC5_SAMPLES	Robot_IR_Remote/src/IRremoteInt.h	205;"	d
MIN_RC6_SAMPLES	Robot_IR_Remote/src/IRremoteInt.h	206;"	d
MISO_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const MISO_PIN = 12;$/;"	v
MISO_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const MISO_PIN = 14;$/;"	v
MISO_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const MISO_PIN = 23;$/;"	v
MISO_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const MISO_PIN = 50;$/;"	v
MISO_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const MISO_PIN = 6;$/;"	v
MISO_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const MISO_PIN = MISO;$/;"	v
MITSUBISHI	Robot_IR_Remote/src/IRremote.h	47;"	d
MITSUBISHI_BITS	Robot_IR_Remote/src/IRremoteInt.h	204;"	d
MITSUBISHI_HDR_SPACE	Robot_IR_Remote/src/IRremoteInt.h	119;"	d
MITSUBISHI_ONE_MARK	Robot_IR_Remote/src/IRremoteInt.h	120;"	d
MITSUBISHI_ZERO_MARK	Robot_IR_Remote/src/IRremoteInt.h	121;"	d
MODEMCONFIG	GSM/src/GSM3ShieldV1BaseProvider.h	/^enum GSM3_commandType_e { XON, NONE, MODEMCONFIG, ALIVETEST, BEGINSMS, ENDSMS, AVAILABLESMS, FLUSHSMS,$/;"	e	enum:GSM3_commandType_e
MODE_ADJUST_MOTOR	Robot_Control/src/ArduinoRobot.h	88;"	d
MODE_ADJUST_MOTOR	Robot_Motor/src/ArduinoRobotMotorBoard.h	42;"	d
MODE_IR_CONTROL	Robot_Control/src/ArduinoRobot.h	89;"	d
MODE_IR_CONTROL	Robot_Motor/src/ArduinoRobotMotorBoard.h	43;"	d
MODE_LINE_FOLLOW	Robot_Control/src/ArduinoRobot.h	87;"	d
MODE_LINE_FOLLOW	Robot_Motor/src/ArduinoRobotMotorBoard.h	41;"	d
MODE_SIMPLE	Robot_Control/src/ArduinoRobot.h	86;"	d
MODE_SIMPLE	Robot_Motor/src/ArduinoRobotMotorBoard.h	40;"	d
MOSI_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const MOSI_PIN = 11;$/;"	v
MOSI_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const MOSI_PIN = 16;$/;"	v
MOSI_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const MOSI_PIN = 22;$/;"	v
MOSI_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const MOSI_PIN = 51;$/;"	v
MOSI_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const MOSI_PIN = 5;$/;"	v
MOSI_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const MOSI_PIN = MOSI;$/;"	v
MOTOR_BOARD_DATA	Robot_Control/src/ArduinoRobot.h	/^struct MOTOR_BOARD_DATA{$/;"	s
MSBFIRST	SPI/src/SPI.h	43;"	d
MSBFIRST	arduino/Arduino.h	58;"	d
MSCDescriptor	arduino/USBCore.h	/^} MSCDescriptor;$/;"	t	typeref:struct:__anon25
MSC_GET_MAX_LUN	arduino/USBCore.h	64;"	d
MSC_PROTOCOL_BULK_ONLY	arduino/USBCore.h	127;"	d
MSC_RESET	arduino/USBCore.h	63;"	d
MSC_SUBCLASS_SCSI	arduino/USBCore.h	126;"	d
MULTI	Ethernet/src/utility/w5100.h	/^  static const uint8_t MULTI  = 0x80;$/;"	m	class:SnMR
MULTIPLE_WIFI_LIB_INCLUDES	Firmata/examples/StandardFirmataWiFi/wifiConfig.h	63;"	d
MULTIPLE_WIFI_LIB_INCLUDES	Firmata/examples/StandardFirmataWiFi/wifiConfig.h	91;"	d
Melody	Robot_Control/src/Squawk.h	12;"	d
ModemConfiguration	GSM/src/GSM3ShieldV1AccessProvider.cpp	/^int GSM3ShieldV1AccessProvider::ModemConfiguration(char* pin)$/;"	f	class:GSM3ShieldV1AccessProvider
ModemConfigurationContinue	GSM/src/GSM3ShieldV1AccessProvider.cpp	/^void GSM3ShieldV1AccessProvider::ModemConfigurationContinue()$/;"	f	class:GSM3ShieldV1AccessProvider
MultiTarget	arduino/Stream.h	/^  struct MultiTarget {$/;"	s	class:Stream
Multiplexer	Robot_Control/src/Multiplexer.h	/^class Multiplexer{$/;"	c
Multiplexer	Robot_Motor/src/Multiplexer.h	/^class Multiplexer{$/;"	c
Multiplexer_h	Robot_Control/src/Multiplexer.h	20;"	d
Multiplexer_h	Robot_Motor/src/Multiplexer.h	2;"	d
ND	Ethernet/src/utility/w5100.h	/^  static const uint8_t ND     = 0x20;$/;"	m	class:SnMR
ND	Ethernet/src/utility/w5100.h	/^  static const uint8_t ND   = 77;$/;"	m	class:IPPROTO
NEC	Robot_IR_Remote/src/IRremote.h	38;"	d
NEC_BITS	Robot_IR_Remote/src/IRremoteInt.h	201;"	d
NEC_BIT_MARK	Robot_IR_Remote/src/IRremoteInt.h	95;"	d
NEC_HDR_MARK	Robot_IR_Remote/src/IRremoteInt.h	93;"	d
NEC_HDR_SPACE	Robot_IR_Remote/src/IRremoteInt.h	94;"	d
NEC_ONE_SPACE	Robot_IR_Remote/src/IRremoteInt.h	96;"	d
NEC_RPT_SPACE	Robot_IR_Remote/src/IRremoteInt.h	98;"	d
NEC_ZERO_SPACE	Robot_IR_Remote/src/IRremoteInt.h	97;"	d
NEW_H	arduino/new.h	20;"	d
NEW_LUFA_SIGNATURE	arduino/USBCore.h	299;"	d
NIVEL_PARA_LINEA	Robot_Motor/src/lineFollow.cpp	19;"	d	file:
NOINLINE	Robot_Control/src/Fat16util.h	37;"	d
NOINLINE	SD/src/utility/SdFatUtil.h	35;"	d
NONE	GSM/src/GSM3ShieldV1BaseProvider.h	/^enum GSM3_commandType_e { XON, NONE, MODEMCONFIG, ALIVETEST, BEGINSMS, ENDSMS, AVAILABLESMS, FLUSHSMS,$/;"	e	enum:GSM3_commandType_e
NOT_AN_INTERRUPT	arduino/Arduino.h	188;"	d
NOT_A_PIN	arduino/Arduino.h	185;"	d
NOT_A_PORT	arduino/Arduino.h	186;"	d
NOT_ON_TIMER	arduino/Arduino.h	204;"	d
NO_IGNORE_CHAR	arduino/Stream.h	129;"	d
NO_IGNORE_CHAR	arduino/Stream.h	47;"	d
NO_PARITY	arduino/USBAPI.h	/^		NO_PARITY = 0,$/;"	e	enum:Serial_::__anon11
NUMBEROFBANDS	GSM/src/GSM3ShieldV1BandManagement.h	40;"	d
NUMBER_BUTTONS	Robot_Control/src/ArduinoRobot.h	44;"	d
NUM_EEPROM_BMP	Robot_Control/src/ArduinoRobot.h	192;"	d
OCIE2A	arduino/Tone.cpp	49;"	d	file:
OCR2A	arduino/Tone.cpp	47;"	d	file:
OCT	arduino/Print.h	31;"	d
ODD_PARITY	arduino/USBAPI.h	/^		ODD_PARITY = 1,$/;"	e	enum:Serial_::__anon11
OFF	GSM/src/GSM3MobileAccessProvider.h	/^enum GSM3_NetworkStatus_t { ERROR, IDLE, CONNECTING, GSM_READY, GPRS_READY, TRANSPARENT_CONNECTED, OFF};$/;"	e	enum:GSM3_NetworkStatus_t
ONEWIRE	Firmata/Firmata.h	115;"	d
ONEWIRE_DATA	Firmata/Firmata.h	71;"	d
ONE_AND_HALF_STOP_BIT	arduino/USBAPI.h	/^		ONE_AND_HALF_STOP_BIT = 1,$/;"	e	enum:Serial_::__anon10
ONE_STOP_BIT	arduino/USBAPI.h	/^		ONE_STOP_BIT = 0,$/;"	e	enum:Serial_::__anon10
OPCODE_INVERSE_QUERY	Ethernet/src/Dns.cpp	24;"	d	file:
OPCODE_MASK	Ethernet/src/Dns.cpp	26;"	d	file:
OPCODE_STANDARD_QUERY	Ethernet/src/Dns.cpp	23;"	d	file:
OPCODE_STATUS_REQUEST	Ethernet/src/Dns.cpp	25;"	d	file:
OPTIMIZE_HARDWARE_SPI	SD/src/utility/Sd2Card.h	92;"	d
OSCILLO_BMP	Robot_Control/src/ArduinoRobot.h	58;"	d
OUTPUT	arduino/Arduino.h	44;"	d
O_ACCMODE	Robot_Control/src/Fat16.h	/^uint8_t const O_ACCMODE = O_READ | O_WRITE;$/;"	v
O_ACCMODE	SD/src/utility/SdFat.h	/^uint8_t const O_ACCMODE = (O_READ | O_WRITE);$/;"	v
O_APPEND	Robot_Control/src/Fat16.h	/^uint8_t const O_APPEND  = 0X04;$/;"	v
O_APPEND	SD/src/utility/SdFat.h	/^uint8_t const O_APPEND = 0X04;$/;"	v
O_CREAT	Robot_Control/src/Fat16.h	/^uint8_t const O_CREAT   = 0X10;$/;"	v
O_CREAT	SD/src/utility/SdFat.h	/^uint8_t const O_CREAT = 0X10;$/;"	v
O_EXCL	Robot_Control/src/Fat16.h	/^uint8_t const O_EXCL    = 0X20;$/;"	v
O_EXCL	SD/src/utility/SdFat.h	/^uint8_t const O_EXCL = 0X20;$/;"	v
O_RDONLY	Robot_Control/src/Fat16.h	/^uint8_t const O_RDONLY  = O_READ;$/;"	v
O_RDONLY	SD/src/utility/SdFat.h	/^uint8_t const O_RDONLY = O_READ;$/;"	v
O_RDWR	Robot_Control/src/Fat16.h	/^uint8_t const O_RDWR    = O_READ | O_WRITE;$/;"	v
O_RDWR	SD/src/utility/SdFat.h	/^uint8_t const O_RDWR = (O_READ | O_WRITE);$/;"	v
O_READ	Robot_Control/src/Fat16.h	/^uint8_t const O_READ    = 0X01;$/;"	v
O_READ	SD/src/utility/SdFat.h	/^uint8_t const O_READ = 0X01;$/;"	v
O_SYNC	Robot_Control/src/Fat16.h	/^uint8_t const O_SYNC    = 0X08;$/;"	v
O_SYNC	SD/src/utility/SdFat.h	/^uint8_t const O_SYNC = 0X08;$/;"	v
O_TRUNC	Robot_Control/src/Fat16.h	/^uint8_t const O_TRUNC   = 0X40;$/;"	v
O_TRUNC	SD/src/utility/SdFat.h	/^uint8_t const O_TRUNC = 0X40;$/;"	v
O_WRITE	Robot_Control/src/Fat16.h	/^uint8_t const O_WRITE   = 0X02;$/;"	v
O_WRITE	SD/src/utility/SdFat.h	/^uint8_t const O_WRITE = 0X02;$/;"	v
O_WRONLY	Robot_Control/src/Fat16.h	/^uint8_t const O_WRONLY  = O_WRITE;$/;"	v
O_WRONLY	SD/src/utility/SdFat.h	/^uint8_t const O_WRONLY = O_WRITE;$/;"	v
Oscillator	Robot_Control/src/Squawk.h	/^typedef osc_t Oscillator;$/;"	t
PA	arduino/Arduino.h	191;"	d
PANASONIC	Robot_IR_Remote/src/IRremote.h	44;"	d
PANASONIC_BITS	Robot_IR_Remote/src/IRremoteInt.h	207;"	d
PANASONIC_BIT_MARK	Robot_IR_Remote/src/IRremoteInt.h	151;"	d
PANASONIC_HDR_MARK	Robot_IR_Remote/src/IRremoteInt.h	149;"	d
PANASONIC_HDR_SPACE	Robot_IR_Remote/src/IRremoteInt.h	150;"	d
PANASONIC_ONE_SPACE	Robot_IR_Remote/src/IRremoteInt.h	152;"	d
PANASONIC_ZERO_SPACE	Robot_IR_Remote/src/IRremoteInt.h	153;"	d
PARSE_TIMEOUT	arduino/Stream.cpp	28;"	d	file:
PATH_COMPONENT_BUFFER_LEN	SD/src/SD.cpp	59;"	d	file:
PB	arduino/Arduino.h	192;"	d
PC	arduino/Arduino.h	193;"	d
PCS_MODE	GSM/src/GSM3ShieldV1BandManagement.h	/^typedef enum GSM3GSMBand {UNDEFINED, EGSM_MODE, DCS_MODE, PCS_MODE, EGSM_DCS_MODE, GSM850_PCS_MODE, GSM850_EGSM_DCS_PCS_MODE};$/;"	e	enum:GSM3GSMBand
PD	arduino/Arduino.h	194;"	d
PE	arduino/Arduino.h	195;"	d
PERIOD_MAX	Robot_Control/src/Squawk.cpp	10;"	d	file:
PERIOD_MIN	Robot_Control/src/Squawk.cpp	9;"	d	file:
PF	arduino/Arduino.h	196;"	d
PG	arduino/Arduino.h	197;"	d
PGMbuffer	Robot_Control/src/utility/RobotTextManager.h	/^	char PGMbuffer[85];  \/\/the buffer for storing strings$/;"	m	class:TextManager
PH	arduino/Arduino.h	198;"	d
PI	arduino/Arduino.h	47;"	d
PIN_MODE_ANALOG	Firmata/Firmata.h	97;"	d
PIN_MODE_ENCODER	Firmata/Firmata.h	104;"	d
PIN_MODE_I2C	Firmata/Firmata.h	101;"	d
PIN_MODE_IGNORE	Firmata/Firmata.h	107;"	d
PIN_MODE_ONEWIRE	Firmata/Firmata.h	102;"	d
PIN_MODE_PULLUP	Firmata/Firmata.h	106;"	d
PIN_MODE_PWM	Firmata/Firmata.h	98;"	d
PIN_MODE_SERIAL	Firmata/Firmata.h	105;"	d
PIN_MODE_SERVO	Firmata/Firmata.h	99;"	d
PIN_MODE_SHIFT	Firmata/Firmata.h	100;"	d
PIN_MODE_STEPPER	Firmata/Firmata.h	103;"	d
PIN_SERIAL1_RX	Firmata/Boards.h	204;"	d
PIN_SERIAL1_RX	Firmata/Boards.h	228;"	d
PIN_SERIAL1_RX	Firmata/Boards.h	291;"	d
PIN_SERIAL1_RX	Firmata/Boards.h	311;"	d
PIN_SERIAL1_RX	Firmata/Boards.h	331;"	d
PIN_SERIAL1_RX	Firmata/Boards.h	352;"	d
PIN_SERIAL1_RX	Firmata/Boards.h	381;"	d
PIN_SERIAL1_RX	Firmata/Boards.h	404;"	d
PIN_SERIAL1_RX	Firmata/Boards.h	427;"	d
PIN_SERIAL1_RX	Firmata/Boards.h	447;"	d
PIN_SERIAL1_RX	Firmata/Boards.h	467;"	d
PIN_SERIAL1_RX	Firmata/Boards.h	700;"	d
PIN_SERIAL1_TX	Firmata/Boards.h	205;"	d
PIN_SERIAL1_TX	Firmata/Boards.h	229;"	d
PIN_SERIAL1_TX	Firmata/Boards.h	292;"	d
PIN_SERIAL1_TX	Firmata/Boards.h	312;"	d
PIN_SERIAL1_TX	Firmata/Boards.h	332;"	d
PIN_SERIAL1_TX	Firmata/Boards.h	353;"	d
PIN_SERIAL1_TX	Firmata/Boards.h	382;"	d
PIN_SERIAL1_TX	Firmata/Boards.h	405;"	d
PIN_SERIAL1_TX	Firmata/Boards.h	428;"	d
PIN_SERIAL1_TX	Firmata/Boards.h	448;"	d
PIN_SERIAL1_TX	Firmata/Boards.h	468;"	d
PIN_SERIAL1_TX	Firmata/Boards.h	701;"	d
PIN_SERIAL2_RX	Firmata/Boards.h	206;"	d
PIN_SERIAL2_RX	Firmata/Boards.h	230;"	d
PIN_SERIAL2_RX	Firmata/Boards.h	354;"	d
PIN_SERIAL2_RX	Firmata/Boards.h	383;"	d
PIN_SERIAL2_RX	Firmata/Boards.h	406;"	d
PIN_SERIAL2_TX	Firmata/Boards.h	207;"	d
PIN_SERIAL2_TX	Firmata/Boards.h	231;"	d
PIN_SERIAL2_TX	Firmata/Boards.h	355;"	d
PIN_SERIAL2_TX	Firmata/Boards.h	384;"	d
PIN_SERIAL2_TX	Firmata/Boards.h	407;"	d
PIN_SERIAL3_RX	Firmata/Boards.h	208;"	d
PIN_SERIAL3_RX	Firmata/Boards.h	232;"	d
PIN_SERIAL3_RX	Firmata/Boards.h	356;"	d
PIN_SERIAL3_RX	Firmata/Boards.h	385;"	d
PIN_SERIAL3_RX	Firmata/Boards.h	408;"	d
PIN_SERIAL3_TX	Firmata/Boards.h	209;"	d
PIN_SERIAL3_TX	Firmata/Boards.h	233;"	d
PIN_SERIAL3_TX	Firmata/Boards.h	357;"	d
PIN_SERIAL3_TX	Firmata/Boards.h	386;"	d
PIN_SERIAL3_TX	Firmata/Boards.h	409;"	d
PIN_SERIAL4_RX	Firmata/Boards.h	359;"	d
PIN_SERIAL5_TX	Firmata/Boards.h	360;"	d
PIN_SERIAL6_RX	Firmata/Boards.h	361;"	d
PIN_SERIAL6_TX	Firmata/Boards.h	362;"	d
PIN_SERIAL_RX	Firmata/Boards.h	719;"	d
PIN_SERIAL_TX	Firmata/Boards.h	720;"	d
PIN_STATE_QUERY	Firmata/Firmata.h	77;"	d
PIN_STATE_RESPONSE	Firmata/Firmata.h	78;"	d
PIN_TO_ANALOG	Firmata/Boards.h	161;"	d
PIN_TO_ANALOG	Firmata/Boards.h	177;"	d
PIN_TO_ANALOG	Firmata/Boards.h	193;"	d
PIN_TO_ANALOG	Firmata/Boards.h	218;"	d
PIN_TO_ANALOG	Firmata/Boards.h	241;"	d
PIN_TO_ANALOG	Firmata/Boards.h	258;"	d
PIN_TO_ANALOG	Firmata/Boards.h	281;"	d
PIN_TO_ANALOG	Firmata/Boards.h	301;"	d
PIN_TO_ANALOG	Firmata/Boards.h	321;"	d
PIN_TO_ANALOG	Firmata/Boards.h	341;"	d
PIN_TO_ANALOG	Firmata/Boards.h	371;"	d
PIN_TO_ANALOG	Firmata/Boards.h	394;"	d
PIN_TO_ANALOG	Firmata/Boards.h	417;"	d
PIN_TO_ANALOG	Firmata/Boards.h	437;"	d
PIN_TO_ANALOG	Firmata/Boards.h	457;"	d
PIN_TO_ANALOG	Firmata/Boards.h	477;"	d
PIN_TO_ANALOG	Firmata/Boards.h	493;"	d
PIN_TO_ANALOG	Firmata/Boards.h	509;"	d
PIN_TO_ANALOG	Firmata/Boards.h	525;"	d
PIN_TO_ANALOG	Firmata/Boards.h	543;"	d
PIN_TO_ANALOG	Firmata/Boards.h	562;"	d
PIN_TO_ANALOG	Firmata/Boards.h	580;"	d
PIN_TO_ANALOG	Firmata/Boards.h	598;"	d
PIN_TO_ANALOG	Firmata/Boards.h	616;"	d
PIN_TO_ANALOG	Firmata/Boards.h	634;"	d
PIN_TO_ANALOG	Firmata/Boards.h	652;"	d
PIN_TO_ANALOG	Firmata/Boards.h	670;"	d
PIN_TO_ANALOG	Firmata/Boards.h	688;"	d
PIN_TO_ANALOG	Firmata/Boards.h	710;"	d
PIN_TO_ANALOG	Firmata/Boards.h	730;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	160;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	176;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	192;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	217;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	240;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	257;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	280;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	300;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	320;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	340;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	369;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	393;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	416;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	436;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	456;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	476;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	492;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	508;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	524;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	542;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	561;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	579;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	597;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	615;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	633;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	651;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	669;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	687;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	709;"	d
PIN_TO_DIGITAL	Firmata/Boards.h	729;"	d
PIN_TO_PWM	Firmata/Boards.h	162;"	d
PIN_TO_PWM	Firmata/Boards.h	178;"	d
PIN_TO_PWM	Firmata/Boards.h	194;"	d
PIN_TO_PWM	Firmata/Boards.h	219;"	d
PIN_TO_PWM	Firmata/Boards.h	242;"	d
PIN_TO_PWM	Firmata/Boards.h	259;"	d
PIN_TO_PWM	Firmata/Boards.h	282;"	d
PIN_TO_PWM	Firmata/Boards.h	302;"	d
PIN_TO_PWM	Firmata/Boards.h	322;"	d
PIN_TO_PWM	Firmata/Boards.h	342;"	d
PIN_TO_PWM	Firmata/Boards.h	372;"	d
PIN_TO_PWM	Firmata/Boards.h	395;"	d
PIN_TO_PWM	Firmata/Boards.h	418;"	d
PIN_TO_PWM	Firmata/Boards.h	438;"	d
PIN_TO_PWM	Firmata/Boards.h	458;"	d
PIN_TO_PWM	Firmata/Boards.h	478;"	d
PIN_TO_PWM	Firmata/Boards.h	494;"	d
PIN_TO_PWM	Firmata/Boards.h	510;"	d
PIN_TO_PWM	Firmata/Boards.h	526;"	d
PIN_TO_PWM	Firmata/Boards.h	544;"	d
PIN_TO_PWM	Firmata/Boards.h	563;"	d
PIN_TO_PWM	Firmata/Boards.h	581;"	d
PIN_TO_PWM	Firmata/Boards.h	599;"	d
PIN_TO_PWM	Firmata/Boards.h	617;"	d
PIN_TO_PWM	Firmata/Boards.h	635;"	d
PIN_TO_PWM	Firmata/Boards.h	653;"	d
PIN_TO_PWM	Firmata/Boards.h	671;"	d
PIN_TO_PWM	Firmata/Boards.h	690;"	d
PIN_TO_PWM	Firmata/Boards.h	711;"	d
PIN_TO_PWM	Firmata/Boards.h	731;"	d
PIN_TO_SERVO	Firmata/Boards.h	163;"	d
PIN_TO_SERVO	Firmata/Boards.h	179;"	d
PIN_TO_SERVO	Firmata/Boards.h	195;"	d
PIN_TO_SERVO	Firmata/Boards.h	220;"	d
PIN_TO_SERVO	Firmata/Boards.h	243;"	d
PIN_TO_SERVO	Firmata/Boards.h	260;"	d
PIN_TO_SERVO	Firmata/Boards.h	283;"	d
PIN_TO_SERVO	Firmata/Boards.h	303;"	d
PIN_TO_SERVO	Firmata/Boards.h	323;"	d
PIN_TO_SERVO	Firmata/Boards.h	343;"	d
PIN_TO_SERVO	Firmata/Boards.h	373;"	d
PIN_TO_SERVO	Firmata/Boards.h	396;"	d
PIN_TO_SERVO	Firmata/Boards.h	419;"	d
PIN_TO_SERVO	Firmata/Boards.h	439;"	d
PIN_TO_SERVO	Firmata/Boards.h	459;"	d
PIN_TO_SERVO	Firmata/Boards.h	479;"	d
PIN_TO_SERVO	Firmata/Boards.h	495;"	d
PIN_TO_SERVO	Firmata/Boards.h	511;"	d
PIN_TO_SERVO	Firmata/Boards.h	527;"	d
PIN_TO_SERVO	Firmata/Boards.h	545;"	d
PIN_TO_SERVO	Firmata/Boards.h	564;"	d
PIN_TO_SERVO	Firmata/Boards.h	582;"	d
PIN_TO_SERVO	Firmata/Boards.h	600;"	d
PIN_TO_SERVO	Firmata/Boards.h	618;"	d
PIN_TO_SERVO	Firmata/Boards.h	636;"	d
PIN_TO_SERVO	Firmata/Boards.h	654;"	d
PIN_TO_SERVO	Firmata/Boards.h	672;"	d
PIN_TO_SERVO	Firmata/Boards.h	691;"	d
PIN_TO_SERVO	Firmata/Boards.h	712;"	d
PIN_TO_SERVO	Firmata/Boards.h	732;"	d
PImage	TFT/src/utility/PImage.h	/^  PImage() : $/;"	f	class:PImage
PImage	TFT/src/utility/PImage.h	/^  PImage(File & bmpFile, int bmpWidth, int bmpHeight, uint8_t  bmpDepth, uint32_t bmpImageoffset, uint32_t rowSize, bool     flip) : $/;"	f	class:PImage
PImage	TFT/src/utility/PImage.h	/^class PImage {$/;"	c
PJ	arduino/Arduino.h	199;"	d
PK	arduino/Arduino.h	200;"	d
PL	arduino/Arduino.h	201;"	d
PLUGGABLE_USB_ENABLED	arduino/USBDesc.h	19;"	d
PPPOE	Ethernet/src/utility/w5100.h	/^  static const uint8_t PPPOE       = 0x5F;$/;"	m	class:SnSR
PPPOE	Ethernet/src/utility/w5100.h	/^  static const uint8_t PPPOE  = 0x05;$/;"	m	class:SnMR
PROGMEM	GSM/src/GSM3ShieldV1AccessProvider.cpp	/^const char _command_AT[] PROGMEM = "AT";$/;"	v
PROGMEM	GSM/src/GSM3ShieldV1AccessProvider.cpp	/^const char _command_CGREG[] PROGMEM = "AT+CGREG?";$/;"	v
PROGMEM	GSM/src/GSM3ShieldV1DataNetworkProvider.cpp	/^const char _command_CGATT[] PROGMEM = "AT+CGATT=";$/;"	v
PROGMEM	GSM/src/GSM3ShieldV1DataNetworkProvider.cpp	/^const char _command_SEPARATOR[] PROGMEM = "\\",\\"";$/;"	v
PROGMEM	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^const char _command_MultiQISRVC[] PROGMEM = "AT+QISRVC=";$/;"	v
PROGMEM	GSM/src/GSM3ShieldV1MultiServerProvider.cpp	/^const char _command_QILOCIP[] PROGMEM = "AT+QILOCIP";$/;"	v
PROGMEM	GSM/src/GSM3SoftSerial.cpp	/^static const DELAY_TABLE table[] PROGMEM = $/;"	v	file:
PROGMEM	Robot_Control/examples/explore/R06_Wheel_Calibration/scripts_library.h	/^const char * const scripts[] PROGMEM = {$/;"	v
PROGMEM	Robot_Control/examples/explore/R06_Wheel_Calibration/scripts_library.h	/^const char script1[] PROGMEM="Wheel Calibration\\n";$/;"	v
PROGMEM	Robot_Control/examples/explore/R06_Wheel_Calibration/scripts_library.h	/^const char script2[] PROGMEM="1. Put Robot on a flat surface\\n";$/;"	v
PROGMEM	Robot_Control/examples/explore/R06_Wheel_Calibration/scripts_library.h	/^const char script3[] PROGMEM="2. Adjust speed with the knob on top\\n";$/;"	v
PROGMEM	Robot_Control/examples/explore/R06_Wheel_Calibration/scripts_library.h	/^const char script4[] PROGMEM="3. If robot goes straight, it's done\\n";$/;"	v
PROGMEM	Robot_Control/examples/explore/R06_Wheel_Calibration/scripts_library.h	/^const char script5[] PROGMEM="4. Use screwdriver on the trim on bottom\\n";$/;"	v
PROGMEM	Robot_Control/examples/explore/R06_Wheel_Calibration/scripts_library.h	/^const char script6[] PROGMEM="Robot turns left, screw it clockwise;\\n";$/;"	v
PROGMEM	Robot_Control/examples/explore/R06_Wheel_Calibration/scripts_library.h	/^const char script7[] PROGMEM="Turns right, screw it ct-colockwise;\\n";$/;"	v
PROGMEM	Robot_Control/examples/explore/R06_Wheel_Calibration/scripts_library.h	/^const char script8[] PROGMEM="5. Repeat 4 until going straight\\n";$/;"	v
PROGMEM	Robot_Control/src/Squawk.cpp	/^const int8_t sine_tbl[32] PROGMEM = {$/;"	v
PROGMEM	Robot_Control/src/Squawk.cpp	/^const uint16_t period_tbl[84] PROGMEM = {$/;"	v
PROGMEM	Robot_Control/src/glcdfont.c	/^static const unsigned char font[] PROGMEM = {$/;"	v	file:
PROGMEM	Robot_Control/src/utility/scripts_Hello_User.h	/^const char * const scripts_Hello_User[] PROGMEM = {$/;"	v
PROGMEM	Robot_Control/src/utility/scripts_Hello_User.h	/^const char hello_user_script10[] PROGMEM="  Press middle key\\n   to continue...";$/;"	v
PROGMEM	Robot_Control/src/utility/scripts_Hello_User.h	/^const char hello_user_script11[] PROGMEM="  Choose \\"enter\\" to\\n\\n  finish the input";$/;"	v
PROGMEM	Robot_Control/src/utility/scripts_Hello_User.h	/^const char hello_user_script1[] PROGMEM="What's your name?";$/;"	v
PROGMEM	Robot_Control/src/utility/scripts_Hello_User.h	/^const char hello_user_script2[] PROGMEM="Give me a name!";$/;"	v
PROGMEM	Robot_Control/src/utility/scripts_Hello_User.h	/^const char hello_user_script3[] PROGMEM="And the country?";$/;"	v
PROGMEM	Robot_Control/src/utility/scripts_Hello_User.h	/^const char hello_user_script4[] PROGMEM="The city you're in?";$/;"	v
PROGMEM	Robot_Control/src/utility/scripts_Hello_User.h	/^const char hello_user_script5[] PROGMEM="  Plug me to\\n\\n  your computer\\n\\n  and start coding!";$/;"	v
PROGMEM	Robot_Control/src/utility/scripts_Hello_User.h	/^const char hello_user_script6[] PROGMEM="     Hello User!\\n\\n It's me, your robot\\n\\n    I'm alive! <3";$/;"	v
PROGMEM	Robot_Control/src/utility/scripts_Hello_User.h	/^const char hello_user_script7[] PROGMEM="  First I need some\\n\\n   input from you!";$/;"	v
PROGMEM	Robot_Control/src/utility/scripts_Hello_User.h	/^const char hello_user_script8[] PROGMEM="     Use the knob\\n\\n   to select letters";$/;"	v
PROGMEM	Robot_Control/src/utility/scripts_Hello_User.h	/^const char hello_user_script9[] PROGMEM="   Use L\/R button\\n\\n to move the cursor,\\n\\n  middle to confirm";$/;"	v
PROGMEM	TFT/src/utility/glcdfont.c	/^static const unsigned char  font[] PROGMEM = {$/;"	v	file:
PROGMEM	arduino/USBCore.cpp	/^const u8 STRING_MANUFACTURER[] PROGMEM = USB_MANUFACTURER;$/;"	v
PROGMEM	arduino/USBCore.cpp	/^const u8 STRING_PRODUCT[] PROGMEM = USB_PRODUCT;$/;"	v
PUP	Ethernet/src/utility/w5100.h	/^  static const uint8_t PUP  = 12;$/;"	m	class:IPPROTO
PUSB_h	arduino/PluggableUSB.h	21;"	d
PWM	Firmata/Firmata.h	111;"	d
PgmPrint	Robot_Control/src/Fat16util.h	33;"	d
PgmPrint	SD/src/utility/SdFatUtil.h	30;"	d
PgmPrintln	Robot_Control/src/Fat16util.h	35;"	d
PgmPrintln	SD/src/utility/SdFatUtil.h	32;"	d
Pin	Servo/src/Servo.h	/^  ServoPin_t Pin;$/;"	m	struct:__anon34
PluggableUSB	arduino/PluggableUSB.cpp	/^PluggableUSB_& PluggableUSB()$/;"	f
PluggableUSBModule	arduino/PluggableUSB.h	/^  PluggableUSBModule(uint8_t numEps, uint8_t numIfs, uint8_t *epType) :$/;"	f	class:PluggableUSBModule
PluggableUSBModule	arduino/PluggableUSB.h	/^class PluggableUSBModule {$/;"	c
PluggableUSB_	arduino/PluggableUSB.cpp	/^PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),$/;"	f	class:PluggableUSB_
PluggableUSB_	arduino/PluggableUSB.h	/^class PluggableUSB_ {$/;"	c
Print	arduino/Print.h	/^    Print() : write_error(0) {}$/;"	f	class:Print
Print	arduino/Print.h	/^class Print$/;"	c
Print_h	arduino/Print.h	21;"	d
Printable	arduino/Printable.h	/^class Printable$/;"	c
Printable_h	arduino/Printable.h	21;"	d
ProcessResponse	Ethernet/src/Dns.cpp	/^uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)$/;"	f	class:DNSClient
QUERY_FLAG	Ethernet/src/Dns.cpp	20;"	d	file:
QUERY_RESPONSE_MASK	Ethernet/src/Dns.cpp	22;"	d	file:
R1_IDLE_STATE	Robot_Control/src/SdCard.cpp	/^uint8_t const R1_IDLE_STATE  = 1;$/;"	v
R1_IDLE_STATE	SD/src/utility/SdInfo.h	/^uint8_t const R1_IDLE_STATE = 0X01;$/;"	v
R1_ILLEGAL_COMMAND	SD/src/utility/SdInfo.h	/^uint8_t const R1_ILLEGAL_COMMAND = 0X04;$/;"	v
R1_READY_STATE	Robot_Control/src/SdCard.cpp	/^uint8_t const R1_READY_STATE = 0;$/;"	v
R1_READY_STATE	SD/src/utility/SdInfo.h	/^uint8_t const R1_READY_STATE = 0X00;$/;"	v
RAD_TO_DEG	arduino/Arduino.h	51;"	d
RAW	Ethernet/src/utility/w5100.h	/^  static const uint8_t RAW  = 255;$/;"	m	class:IPPROTO
RAWBUF	Robot_IR_Remote/src/IRremote.h	88;"	d
RBASE	Ethernet/src/utility/w5100.h	/^  uint16_t RBASE[SOCKETS]; \/\/ Rx buffer base address$/;"	m	class:W5100Class
RC5	Robot_IR_Remote/src/IRremote.h	40;"	d
RC5_RPT_LENGTH	Robot_IR_Remote/src/IRremoteInt.h	127;"	d
RC5_T1	Robot_IR_Remote/src/IRremoteInt.h	126;"	d
RC6	Robot_IR_Remote/src/IRremote.h	41;"	d
RC6_HDR_MARK	Robot_IR_Remote/src/IRremoteInt.h	129;"	d
RC6_HDR_SPACE	Robot_IR_Remote/src/IRremoteInt.h	130;"	d
RC6_RPT_LENGTH	Robot_IR_Remote/src/IRremoteInt.h	132;"	d
RC6_T1	Robot_IR_Remote/src/IRremoteInt.h	131;"	d
RECEIVINGCALL	GSM/src/GSM3MobileVoiceProvider.h	/^enum GSM3_voiceCall_st { IDLE_CALL, CALLING, RECEIVINGCALL, TALKING};$/;"	e	enum:GSM3_voiceCall_st
RECURSION_AVAILABLE_FLAG	Ethernet/src/Dns.cpp	30;"	d	file:
RECURSION_DESIRED_FLAG	Ethernet/src/Dns.cpp	29;"	d	file:
RECV	Ethernet/src/utility/w5100.h	/^  static const uint8_t RECV    = 0x04;$/;"	m	class:SnIR
RECV_PIN	Robot_IR_Remote/src/IRremoteTools.cpp	/^int RECV_PIN = TKD2; \/\/ the pin the IR receiver is connected to$/;"	v
RED	Robot_Control/src/ArduinoRobot.h	150;"	d
REFRESH_INTERVAL	Servo/src/Servo.h	77;"	d
REPEAT	Robot_IR_Remote/src/IRremote.h	51;"	d
REPORT_ANALOG	Firmata/Firmata.h	52;"	d
REPORT_DIGITAL	Firmata/Firmata.h	53;"	d
REPORT_FIRMWARE	Firmata/Firmata.h	83;"	d
REPORT_VERSION	Firmata/Firmata.h	58;"	d
REQUEST_CLASS	arduino/USBCore.h	42;"	d
REQUEST_DEVICE	arduino/USBCore.h	46;"	d
REQUEST_DEVICETOHOST	arduino/USBCore.h	38;"	d
REQUEST_DEVICETOHOST_CLASS_INTERFACE	arduino/USBCore.h	52;"	d
REQUEST_DEVICETOHOST_STANDARD_INTERFACE	arduino/USBCore.h	54;"	d
REQUEST_DIRECTION	arduino/USBCore.h	39;"	d
REQUEST_ENDPOINT	arduino/USBCore.h	48;"	d
REQUEST_HOSTTODEVICE	arduino/USBCore.h	37;"	d
REQUEST_HOSTTODEVICE_CLASS_INTERFACE	arduino/USBCore.h	53;"	d
REQUEST_INTERFACE	arduino/USBCore.h	47;"	d
REQUEST_OTHER	arduino/USBCore.h	49;"	d
REQUEST_RECIPIENT	arduino/USBCore.h	50;"	d
REQUEST_STANDARD	arduino/USBCore.h	41;"	d
REQUEST_TYPE	arduino/USBCore.h	44;"	d
REQUEST_VENDOR	arduino/USBCore.h	43;"	d
RESPONSE_FLAG	Ethernet/src/Dns.cpp	21;"	d	file:
RESP_FORMAT_ERROR	Ethernet/src/Dns.cpp	32;"	d	file:
RESP_MASK	Ethernet/src/Dns.cpp	37;"	d	file:
RESP_NAME_ERROR	Ethernet/src/Dns.cpp	34;"	d	file:
RESP_NOT_IMPLEMENTED	Ethernet/src/Dns.cpp	35;"	d	file:
RESP_NO_ERROR	Ethernet/src/Dns.cpp	31;"	d	file:
RESP_REFUSED	Ethernet/src/Dns.cpp	36;"	d	file:
RESP_SERVER_FAILURE	Ethernet/src/Dns.cpp	33;"	d	file:
RES_RX1	Firmata/utility/SerialFirmata.h	53;"	d
RES_RX2	Firmata/utility/SerialFirmata.h	55;"	d
RES_RX3	Firmata/utility/SerialFirmata.h	57;"	d
RES_TX1	Firmata/utility/SerialFirmata.h	54;"	d
RES_TX2	Firmata/utility/SerialFirmata.h	56;"	d
RES_TX3	Firmata/utility/SerialFirmata.h	58;"	d
RETRIEVECALLINGNUMBER	GSM/src/GSM3ShieldV1BaseProvider.h	/^	VOICECALL, ANSWERCALL, HANGCALL, RETRIEVECALLINGNUMBER, $/;"	e	enum:GSM3_commandType_e
RIP_MSG_FIXED	Ethernet/src/Dhcp.h	/^}RIP_MSG_FIXED;$/;"	t	typeref:struct:_RIP_MSG_FIXED
RISING	arduino/Arduino.h	62;"	d
RMASK	Ethernet/src/utility/w5100.h	/^  static const uint16_t RMASK = 0x07FF; \/\/ Rx buffer MASK$/;"	m	class:W5100Class
ROBOTNAME	Robot_Control/src/utility/RobotTextManager.h	5;"	d
ROBOTTEXTMANAGER_H	Robot_Control/src/utility/RobotTextManager.h	2;"	d
RSIZE	Ethernet/src/utility/w5100.h	/^  static const uint16_t RSIZE = 2048; \/\/ Max Rx buffer size$/;"	m	class:W5100Class
RST	Ethernet/src/utility/w5100.h	/^  static const uint8_t  RST = 7; \/\/ Reset BIT$/;"	m	class:W5100Class
RXBUF_BASE	Ethernet/src/utility/w5100.cpp	23;"	d	file:
RXCIE0	arduino/HardwareSerial_private.h	46;"	d
RXCIE0	arduino/HardwareSerial_private.h	56;"	d
RXEN0	arduino/HardwareSerial_private.h	44;"	d
RXEN0	arduino/HardwareSerial_private.h	54;"	d
RX_BUF	Ethernet/src/utility/w5100.cpp	20;"	d	file:
Rcmd1	Robot_Control/src/Arduino_LCD.cpp	/^Rcmd1[] = {                   \/\/ Init for 7735R, part 1 (red or green tab)$/;"	v
Rcmd1	TFT/src/utility/Adafruit_ST7735.cpp	/^  Rcmd1[] = {                 \/\/ Init for 7735R, part 1 (red or green tab)$/;"	v	file:
Rcmd2green	Robot_Control/src/Arduino_LCD.cpp	/^  Rcmd2green[] = {            \/\/ Init for 7735R, part 2 (green tab only)$/;"	v
Rcmd2green	TFT/src/utility/Adafruit_ST7735.cpp	/^  Rcmd2green[] = {            \/\/ Init for 7735R, part 2 (green tab only)$/;"	v	file:
Rcmd2red	Robot_Control/src/Arduino_LCD.cpp	/^  Rcmd2red[] = {              \/\/ Init for 7735R, part 2 (red tab only)$/;"	v
Rcmd2red	TFT/src/utility/Adafruit_ST7735.cpp	/^  Rcmd2red[] = {              \/\/ Init for 7735R, part 2 (red tab only)$/;"	v	file:
Rcmd3	Robot_Control/src/Arduino_LCD.cpp	/^  Rcmd3[] = {                 \/\/ Init for 7735R, part 3 (red or green tab)$/;"	v
Rcmd3	TFT/src/utility/Adafruit_ST7735.cpp	/^  Rcmd3[] = {                 \/\/ Init for 7735R, part 3 (red or green tab)$/;"	v	file:
ReadWriteAllowed	arduino/USBCore.cpp	/^static inline u8 ReadWriteAllowed()$/;"	f	file:
ReceivedSetupInt	arduino/USBCore.cpp	/^static inline u8 ReceivedSetupInt()$/;"	f	file:
Recv	arduino/USBCore.cpp	/^static inline void Recv(volatile u8* data, u8 count)$/;"	f	file:
Recv8	arduino/USBCore.cpp	/^static inline u8 Recv8()$/;"	f	file:
ReleaseRX	arduino/USBCore.cpp	/^static inline void ReleaseRX()$/;"	f	file:
ReleaseTX	arduino/USBCore.cpp	/^static inline void ReleaseTX()$/;"	f	file:
Robot	Robot_Control/src/ArduinoRobot.cpp	/^RobotControl Robot=RobotControl();$/;"	v
RobotControl	Robot_Control/src/ArduinoRobot.cpp	/^RobotControl::RobotControl():Arduino_LCD(LCD_CS,DC_LCD,RST_LCD){$/;"	f	class:RobotControl
RobotControl	Robot_Control/src/ArduinoRobot.h	/^class RobotControl:public Multiplexer, $/;"	c
RobotMotor	Robot_Motor/src/ArduinoRobotMotorBoard.cpp	/^RobotMotorBoard RobotMotor=RobotMotorBoard();/;"	v
RobotMotorBoard	Robot_Motor/src/ArduinoRobotMotorBoard.cpp	/^RobotMotorBoard::RobotMotorBoard(){$/;"	f	class:RobotMotorBoard
RobotMotorBoard	Robot_Motor/src/ArduinoRobotMotorBoard.h	/^class RobotMotorBoard:public LineFollow{$/;"	c
RxLEDPulse	arduino/USBCore.cpp	/^volatile u8 RxLEDPulse; \/**< Milliseconds remaining for data Rx LED pulse *\/$/;"	v
SAMPLING_INTERVAL	Firmata/Firmata.h	84;"	d
SANYO	Robot_IR_Remote/src/IRremote.h	46;"	d
SANYO_BITS	Robot_IR_Remote/src/IRremoteInt.h	203;"	d
SANYO_DOUBLE_SPACE_USECS	Robot_IR_Remote/src/IRremoteInt.h	112;"	d
SANYO_HDR_MARK	Robot_IR_Remote/src/IRremoteInt.h	108;"	d
SANYO_HDR_SPACE	Robot_IR_Remote/src/IRremoteInt.h	109;"	d
SANYO_ONE_MARK	Robot_IR_Remote/src/IRremoteInt.h	110;"	d
SANYO_RPT_LENGTH	Robot_IR_Remote/src/IRremoteInt.h	113;"	d
SANYO_ZERO_MARK	Robot_IR_Remote/src/IRremoteInt.h	111;"	d
SBASE	Ethernet/src/utility/w5100.h	/^  uint16_t SBASE[SOCKETS]; \/\/ Tx buffer base address$/;"	m	class:W5100Class
SCHEDULER_DATA	Firmata/Firmata.h	85;"	d
SCK_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const SCK_PIN = 13;$/;"	v
SCK_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const SCK_PIN = 15;$/;"	v
SCK_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const SCK_PIN = 21;$/;"	v
SCK_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const SCK_PIN = 52;$/;"	v
SCK_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const SCK_PIN = 7;$/;"	v
SCK_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const SCK_PIN = SCK;$/;"	v
SCL_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const SCL_PIN = 0;$/;"	v
SCL_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const SCL_PIN = 18;$/;"	v
SCL_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const SCL_PIN = 19;$/;"	v
SCL_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const SCL_PIN = 21;$/;"	v
SCL_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const SCL_PIN = 3;$/;"	v
SD	SD/src/SD.cpp	/^SDClass SD;$/;"	m	namespace:SDLib	file:
SDA_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const SDA_PIN = 17;$/;"	v
SDA_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const SDA_PIN = 18;$/;"	v
SDA_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const SDA_PIN = 1;$/;"	v
SDA_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const SDA_PIN = 20;$/;"	v
SDA_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const SDA_PIN = 2;$/;"	v
SDCARD_SPI	SD/src/utility/Sd2Card.cpp	28;"	d	file:
SDClass	SD/src/SD.h	/^class SDClass {$/;"	c	namespace:SDLib
SDFile	SD/src/SD.h	/^typedef SDLib::File    SDFile;$/;"	t
SDFileSystem	SD/src/SD.h	122;"	d
SDFileSystemClass	SD/src/SD.h	/^typedef SDLib::SDClass SDFileSystemClass;$/;"	t
SDLib	SD/src/SD.cpp	/^namespace SDLib {$/;"	n	file:
SDLib	SD/src/SD.h	/^namespace SDLib {$/;"	n
SD_CARD_ERROR_ACMD23	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_ERROR_ACMD23 = 0X07;$/;"	v
SD_CARD_ERROR_ACMD41	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_ERROR_ACMD41 = 0X08;$/;"	v
SD_CARD_ERROR_BAD_CSD	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_ERROR_BAD_CSD = 0X09;$/;"	v
SD_CARD_ERROR_CMD0	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_ERROR_CMD0 = 0X1;$/;"	v
SD_CARD_ERROR_CMD17	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_ERROR_CMD17 = 0X3;$/;"	v
SD_CARD_ERROR_CMD24	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_ERROR_CMD24 = 0X4;$/;"	v
SD_CARD_ERROR_CMD25	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_ERROR_CMD25 = 0X05;$/;"	v
SD_CARD_ERROR_CMD58	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_ERROR_CMD58 = 0X06;$/;"	v
SD_CARD_ERROR_CMD8	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_ERROR_CMD8 = 0X2;$/;"	v
SD_CARD_ERROR_ERASE	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_ERROR_ERASE = 0X0A;$/;"	v
SD_CARD_ERROR_ERASE_SINGLE_BLOCK	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_ERROR_ERASE_SINGLE_BLOCK = 0X0B;$/;"	v
SD_CARD_ERROR_ERASE_TIMEOUT	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_ERROR_ERASE_TIMEOUT = 0X0C;$/;"	v
SD_CARD_ERROR_READ	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_ERROR_READ = 0X0D;$/;"	v
SD_CARD_ERROR_READ_REG	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_ERROR_READ_REG = 0X0E;$/;"	v
SD_CARD_ERROR_READ_TIMEOUT	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_ERROR_READ_TIMEOUT = 0X0F;$/;"	v
SD_CARD_ERROR_SCK_RATE	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_ERROR_SCK_RATE = 0X16;$/;"	v
SD_CARD_ERROR_STOP_TRAN	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_ERROR_STOP_TRAN = 0X10;$/;"	v
SD_CARD_ERROR_WRITE	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_ERROR_WRITE = 0X11;$/;"	v
SD_CARD_ERROR_WRITE_BLOCK_ZERO	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_ERROR_WRITE_BLOCK_ZERO = 0X12;$/;"	v
SD_CARD_ERROR_WRITE_MULTIPLE	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_ERROR_WRITE_MULTIPLE = 0X13;$/;"	v
SD_CARD_ERROR_WRITE_PROGRAMMING	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_ERROR_WRITE_PROGRAMMING = 0X14;$/;"	v
SD_CARD_ERROR_WRITE_TIMEOUT	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_ERROR_WRITE_TIMEOUT = 0X15;$/;"	v
SD_CARD_TYPE_SD1	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_TYPE_SD1 = 1;$/;"	v
SD_CARD_TYPE_SD2	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_TYPE_SD2 = 2;$/;"	v
SD_CARD_TYPE_SDHC	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CARD_TYPE_SDHC = 3;$/;"	v
SD_CHIP_SELECT_PIN	Robot_Control/src/SdCard.h	/^uint8_t const SD_CHIP_SELECT_PIN = SPI_SS_PIN;$/;"	v
SD_CHIP_SELECT_PIN	SD/src/utility/Sd2Card.h	/^uint8_t const  SD_CHIP_SELECT_PIN = SDCARD_SS_PIN;$/;"	v
SD_CHIP_SELECT_PIN	SD/src/utility/Sd2Card.h	/^uint8_t const  SD_CHIP_SELECT_PIN = SS;$/;"	v
SD_CHIP_SELECT_PIN	SD/src/utility/Sd2Card.h	/^uint8_t const SD_CHIP_SELECT_PIN = 10;$/;"	v
SD_COMMAND_TIMEOUT	Robot_Control/src/SdCard.h	/^uint16_t const SD_COMMAND_TIMEOUT = 300;$/;"	v
SD_ERASE_TIMEOUT	SD/src/utility/Sd2Card.h	/^uint16_t const SD_ERASE_TIMEOUT = 10000;$/;"	v
SD_ERROR_ACMD41	Robot_Control/src/SdCard.h	/^uint8_t const SD_ERROR_ACMD41            = 2;$/;"	v
SD_ERROR_BLOCK_ZERO_WRITE	Robot_Control/src/SdCard.h	/^uint8_t const SD_ERROR_BLOCK_ZERO_WRITE  = 8;$/;"	v
SD_ERROR_CMD0	Robot_Control/src/SdCard.h	/^uint8_t const SD_ERROR_CMD0              = 1;$/;"	v
SD_ERROR_CMD17	Robot_Control/src/SdCard.h	/^uint8_t const SD_ERROR_CMD17             = 4;$/;"	v
SD_ERROR_CMD24	Robot_Control/src/SdCard.h	/^uint8_t const SD_ERROR_CMD24             = 3;$/;"	v
SD_ERROR_READ_TIMEOUT	Robot_Control/src/SdCard.h	/^uint8_t const SD_ERROR_READ_TIMEOUT      = 5;$/;"	v
SD_ERROR_SPI_SPEED	Robot_Control/src/SdCard.h	/^uint8_t const SD_ERROR_SPI_SPEED         = 10;$/;"	v
SD_ERROR_WRITE_PROGRAMMING	Robot_Control/src/SdCard.h	/^uint8_t const SD_ERROR_WRITE_PROGRAMMING = 9;$/;"	v
SD_ERROR_WRITE_RESPONSE	Robot_Control/src/SdCard.h	/^uint8_t const SD_ERROR_WRITE_RESPONSE    = 6;$/;"	v
SD_ERROR_WRITE_TIMEOUT	Robot_Control/src/SdCard.h	/^uint8_t const SD_ERROR_WRITE_TIMEOUT     = 7;$/;"	v
SD_INIT_TIMEOUT	Robot_Control/src/SdCard.h	/^uint16_t const SD_INIT_TIMEOUT    = 2000;$/;"	v
SD_INIT_TIMEOUT	SD/src/utility/Sd2Card.h	/^uint16_t const SD_INIT_TIMEOUT = 2000;$/;"	v
SD_PROTECT_BLOCK_ZERO	Robot_Control/src/Fat16Config.h	33;"	d
SD_PROTECT_BLOCK_ZERO	SD/src/utility/Sd2Card.h	108;"	d
SD_READ_TIMEOUT	Robot_Control/src/SdCard.h	/^uint16_t const SD_READ_TIMEOUT    = 300;$/;"	v
SD_READ_TIMEOUT	SD/src/utility/Sd2Card.h	/^uint16_t const SD_READ_TIMEOUT = 300;$/;"	v
SD_WRITE_TIMEOUT	Robot_Control/src/SdCard.h	/^uint16_t const SD_WRITE_TIMEOUT   = 600;$/;"	v
SD_WRITE_TIMEOUT	SD/src/utility/Sd2Card.h	/^uint16_t const SD_WRITE_TIMEOUT = 600;$/;"	v
SENDINGSMS	GSM/src/GSM3MobileMockupProvider.h	/^		enum GSM3_modemlinest_e { IDLE, WAITINGANSWER, SENDINGSMS};$/;"	e	enum:GSM3MobileMockupProvider::GSM3_modemlinest_e
SEND_OK	Ethernet/src/utility/w5100.h	/^  static const uint8_t SEND_OK = 0x10;$/;"	m	class:SnIR
SERIAL	arduino/Arduino.h	54;"	d
SERIAL_5E1	arduino/HardwareSerial.h	76;"	d
SERIAL_5E2	arduino/HardwareSerial.h	80;"	d
SERIAL_5N1	arduino/HardwareSerial.h	68;"	d
SERIAL_5N2	arduino/HardwareSerial.h	72;"	d
SERIAL_5O1	arduino/HardwareSerial.h	84;"	d
SERIAL_5O2	arduino/HardwareSerial.h	88;"	d
SERIAL_6E1	arduino/HardwareSerial.h	77;"	d
SERIAL_6E2	arduino/HardwareSerial.h	81;"	d
SERIAL_6N1	arduino/HardwareSerial.h	69;"	d
SERIAL_6N2	arduino/HardwareSerial.h	73;"	d
SERIAL_6O1	arduino/HardwareSerial.h	85;"	d
SERIAL_6O2	arduino/HardwareSerial.h	89;"	d
SERIAL_7E1	arduino/HardwareSerial.h	78;"	d
SERIAL_7E2	arduino/HardwareSerial.h	82;"	d
SERIAL_7N1	arduino/HardwareSerial.h	70;"	d
SERIAL_7N2	arduino/HardwareSerial.h	74;"	d
SERIAL_7O1	arduino/HardwareSerial.h	86;"	d
SERIAL_7O2	arduino/HardwareSerial.h	90;"	d
SERIAL_8E1	arduino/HardwareSerial.h	79;"	d
SERIAL_8E2	arduino/HardwareSerial.h	83;"	d
SERIAL_8N1	arduino/HardwareSerial.h	71;"	d
SERIAL_8N2	arduino/HardwareSerial.h	75;"	d
SERIAL_8O1	arduino/HardwareSerial.h	87;"	d
SERIAL_8O2	arduino/HardwareSerial.h	91;"	d
SERIAL_BUFFER_SIZE	arduino/USBAPI.h	79;"	d
SERIAL_BUFFER_SIZE	arduino/USBAPI.h	81;"	d
SERIAL_CLOSE	Firmata/utility/SerialFirmata.h	65;"	d
SERIAL_CONFIG	Firmata/utility/SerialFirmata.h	61;"	d
SERIAL_FLUSH	Firmata/utility/SerialFirmata.h	66;"	d
SERIAL_LISTEN	Firmata/utility/SerialFirmata.h	67;"	d
SERIAL_MESSAGE	Firmata/Firmata.h	66;"	d
SERIAL_MODE_MASK	Firmata/utility/SerialFirmata.h	72;"	d
SERIAL_PORT_ID_MASK	Firmata/utility/SerialFirmata.h	48;"	d
SERIAL_READ	Firmata/utility/SerialFirmata.h	63;"	d
SERIAL_READ_ARR_LEN	Firmata/utility/SerialFirmata.h	50;"	d
SERIAL_READ_CONTINUOUSLY	Firmata/utility/SerialFirmata.h	70;"	d
SERIAL_REPLY	Firmata/utility/SerialFirmata.h	64;"	d
SERIAL_RX_BUFFER_SIZE	arduino/HardwareSerial.h	51;"	d
SERIAL_RX_BUFFER_SIZE	arduino/HardwareSerial.h	53;"	d
SERIAL_STOP_READING	Firmata/utility/SerialFirmata.h	71;"	d
SERIAL_TX_BUFFER_SIZE	arduino/HardwareSerial.h	44;"	d
SERIAL_TX_BUFFER_SIZE	arduino/HardwareSerial.h	46;"	d
SERIAL_WRITE	Firmata/utility/SerialFirmata.h	62;"	d
SERVER_PORT	Firmata/examples/StandardFirmataWiFi/wifiConfig.h	/^  WiFiClientStream stream(IPAddress(SERVER_IP), SERVER_PORT);$/;"	v
SERVER_PORT	Firmata/examples/StandardFirmataWiFi/wifiConfig.h	133;"	d
SERVO	Firmata/Firmata.h	112;"	d
SERVO	Servo/src/avr/Servo.cpp	45;"	d	file:
SERVO	Servo/src/sam/Servo.cpp	39;"	d	file:
SERVO	Servo/src/samd/Servo.cpp	39;"	d	file:
SERVOS_PER_TIMER	Servo/src/Servo.h	79;"	d
SERVO_CONFIG	Firmata/Firmata.h	68;"	d
SERVO_INDEX	Servo/src/avr/Servo.cpp	44;"	d	file:
SERVO_INDEX	Servo/src/sam/Servo.cpp	38;"	d	file:
SERVO_INDEX	Servo/src/samd/Servo.cpp	38;"	d	file:
SERVO_INDEX_TO_CHANNEL	Servo/src/avr/Servo.cpp	43;"	d	file:
SERVO_INDEX_TO_CHANNEL	Servo/src/sam/Servo.cpp	37;"	d	file:
SERVO_INDEX_TO_CHANNEL	Servo/src/samd/Servo.cpp	37;"	d	file:
SERVO_INDEX_TO_TIMER	Servo/src/avr/Servo.cpp	42;"	d	file:
SERVO_INDEX_TO_TIMER	Servo/src/sam/Servo.cpp	36;"	d	file:
SERVO_INDEX_TO_TIMER	Servo/src/samd/Servo.cpp	36;"	d	file:
SERVO_MAX	Servo/src/avr/Servo.cpp	48;"	d	file:
SERVO_MAX	Servo/src/sam/Servo.cpp	42;"	d	file:
SERVO_MAX	Servo/src/samd/Servo.cpp	42;"	d	file:
SERVO_MIN	Servo/src/avr/Servo.cpp	47;"	d	file:
SERVO_MIN	Servo/src/sam/Servo.cpp	41;"	d	file:
SERVO_MIN	Servo/src/samd/Servo.cpp	41;"	d	file:
SET_ADDRESS	arduino/USBCore.h	27;"	d
SET_CONFIGURATION	arduino/USBCore.h	31;"	d
SET_DESCRIPTOR	arduino/USBCore.h	29;"	d
SET_DIGITAL_PIN_VALUE	Firmata/Firmata.h	56;"	d
SET_FEATURE	arduino/USBCore.h	26;"	d
SET_INTERFACE	arduino/USBCore.h	33;"	d
SET_PIN_MODE	Firmata/Firmata.h	46;"	d
SET_PIN_MODE	Firmata/Firmata.h	55;"	d
SHARP	Robot_IR_Remote/src/IRremote.h	43;"	d
SHARP_BITS	Robot_IR_Remote/src/IRremoteInt.h	162;"	d
SHARP_BIT_MARK	Robot_IR_Remote/src/IRremoteInt.h	134;"	d
SHARP_GAP	Robot_IR_Remote/src/IRremoteInt.h	137;"	d
SHARP_ONE_SPACE	Robot_IR_Remote/src/IRremoteInt.h	135;"	d
SHARP_RPT_SPACE	Robot_IR_Remote/src/IRremoteInt.h	139;"	d
SHARP_TOGGLE_MASK	Robot_IR_Remote/src/IRremoteInt.h	138;"	d
SHARP_ZERO_SPACE	Robot_IR_Remote/src/IRremoteInt.h	136;"	d
SHIFT	Firmata/Firmata.h	113;"	d
SHIFT_DATA	Firmata/Firmata.h	72;"	d
SIGNAL	Servo/src/avr/Servo.cpp	/^SIGNAL (TIMER1_COMPA_vect)$/;"	f
SIGNAL	Servo/src/avr/Servo.cpp	/^SIGNAL (TIMER3_COMPA_vect)$/;"	f
SIGNAL	Servo/src/avr/Servo.cpp	/^SIGNAL (TIMER4_COMPA_vect)$/;"	f
SIGNAL	Servo/src/avr/Servo.cpp	/^SIGNAL (TIMER5_COMPA_vect)$/;"	f
SKIP_ALL	arduino/Stream.h	/^    SKIP_ALL,       \/\/ All invalid characters are ignored.$/;"	e	enum:LookaheadMode
SKIP_NONE	arduino/Stream.h	/^    SKIP_NONE,      \/\/ Nothing is skipped, and the stream is not touched unless the first waiting character is valid.$/;"	e	enum:LookaheadMode
SKIP_WHITESPACE	arduino/Stream.h	/^    SKIP_WHITESPACE \/\/ Only tabs, spaces, line feeds & carriage returns are skipped.$/;"	e	enum:LookaheadMode
SMASK	Ethernet/src/utility/w5100.h	/^  static const uint16_t SMASK = 0x07FF; \/\/ Tx buffer MASK$/;"	m	class:W5100Class
SOCKET	Ethernet/src/utility/w5100.h	/^typedef uint8_t SOCKET;$/;"	t
SOCKETS	Ethernet/src/utility/w5100.h	/^  static const int SOCKETS = 4;$/;"	m	class:W5100Class
SOCKET_NONE	Ethernet/src/Dns.cpp	15;"	d	file:
SOFTWARE_SPI	SD/src/utility/Sd2Card.h	50;"	d
SONY	Robot_IR_Remote/src/IRremote.h	39;"	d
SONY_BITS	Robot_IR_Remote/src/IRremoteInt.h	202;"	d
SONY_DOUBLE_SPACE_USECS	Robot_IR_Remote/src/IRremoteInt.h	105;"	d
SONY_HDR_MARK	Robot_IR_Remote/src/IRremoteInt.h	100;"	d
SONY_HDR_SPACE	Robot_IR_Remote/src/IRremoteInt.h	101;"	d
SONY_ONE_MARK	Robot_IR_Remote/src/IRremoteInt.h	102;"	d
SONY_RPT_LENGTH	Robot_IR_Remote/src/IRremoteInt.h	104;"	d
SONY_ZERO_MARK	Robot_IR_Remote/src/IRremoteInt.h	103;"	d
SPACE	Robot_IR_Remote/src/IRremoteInt.h	197;"	d
SPACE_PARITY	arduino/USBAPI.h	/^		SPACE_PARITY = 4,$/;"	e	enum:Serial_::__anon11
SPI	SPI/src/SPI.cpp	/^SPIClass SPI;$/;"	v
SPIClass	SPI/src/SPI.h	/^class SPIClass {$/;"	c
SPISettings	SPI/src/SPI.h	/^  SPISettings() {$/;"	f	class:SPISettings
SPISettings	SPI/src/SPI.h	/^  SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode) {$/;"	f	class:SPISettings
SPISettings	SPI/src/SPI.h	/^class SPISettings {$/;"	c
SPI_2XCLOCK_MASK	SPI/src/SPI.h	61;"	d
SPI_ATOMIC_VERSION	SPI/src/SPI.h	31;"	d
SPI_AVR_EIMSK	SPI/src/SPI.h	65;"	d
SPI_AVR_EIMSK	SPI/src/SPI.h	67;"	d
SPI_AVR_EIMSK	SPI/src/SPI.h	69;"	d
SPI_CLOCK_DIV128	SPI/src/SPI.h	49;"	d
SPI_CLOCK_DIV16	SPI/src/SPI.h	47;"	d
SPI_CLOCK_DIV2	SPI/src/SPI.h	50;"	d
SPI_CLOCK_DIV32	SPI/src/SPI.h	52;"	d
SPI_CLOCK_DIV4	SPI/src/SPI.h	46;"	d
SPI_CLOCK_DIV64	SPI/src/SPI.h	48;"	d
SPI_CLOCK_DIV8	SPI/src/SPI.h	51;"	d
SPI_CLOCK_MASK	SPI/src/SPI.h	60;"	d
SPI_ETHERNET_SETTINGS	Ethernet/src/utility/w5100.h	328;"	d
SPI_ETHERNET_SETTINGS	Ethernet/src/utility/w5100.h	363;"	d
SPI_FULL_SPEED	SD/src/utility/Sd2Card.h	/^uint8_t const SPI_FULL_SPEED = 0;$/;"	v
SPI_HALF_SPEED	SD/src/utility/Sd2Card.h	/^uint8_t const SPI_HALF_SPEED = 1;$/;"	v
SPI_HAS_NOTUSINGINTERRUPT	SPI/src/SPI.h	24;"	d
SPI_HAS_TRANSACTION	SPI/src/SPI.h	21;"	d
SPI_INT0_MASK	SPI/src/SPI.cpp	100;"	d	file:
SPI_INT0_MASK	SPI/src/SPI.cpp	110;"	d	file:
SPI_INT0_MASK	SPI/src/SPI.cpp	85;"	d	file:
SPI_INT0_MASK	SPI/src/SPI.cpp	91;"	d	file:
SPI_INT1_MASK	SPI/src/SPI.cpp	101;"	d	file:
SPI_INT1_MASK	SPI/src/SPI.cpp	113;"	d	file:
SPI_INT1_MASK	SPI/src/SPI.cpp	86;"	d	file:
SPI_INT1_MASK	SPI/src/SPI.cpp	92;"	d	file:
SPI_INT2_MASK	SPI/src/SPI.cpp	102;"	d	file:
SPI_INT2_MASK	SPI/src/SPI.cpp	116;"	d	file:
SPI_INT2_MASK	SPI/src/SPI.cpp	87;"	d	file:
SPI_INT2_MASK	SPI/src/SPI.cpp	93;"	d	file:
SPI_INT3_MASK	SPI/src/SPI.cpp	103;"	d	file:
SPI_INT3_MASK	SPI/src/SPI.cpp	88;"	d	file:
SPI_INT3_MASK	SPI/src/SPI.cpp	94;"	d	file:
SPI_INT4_MASK	SPI/src/SPI.cpp	104;"	d	file:
SPI_INT4_MASK	SPI/src/SPI.cpp	89;"	d	file:
SPI_INT4_MASK	SPI/src/SPI.cpp	95;"	d	file:
SPI_INT5_MASK	SPI/src/SPI.cpp	105;"	d	file:
SPI_INT5_MASK	SPI/src/SPI.cpp	96;"	d	file:
SPI_INT6_MASK	SPI/src/SPI.cpp	106;"	d	file:
SPI_INT6_MASK	SPI/src/SPI.cpp	97;"	d	file:
SPI_INT7_MASK	SPI/src/SPI.cpp	107;"	d	file:
SPI_INT7_MASK	SPI/src/SPI.cpp	98;"	d	file:
SPI_MISO_PIN	Robot_Control/src/SdCard.h	/^uint8_t const SPI_MISO_PIN = 12;$/;"	v
SPI_MISO_PIN	Robot_Control/src/SdCard.h	/^uint8_t const SPI_MISO_PIN = 14;$/;"	v
SPI_MISO_PIN	Robot_Control/src/SdCard.h	/^uint8_t const SPI_MISO_PIN = 23;$/;"	v
SPI_MISO_PIN	Robot_Control/src/SdCard.h	/^uint8_t const SPI_MISO_PIN = 50;$/;"	v
SPI_MISO_PIN	Robot_Control/src/SdCard.h	/^uint8_t const SPI_MISO_PIN = 6;$/;"	v
SPI_MISO_PIN	SD/src/utility/Sd2Card.h	/^uint8_t const  SPI_MISO_PIN = MISO;$/;"	v
SPI_MISO_PIN	SD/src/utility/Sd2Card.h	/^uint8_t const  SPI_MISO_PIN = SDCARD_MISO_PIN;$/;"	v
SPI_MISO_PIN	SD/src/utility/Sd2Card.h	/^uint8_t const SPI_MISO_PIN = 12;$/;"	v
SPI_MODE0	SPI/src/SPI.h	54;"	d
SPI_MODE1	SPI/src/SPI.h	55;"	d
SPI_MODE2	SPI/src/SPI.h	56;"	d
SPI_MODE3	SPI/src/SPI.h	57;"	d
SPI_MODE_MASK	SPI/src/SPI.h	59;"	d
SPI_MOSI_PIN	Robot_Control/src/SdCard.h	/^uint8_t const SPI_MOSI_PIN = 11;$/;"	v
SPI_MOSI_PIN	Robot_Control/src/SdCard.h	/^uint8_t const SPI_MOSI_PIN = 16;$/;"	v
SPI_MOSI_PIN	Robot_Control/src/SdCard.h	/^uint8_t const SPI_MOSI_PIN = 22;$/;"	v
SPI_MOSI_PIN	Robot_Control/src/SdCard.h	/^uint8_t const SPI_MOSI_PIN = 51;$/;"	v
SPI_MOSI_PIN	Robot_Control/src/SdCard.h	/^uint8_t const SPI_MOSI_PIN = 5;$/;"	v
SPI_MOSI_PIN	SD/src/utility/Sd2Card.h	/^uint8_t const  SPI_MOSI_PIN = MOSI;$/;"	v
SPI_MOSI_PIN	SD/src/utility/Sd2Card.h	/^uint8_t const  SPI_MOSI_PIN = SDCARD_MOSI_PIN;$/;"	v
SPI_MOSI_PIN	SD/src/utility/Sd2Card.h	/^uint8_t const SPI_MOSI_PIN = 11;$/;"	v
SPI_QUARTER_SPEED	SD/src/utility/Sd2Card.h	/^uint8_t const SPI_QUARTER_SPEED = 2;$/;"	v
SPI_SCK_PIN	Robot_Control/src/SdCard.h	/^uint8_t const SPI_SCK_PIN  = 13;$/;"	v
SPI_SCK_PIN	Robot_Control/src/SdCard.h	/^uint8_t const SPI_SCK_PIN  = 15;$/;"	v
SPI_SCK_PIN	Robot_Control/src/SdCard.h	/^uint8_t const SPI_SCK_PIN  = 21;$/;"	v
SPI_SCK_PIN	Robot_Control/src/SdCard.h	/^uint8_t const SPI_SCK_PIN  = 52;$/;"	v
SPI_SCK_PIN	Robot_Control/src/SdCard.h	/^uint8_t const SPI_SCK_PIN  = 7;$/;"	v
SPI_SCK_PIN	SD/src/utility/Sd2Card.h	/^uint8_t const  SPI_SCK_PIN = SCK;$/;"	v
SPI_SCK_PIN	SD/src/utility/Sd2Card.h	/^uint8_t const  SPI_SCK_PIN = SDCARD_SCK_PIN;$/;"	v
SPI_SCK_PIN	SD/src/utility/Sd2Card.h	/^uint8_t const SPI_SCK_PIN = 13;$/;"	v
SPI_SS_PIN	Robot_Control/src/SdCard.h	/^uint8_t const SPI_SS_PIN   = 10;$/;"	v
SPI_SS_PIN	Robot_Control/src/SdCard.h	/^uint8_t const SPI_SS_PIN   = 20;$/;"	v
SPI_SS_PIN	Robot_Control/src/SdCard.h	/^uint8_t const SPI_SS_PIN   = 4;$/;"	v
SPI_SS_PIN	Robot_Control/src/SdCard.h	/^uint8_t const SPI_SS_PIN   = 53;$/;"	v
SPI_SS_PIN	Robot_Control/src/SdCard.h	/^uint8_t const SPI_SS_PIN   = 8;$/;"	v
SQUAWK_CONSTRUCT_ISR	Robot_Control/src/Squawk.h	119;"	d
SQUAWK_PWM_PIN11	Robot_Control/src/Squawk.h	102;"	d
SQUAWK_PWM_PIN11	Robot_Control/src/Squawk.h	80;"	d
SQUAWK_PWM_PIN11	Robot_Control/src/Squawk.h	94;"	d
SQUAWK_PWM_PIN3	Robot_Control/src/Squawk.h	103;"	d
SQUAWK_PWM_PIN3	Robot_Control/src/Squawk.h	81;"	d
SQUAWK_PWM_PIN3	Robot_Control/src/Squawk.h	95;"	d
SQUAWK_PWM_PIN5	Robot_Control/src/Melody.cpp	/^SQUAWK_CONSTRUCT_ISR(SQUAWK_PWM_PIN5);$/;"	v
SQUAWK_PWM_PIN5	Robot_Control/src/Squawk.h	101;"	d
SQUAWK_PWM_PIN5	Robot_Control/src/Squawk.h	79;"	d
SQUAWK_PWM_PIN5	Robot_Control/src/Squawk.h	93;"	d
SQUAWK_PWM_PIN6	Robot_Control/src/Squawk.h	100;"	d
SQUAWK_PWM_PIN6	Robot_Control/src/Squawk.h	92;"	d
SSIZE	Ethernet/src/utility/w5100.h	/^  static const uint16_t SSIZE = 2048; \/\/ Max Tx buffer size$/;"	m	class:W5100Class
SS_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const SS_PIN = 10;$/;"	v
SS_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const SS_PIN = 17;$/;"	v
SS_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const SS_PIN = 20;$/;"	v
SS_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const SS_PIN = 4;$/;"	v
SS_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const SS_PIN = 53;$/;"	v
SS_PIN	SD/src/utility/Sd2PinMap.h	/^uint8_t const SS_PIN = SS;$/;"	v
ST7735_BLACK	TFT/src/utility/Adafruit_ST7735.h	87;"	d
ST7735_BLUE	TFT/src/utility/Adafruit_ST7735.h	88;"	d
ST7735_CASET	TFT/src/utility/Adafruit_ST7735.h	54;"	d
ST7735_COLMOD	TFT/src/utility/Adafruit_ST7735.h	60;"	d
ST7735_CYAN	TFT/src/utility/Adafruit_ST7735.h	91;"	d
ST7735_DISPOFF	TFT/src/utility/Adafruit_ST7735.h	52;"	d
ST7735_DISPON	TFT/src/utility/Adafruit_ST7735.h	53;"	d
ST7735_DISSET5	TFT/src/utility/Adafruit_ST7735.h	67;"	d
ST7735_FRMCTR1	TFT/src/utility/Adafruit_ST7735.h	63;"	d
ST7735_FRMCTR2	TFT/src/utility/Adafruit_ST7735.h	64;"	d
ST7735_FRMCTR3	TFT/src/utility/Adafruit_ST7735.h	65;"	d
ST7735_GMCTRN1	TFT/src/utility/Adafruit_ST7735.h	84;"	d
ST7735_GMCTRP1	TFT/src/utility/Adafruit_ST7735.h	83;"	d
ST7735_GREEN	TFT/src/utility/Adafruit_ST7735.h	90;"	d
ST7735_INVCTR	TFT/src/utility/Adafruit_ST7735.h	66;"	d
ST7735_INVOFF	TFT/src/utility/Adafruit_ST7735.h	50;"	d
ST7735_INVON	TFT/src/utility/Adafruit_ST7735.h	51;"	d
ST7735_MADCTL	TFT/src/utility/Adafruit_ST7735.h	61;"	d
ST7735_MAGENTA	TFT/src/utility/Adafruit_ST7735.h	92;"	d
ST7735_NOP	TFT/src/utility/Adafruit_ST7735.h	40;"	d
ST7735_NORON	TFT/src/utility/Adafruit_ST7735.h	48;"	d
ST7735_PTLAR	TFT/src/utility/Adafruit_ST7735.h	59;"	d
ST7735_PTLON	TFT/src/utility/Adafruit_ST7735.h	47;"	d
ST7735_PWCTR1	TFT/src/utility/Adafruit_ST7735.h	69;"	d
ST7735_PWCTR2	TFT/src/utility/Adafruit_ST7735.h	70;"	d
ST7735_PWCTR3	TFT/src/utility/Adafruit_ST7735.h	71;"	d
ST7735_PWCTR4	TFT/src/utility/Adafruit_ST7735.h	72;"	d
ST7735_PWCTR5	TFT/src/utility/Adafruit_ST7735.h	73;"	d
ST7735_PWCTR6	TFT/src/utility/Adafruit_ST7735.h	81;"	d
ST7735_RAMRD	TFT/src/utility/Adafruit_ST7735.h	57;"	d
ST7735_RAMWR	TFT/src/utility/Adafruit_ST7735.h	56;"	d
ST7735_RASET	TFT/src/utility/Adafruit_ST7735.h	55;"	d
ST7735_RDDID	TFT/src/utility/Adafruit_ST7735.h	42;"	d
ST7735_RDDST	TFT/src/utility/Adafruit_ST7735.h	43;"	d
ST7735_RDID1	TFT/src/utility/Adafruit_ST7735.h	76;"	d
ST7735_RDID2	TFT/src/utility/Adafruit_ST7735.h	77;"	d
ST7735_RDID3	TFT/src/utility/Adafruit_ST7735.h	78;"	d
ST7735_RDID4	TFT/src/utility/Adafruit_ST7735.h	79;"	d
ST7735_RED	TFT/src/utility/Adafruit_ST7735.h	89;"	d
ST7735_SLPIN	TFT/src/utility/Adafruit_ST7735.h	45;"	d
ST7735_SLPOUT	TFT/src/utility/Adafruit_ST7735.h	46;"	d
ST7735_SWRESET	TFT/src/utility/Adafruit_ST7735.h	41;"	d
ST7735_TFTHEIGHT	TFT/src/utility/Adafruit_ST7735.h	38;"	d
ST7735_TFTWIDTH	TFT/src/utility/Adafruit_ST7735.h	37;"	d
ST7735_VMCTR1	TFT/src/utility/Adafruit_ST7735.h	74;"	d
ST7735_WHITE	TFT/src/utility/Adafruit_ST7735.h	94;"	d
ST7735_YELLOW	TFT/src/utility/Adafruit_ST7735.h	93;"	d
START_SYSEX	Firmata/Firmata.h	61;"	d
STATE_DHCP_DISCOVER	Ethernet/src/Dhcp.h	11;"	d
STATE_DHCP_LEASED	Ethernet/src/Dhcp.h	13;"	d
STATE_DHCP_RELEASE	Ethernet/src/Dhcp.h	15;"	d
STATE_DHCP_REQUEST	Ethernet/src/Dhcp.h	12;"	d
STATE_DHCP_REREQUEST	Ethernet/src/Dhcp.h	14;"	d
STATE_DHCP_START	Ethernet/src/Dhcp.h	10;"	d
STATE_IDLE	Robot_IR_Remote/src/IRremoteInt.h	176;"	d
STATE_MARK	Robot_IR_Remote/src/IRremoteInt.h	177;"	d
STATE_SPACE	Robot_IR_Remote/src/IRremoteInt.h	178;"	d
STATE_STOP	Robot_IR_Remote/src/IRremoteInt.h	179;"	d
STATIC_NOINLINE	Robot_Control/src/SdCard.cpp	41;"	d	file:
STEPPER	Firmata/Firmata.h	116;"	d
STEPPER_DATA	Firmata/Firmata.h	70;"	d
STOP_TRAN_TOKEN	SD/src/utility/SdInfo.h	/^uint8_t const STOP_TRAN_TOKEN = 0XFD;$/;"	v
STRING_DATA	Firmata/Firmata.h	69;"	d
STRING_LANGUAGE	arduino/USBCore.cpp	/^const u16 STRING_LANGUAGE[2] = {$/;"	v
SUCCESS	Ethernet/src/Dns.cpp	45;"	d	file:
SW_SERIAL0	Firmata/utility/SerialFirmata.h	42;"	d
SW_SERIAL1	Firmata/utility/SerialFirmata.h	43;"	d
SW_SERIAL2	Firmata/utility/SerialFirmata.h	44;"	d
SW_SERIAL3	Firmata/utility/SerialFirmata.h	45;"	d
SYNRECV	Ethernet/src/utility/w5100.h	/^  static const uint8_t SYNRECV     = 0x16;$/;"	m	class:SnSR
SYNSENT	Ethernet/src/utility/w5100.h	/^  static const uint8_t SYNSENT     = 0x15;$/;"	m	class:SnSR
SYSCLOCK	Robot_IR_Remote/src/IRremoteInt.h	73;"	d
SYSCLOCK	Robot_IR_Remote/src/IRremoteInt.h	75;"	d
SYSEX_I2C_REPLY	Firmata/Firmata.h	91;"	d
SYSEX_I2C_REQUEST	Firmata/Firmata.h	90;"	d
SYSEX_NON_REALTIME	Firmata/Firmata.h	86;"	d
SYSEX_REALTIME	Firmata/Firmata.h	87;"	d
SYSEX_SAMPLING_INTERVAL	Firmata/Firmata.h	92;"	d
SYSTEM_RESET	Firmata/Firmata.h	59;"	d
Sd2Card	SD/src/utility/Sd2Card.h	/^  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}$/;"	f	class:Sd2Card
Sd2Card	SD/src/utility/Sd2Card.h	/^class Sd2Card {$/;"	c
Sd2Card_h	SD/src/utility/Sd2Card.h	21;"	d
Sd2PinMap_h	SD/src/utility/Sd2PinMap.h	23;"	d
Sd2PinMap_h	SD/src/utility/Sd2PinMap.h	38;"	d
SdCard	Robot_Control/src/SdCard.h	/^class SdCard  {$/;"	c
SdCard_h	Robot_Control/src/SdCard.h	21;"	d
SdFatUtil_h	SD/src/utility/SdFatUtil.h	21;"	d
SdFat_h	SD/src/utility/SdFat.h	21;"	d
SdFile	SD/src/utility/SdFat.h	/^  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}$/;"	f	class:SdFile
SdFile	SD/src/utility/SdFat.h	/^class SdFile : public Print {$/;"	c
SdInfo_h	Robot_Control/src/SdInfo.h	21;"	d
SdInfo_h	SD/src/utility/SdInfo.h	21;"	d
SdVolume	SD/src/utility/SdFat.h	/^  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}$/;"	f	class:SdVolume
SdVolume	SD/src/utility/SdFat.h	/^class SdVolume {$/;"	c
Send8	arduino/USBCore.cpp	/^static inline void Send8(u8 d)$/;"	f	file:
SendConfiguration	arduino/USBCore.cpp	/^bool SendConfiguration(int maxlen)$/;"	f	file:
SendControl	arduino/USBCore.cpp	/^bool SendControl(u8 d)$/;"	f	file:
SendDescriptor	arduino/USBCore.cpp	/^bool SendDescriptor(USBSetup& setup)$/;"	f	file:
SendInterfaces	arduino/USBCore.cpp	/^static u8 SendInterfaces()$/;"	f	file:
SendReport	HID/src/HID.cpp	/^int HID_::SendReport(uint8_t id, const void* data, int len)$/;"	f	class:HID_
Serial	arduino/CDC.cpp	/^Serial_ Serial;$/;"	v
Serial	arduino/HardwareSerial0.cpp	/^  HardwareSerial Serial(&UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0);$/;"	v
Serial	arduino/HardwareSerial0.cpp	/^  HardwareSerial Serial(&UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR);$/;"	v
Serial0_available	arduino/HardwareSerial0.cpp	/^bool Serial0_available() {$/;"	f
Serial1	arduino/HardwareSerial1.cpp	/^HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);$/;"	v
Serial1_available	arduino/HardwareSerial1.cpp	/^bool Serial1_available() {$/;"	f
Serial2	arduino/HardwareSerial2.cpp	/^HardwareSerial Serial2(&UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2);$/;"	v
Serial2_available	arduino/HardwareSerial2.cpp	/^bool Serial2_available() {$/;"	f
Serial3	arduino/HardwareSerial3.cpp	/^HardwareSerial Serial3(&UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3);$/;"	v
Serial3_available	arduino/HardwareSerial3.cpp	/^bool Serial3_available() {$/;"	f
SerialFirmata	Firmata/utility/SerialFirmata.cpp	/^SerialFirmata::SerialFirmata()$/;"	f	class:SerialFirmata
SerialFirmata	Firmata/utility/SerialFirmata.h	/^class SerialFirmata: public FirmataFeature$/;"	c
SerialFirmata_h	Firmata/utility/SerialFirmata.h	22;"	d
SerialPrint_P	Robot_Control/src/Fat16util.h	/^static NOINLINE void SerialPrint_P(PGM_P str) {$/;"	f
SerialPrint_P	SD/src/utility/SdFatUtil.h	/^static NOINLINE void SerialPrint_P(PGM_P str) {$/;"	f
SerialPrintln_P	Robot_Control/src/Fat16util.h	/^static NOINLINE void SerialPrintln_P(PGM_P str) {$/;"	f
SerialPrintln_P	SD/src/utility/SdFatUtil.h	/^static NOINLINE void SerialPrintln_P(PGM_P str) {$/;"	f
Serial_	arduino/USBAPI.h	/^	Serial_() { peek_buffer = -1; };$/;"	f	class:Serial_
Serial_	arduino/USBAPI.h	/^class Serial_ : public Stream$/;"	c
Server	arduino/Server.h	/^class Server : public Print {$/;"	c
Servo	Servo/src/Servo.h	/^class Servo$/;"	c
Servo	Servo/src/avr/Servo.cpp	/^Servo::Servo()$/;"	f	class:Servo
Servo	Servo/src/sam/Servo.cpp	/^Servo::Servo()$/;"	f	class:Servo
Servo	Servo/src/samd/Servo.cpp	/^Servo::Servo()$/;"	f	class:Servo
ServoCount	Servo/src/avr/Servo.cpp	/^uint8_t ServoCount = 0;                                     \/\/ the total number of attached servos$/;"	v
ServoCount	Servo/src/sam/Servo.cpp	/^uint8_t ServoCount = 0;                                     \/\/ the total number of attached servos$/;"	v
ServoCount	Servo/src/samd/Servo.cpp	/^uint8_t ServoCount = 0;                                    \/\/ the total number of attached servos$/;"	v
ServoPin_t	Servo/src/Servo.h	/^} ServoPin_t   ;  $/;"	t	typeref:struct:__anon33
Servo_Handler	Servo/src/sam/Servo.cpp	/^void Servo_Handler(timer16_Sequence_t timer, Tc *tc, uint8_t channel)$/;"	f
Servo_Handler	Servo/src/samd/Servo.cpp	/^void Servo_Handler(timer16_Sequence_t timer, Tc *tc, uint8_t channel, uint8_t intFlag)$/;"	f
Servo_VERSION	Servo/src/Servo.h	72;"	d
Servo_h	Servo/src/Servo.h	49;"	d
SetEP	arduino/USBCore.cpp	/^static inline void SetEP(u8 ep)$/;"	f	file:
SnIR	Ethernet/src/utility/w5100.h	/^class SnIR {$/;"	c
SnMR	Ethernet/src/utility/w5100.h	/^class SnMR {$/;"	c
SnSR	Ethernet/src/utility/w5100.h	/^class SnSR {$/;"	c
SockCMD	Ethernet/src/utility/w5100.h	/^enum SockCMD {$/;"	g
Sock_CLOSE	Ethernet/src/utility/w5100.h	/^  Sock_CLOSE     = 0x10,$/;"	e	enum:SockCMD
Sock_CONNECT	Ethernet/src/utility/w5100.h	/^  Sock_CONNECT   = 0x04,$/;"	e	enum:SockCMD
Sock_DISCON	Ethernet/src/utility/w5100.h	/^  Sock_DISCON    = 0x08,$/;"	e	enum:SockCMD
Sock_LISTEN	Ethernet/src/utility/w5100.h	/^  Sock_LISTEN    = 0x02,$/;"	e	enum:SockCMD
Sock_OPEN	Ethernet/src/utility/w5100.h	/^  Sock_OPEN      = 0x01,$/;"	e	enum:SockCMD
Sock_RECV	Ethernet/src/utility/w5100.h	/^  Sock_RECV      = 0x40$/;"	e	enum:SockCMD
Sock_SEND	Ethernet/src/utility/w5100.h	/^  Sock_SEND      = 0x20,$/;"	e	enum:SockCMD
Sock_SEND_KEEP	Ethernet/src/utility/w5100.h	/^  Sock_SEND_KEEP = 0x22,$/;"	e	enum:SockCMD
Sock_SEND_MAC	Ethernet/src/utility/w5100.h	/^  Sock_SEND_MAC  = 0x21,$/;"	e	enum:SockCMD
SoftwareSerial	SoftwareSerial/src/SoftwareSerial.cpp	/^SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic \/* = false *\/) : $/;"	f	class:SoftwareSerial
SoftwareSerial	SoftwareSerial/src/SoftwareSerial.h	/^class SoftwareSerial : public Stream$/;"	c
SoftwareSerial_h	SoftwareSerial/src/SoftwareSerial.h	33;"	d
Squawk	Robot_Control/src/Squawk.cpp	/^SquawkSynth Squawk;$/;"	v
SquawkSD	Robot_Control/src/SquawkSD.cpp	/^SquawkSynthSD SquawkSD;$/;"	v
SquawkStream	Robot_Control/src/Squawk.h	/^class SquawkStream {$/;"	c
SquawkSynth	Robot_Control/src/Squawk.h	/^  SquawkSynth() {};$/;"	f	class:SquawkSynth
SquawkSynth	Robot_Control/src/Squawk.h	/^class SquawkSynth {$/;"	c
SquawkSynthSD	Robot_Control/src/SquawkSD.h	/^class SquawkSynthSD : public SquawkSynth {$/;"	c
Stall	arduino/USBCore.cpp	/^static inline void Stall()$/;"	f	file:
Stalled	arduino/USBCore.cpp	/^static inline u8 Stalled()$/;"	f	file:
Stepper	Stepper/src/Stepper.cpp	/^Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2)$/;"	f	class:Stepper
Stepper	Stepper/src/Stepper.cpp	/^Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,$/;"	f	class:Stepper
Stepper	Stepper/src/Stepper.h	/^class Stepper {$/;"	c
Stepper_h	Stepper/src/Stepper.h	80;"	d
Stream	arduino/Stream.h	/^    Stream() {_timeout=1000;}$/;"	f	class:Stream
Stream	arduino/Stream.h	/^class Stream : public Print$/;"	c
StreamFile	Robot_Control/src/SquawkSD.cpp	/^		StreamFile(Fat16 file = Fat16()) { f = file; }$/;"	f	class:StreamFile
StreamFile	Robot_Control/src/SquawkSD.cpp	/^class StreamFile : public SquawkStream {$/;"	c	file:
StreamROM	Robot_Control/src/Squawk.cpp	/^    StreamROM(const uint8_t *p_rom = NULL) { p_start = p_cursor = (uint8_t*)p_rom; }$/;"	f	class:StreamROM
StreamROM	Robot_Control/src/Squawk.cpp	/^class StreamROM : public SquawkStream {$/;"	c	file:
Stream_h	arduino/Stream.h	23;"	d
String	arduino/WString.cpp	/^String::String(String &&rval)$/;"	f	class:String
String	arduino/WString.cpp	/^String::String(StringSumHelper &&rval)$/;"	f	class:String
String	arduino/WString.cpp	/^String::String(char c)$/;"	f	class:String
String	arduino/WString.cpp	/^String::String(const String &value)$/;"	f	class:String
String	arduino/WString.cpp	/^String::String(const __FlashStringHelper *pstr)$/;"	f	class:String
String	arduino/WString.cpp	/^String::String(const char *cstr)$/;"	f	class:String
String	arduino/WString.cpp	/^String::String(double value, unsigned char decimalPlaces)$/;"	f	class:String
String	arduino/WString.cpp	/^String::String(float value, unsigned char decimalPlaces)$/;"	f	class:String
String	arduino/WString.cpp	/^String::String(int value, unsigned char base)$/;"	f	class:String
String	arduino/WString.cpp	/^String::String(long value, unsigned char base)$/;"	f	class:String
String	arduino/WString.cpp	/^String::String(unsigned char value, unsigned char base)$/;"	f	class:String
String	arduino/WString.cpp	/^String::String(unsigned int value, unsigned char base)$/;"	f	class:String
String	arduino/WString.cpp	/^String::String(unsigned long value, unsigned char base)$/;"	f	class:String
String	arduino/WString.h	/^class String$/;"	c
StringIfHelper	arduino/WString.h	/^	void StringIfHelper() const {}$/;"	f	class:String
StringSumHelper	arduino/WString.h	/^	StringSumHelper(char c) : String(c) {}$/;"	f	class:StringSumHelper
StringSumHelper	arduino/WString.h	/^	StringSumHelper(const String &s) : String(s) {}$/;"	f	class:StringSumHelper
StringSumHelper	arduino/WString.h	/^	StringSumHelper(const char *p) : String(p) {}$/;"	f	class:StringSumHelper
StringSumHelper	arduino/WString.h	/^	StringSumHelper(double num) : String(num) {}$/;"	f	class:StringSumHelper
StringSumHelper	arduino/WString.h	/^	StringSumHelper(float num) : String(num) {}$/;"	f	class:StringSumHelper
StringSumHelper	arduino/WString.h	/^	StringSumHelper(int num) : String(num) {}$/;"	f	class:StringSumHelper
StringSumHelper	arduino/WString.h	/^	StringSumHelper(long num) : String(num) {}$/;"	f	class:StringSumHelper
StringSumHelper	arduino/WString.h	/^	StringSumHelper(unsigned char num) : String(num) {}$/;"	f	class:StringSumHelper
StringSumHelper	arduino/WString.h	/^	StringSumHelper(unsigned int num) : String(num) {}$/;"	f	class:StringSumHelper
StringSumHelper	arduino/WString.h	/^	StringSumHelper(unsigned long num) : String(num) {}$/;"	f	class:StringSumHelper
StringSumHelper	arduino/WString.h	/^class StringSumHelper : public String$/;"	c
String_class_h	arduino/WString.h	23;"	d
TALKING	GSM/src/GSM3MobileVoiceProvider.h	/^enum GSM3_voiceCall_st { IDLE_CALL, CALLING, RECEIVINGCALL, TALKING};$/;"	e	enum:GSM3_voiceCall_st
TCCR2A	arduino/Tone.cpp	43;"	d	file:
TCCR2B	arduino/Tone.cpp	44;"	d	file:
TCP	Ethernet/src/utility/w5100.h	/^  static const uint8_t TCP    = 0x01;$/;"	m	class:SnMR
TCP	Ethernet/src/utility/w5100.h	/^  static const uint8_t TCP  = 6;$/;"	m	class:IPPROTO
TC_FOR_TIMER1	Servo/src/sam/ServoTimers.h	52;"	d
TC_FOR_TIMER1	Servo/src/samd/ServoTimers.h	41;"	d
TC_FOR_TIMER2	Servo/src/sam/ServoTimers.h	59;"	d
TC_FOR_TIMER2	Servo/src/samd/ServoTimers.h	52;"	d
TC_FOR_TIMER3	Servo/src/sam/ServoTimers.h	66;"	d
TC_FOR_TIMER4	Servo/src/sam/ServoTimers.h	73;"	d
TC_FOR_TIMER5	Servo/src/sam/ServoTimers.h	80;"	d
TEST_MODE	arduino/USBCore.h	82;"	d
TFT	TFT/src/TFT.cpp	/^TFT::TFT(uint8_t CS, uint8_t RS, uint8_t RST) $/;"	f	class:TFT
TFT	TFT/src/TFT.h	/^class TFT : public Adafruit_ST7735 {$/;"	c
TICKS_HIGH	Robot_IR_Remote/src/IRremoteInt.h	173;"	d
TICKS_LOW	Robot_IR_Remote/src/IRremoteInt.h	172;"	d
TIMED_OUT	Ethernet/src/Dns.cpp	46;"	d	file:
TIMEOUT	Ethernet/src/utility/w5100.h	/^  static const uint8_t TIMEOUT = 0x08;$/;"	m	class:SnIR
TIMER0A	arduino/Arduino.h	205;"	d
TIMER0B	arduino/Arduino.h	206;"	d
TIMER1A	arduino/Arduino.h	207;"	d
TIMER1B	arduino/Arduino.h	208;"	d
TIMER1C	arduino/Arduino.h	209;"	d
TIMER2	arduino/Arduino.h	210;"	d
TIMER2A	arduino/Arduino.h	211;"	d
TIMER2B	arduino/Arduino.h	212;"	d
TIMER2_COMPA_vect	arduino/Tone.cpp	50;"	d	file:
TIMER3A	arduino/Arduino.h	214;"	d
TIMER3B	arduino/Arduino.h	215;"	d
TIMER3C	arduino/Arduino.h	216;"	d
TIMER4A	arduino/Arduino.h	217;"	d
TIMER4B	arduino/Arduino.h	218;"	d
TIMER4C	arduino/Arduino.h	219;"	d
TIMER4D	arduino/Arduino.h	220;"	d
TIMER5A	arduino/Arduino.h	221;"	d
TIMER5B	arduino/Arduino.h	222;"	d
TIMER5C	arduino/Arduino.h	223;"	d
TIMER_CONFIG_KHZ	Robot_IR_Remote/src/IRremoteInt.h	221;"	d
TIMER_CONFIG_KHZ	Robot_IR_Remote/src/IRremoteInt.h	268;"	d
TIMER_CONFIG_KHZ	Robot_IR_Remote/src/IRremoteInt.h	300;"	d
TIMER_CONFIG_KHZ	Robot_IR_Remote/src/IRremoteInt.h	330;"	d
TIMER_CONFIG_KHZ	Robot_IR_Remote/src/IRremoteInt.h	370;"	d
TIMER_CONFIG_KHZ	Robot_IR_Remote/src/IRremoteInt.h	400;"	d
TIMER_CONFIG_NORMAL	Robot_IR_Remote/src/IRremoteInt.h	230;"	d
TIMER_CONFIG_NORMAL	Robot_IR_Remote/src/IRremoteInt.h	237;"	d
TIMER_CONFIG_NORMAL	Robot_IR_Remote/src/IRremoteInt.h	275;"	d
TIMER_CONFIG_NORMAL	Robot_IR_Remote/src/IRremoteInt.h	307;"	d
TIMER_CONFIG_NORMAL	Robot_IR_Remote/src/IRremoteInt.h	342;"	d
TIMER_CONFIG_NORMAL	Robot_IR_Remote/src/IRremoteInt.h	377;"	d
TIMER_CONFIG_NORMAL	Robot_IR_Remote/src/IRremoteInt.h	407;"	d
TIMER_COUNT_TOP	Robot_IR_Remote/src/IRremoteInt.h	228;"	d
TIMER_DISABLE_INTR	Robot_IR_Remote/src/IRremoteInt.h	219;"	d
TIMER_DISABLE_INTR	Robot_IR_Remote/src/IRremoteInt.h	262;"	d
TIMER_DISABLE_INTR	Robot_IR_Remote/src/IRremoteInt.h	265;"	d
TIMER_DISABLE_INTR	Robot_IR_Remote/src/IRremoteInt.h	298;"	d
TIMER_DISABLE_INTR	Robot_IR_Remote/src/IRremoteInt.h	328;"	d
TIMER_DISABLE_INTR	Robot_IR_Remote/src/IRremoteInt.h	368;"	d
TIMER_DISABLE_INTR	Robot_IR_Remote/src/IRremoteInt.h	398;"	d
TIMER_DISABLE_PWM	Robot_IR_Remote/src/IRremoteInt.h	217;"	d
TIMER_DISABLE_PWM	Robot_IR_Remote/src/IRremoteInt.h	259;"	d
TIMER_DISABLE_PWM	Robot_IR_Remote/src/IRremoteInt.h	296;"	d
TIMER_DISABLE_PWM	Robot_IR_Remote/src/IRremoteInt.h	326;"	d
TIMER_DISABLE_PWM	Robot_IR_Remote/src/IRremoteInt.h	366;"	d
TIMER_DISABLE_PWM	Robot_IR_Remote/src/IRremoteInt.h	396;"	d
TIMER_ENABLE_INTR	Robot_IR_Remote/src/IRremoteInt.h	218;"	d
TIMER_ENABLE_INTR	Robot_IR_Remote/src/IRremoteInt.h	261;"	d
TIMER_ENABLE_INTR	Robot_IR_Remote/src/IRremoteInt.h	264;"	d
TIMER_ENABLE_INTR	Robot_IR_Remote/src/IRremoteInt.h	297;"	d
TIMER_ENABLE_INTR	Robot_IR_Remote/src/IRremoteInt.h	327;"	d
TIMER_ENABLE_INTR	Robot_IR_Remote/src/IRremoteInt.h	367;"	d
TIMER_ENABLE_INTR	Robot_IR_Remote/src/IRremoteInt.h	397;"	d
TIMER_ENABLE_PWM	Robot_IR_Remote/src/IRremoteInt.h	216;"	d
TIMER_ENABLE_PWM	Robot_IR_Remote/src/IRremoteInt.h	258;"	d
TIMER_ENABLE_PWM	Robot_IR_Remote/src/IRremoteInt.h	295;"	d
TIMER_ENABLE_PWM	Robot_IR_Remote/src/IRremoteInt.h	325;"	d
TIMER_ENABLE_PWM	Robot_IR_Remote/src/IRremoteInt.h	365;"	d
TIMER_ENABLE_PWM	Robot_IR_Remote/src/IRremoteInt.h	395;"	d
TIMER_INTR_NAME	Robot_IR_Remote/src/IRremoteInt.h	220;"	d
TIMER_INTR_NAME	Robot_IR_Remote/src/IRremoteInt.h	267;"	d
TIMER_INTR_NAME	Robot_IR_Remote/src/IRremoteInt.h	299;"	d
TIMER_INTR_NAME	Robot_IR_Remote/src/IRremoteInt.h	329;"	d
TIMER_INTR_NAME	Robot_IR_Remote/src/IRremoteInt.h	369;"	d
TIMER_INTR_NAME	Robot_IR_Remote/src/IRremoteInt.h	399;"	d
TIMER_PWM_PIN	Robot_IR_Remote/src/IRremoteInt.h	245;"	d
TIMER_PWM_PIN	Robot_IR_Remote/src/IRremoteInt.h	247;"	d
TIMER_PWM_PIN	Robot_IR_Remote/src/IRremoteInt.h	249;"	d
TIMER_PWM_PIN	Robot_IR_Remote/src/IRremoteInt.h	251;"	d
TIMER_PWM_PIN	Robot_IR_Remote/src/IRremoteInt.h	282;"	d
TIMER_PWM_PIN	Robot_IR_Remote/src/IRremoteInt.h	284;"	d
TIMER_PWM_PIN	Robot_IR_Remote/src/IRremoteInt.h	286;"	d
TIMER_PWM_PIN	Robot_IR_Remote/src/IRremoteInt.h	288;"	d
TIMER_PWM_PIN	Robot_IR_Remote/src/IRremoteInt.h	314;"	d
TIMER_PWM_PIN	Robot_IR_Remote/src/IRremoteInt.h	316;"	d
TIMER_PWM_PIN	Robot_IR_Remote/src/IRremoteInt.h	354;"	d
TIMER_PWM_PIN	Robot_IR_Remote/src/IRremoteInt.h	356;"	d
TIMER_PWM_PIN	Robot_IR_Remote/src/IRremoteInt.h	384;"	d
TIMER_PWM_PIN	Robot_IR_Remote/src/IRremoteInt.h	386;"	d
TIMER_PWM_PIN	Robot_IR_Remote/src/IRremoteInt.h	414;"	d
TIMER_PWM_PIN	Robot_IR_Remote/src/IRremoteInt.h	416;"	d
TIMER_RESET	Robot_IR_Remote/src/IRremoteInt.h	215;"	d
TIMER_RESET	Robot_IR_Remote/src/IRremoteInt.h	257;"	d
TIMER_RESET	Robot_IR_Remote/src/IRremoteInt.h	294;"	d
TIMER_RESET	Robot_IR_Remote/src/IRremoteInt.h	324;"	d
TIMER_RESET	Robot_IR_Remote/src/IRremoteInt.h	364;"	d
TIMER_RESET	Robot_IR_Remote/src/IRremoteInt.h	394;"	d
TIME_WAIT	Ethernet/src/utility/w5100.h	/^  static const uint8_t TIME_WAIT   = 0x1B;$/;"	m	class:SnSR
TIMSK1	arduino/Tone.cpp	51;"	d	file:
TIMSK2	arduino/Tone.cpp	48;"	d	file:
TK0	Robot_Control/src/ArduinoRobot.h	97;"	d
TK1	Robot_Control/src/ArduinoRobot.h	98;"	d
TK2	Robot_Control/src/ArduinoRobot.h	99;"	d
TK3	Robot_Control/src/ArduinoRobot.h	100;"	d
TK4	Robot_Control/src/ArduinoRobot.h	101;"	d
TK5	Robot_Control/src/ArduinoRobot.h	102;"	d
TK6	Robot_Control/src/ArduinoRobot.h	103;"	d
TK7	Robot_Control/src/ArduinoRobot.h	104;"	d
TOBYTES	arduino/USBCore.h	112;"	d
TOLERANCE	Robot_IR_Remote/src/IRremoteInt.h	165;"	d
TOPBIT	Robot_IR_Remote/src/IRremoteInt.h	199;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	147;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	150;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	184;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	201;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	225;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	248;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	267;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	288;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	308;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	328;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	349;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	378;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	401;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	424;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	444;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	464;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	484;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	500;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	516;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	532;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	551;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	569;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	587;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	605;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	623;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	641;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	659;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	677;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	697;"	d
TOTAL_ANALOG_PINS	Firmata/Boards.h	717;"	d
TOTAL_PINS	Firmata/Boards.h	148;"	d
TOTAL_PINS	Firmata/Boards.h	151;"	d
TOTAL_PINS	Firmata/Boards.h	185;"	d
TOTAL_PINS	Firmata/Boards.h	202;"	d
TOTAL_PINS	Firmata/Boards.h	226;"	d
TOTAL_PINS	Firmata/Boards.h	249;"	d
TOTAL_PINS	Firmata/Boards.h	268;"	d
TOTAL_PINS	Firmata/Boards.h	289;"	d
TOTAL_PINS	Firmata/Boards.h	309;"	d
TOTAL_PINS	Firmata/Boards.h	329;"	d
TOTAL_PINS	Firmata/Boards.h	350;"	d
TOTAL_PINS	Firmata/Boards.h	379;"	d
TOTAL_PINS	Firmata/Boards.h	402;"	d
TOTAL_PINS	Firmata/Boards.h	425;"	d
TOTAL_PINS	Firmata/Boards.h	445;"	d
TOTAL_PINS	Firmata/Boards.h	465;"	d
TOTAL_PINS	Firmata/Boards.h	485;"	d
TOTAL_PINS	Firmata/Boards.h	501;"	d
TOTAL_PINS	Firmata/Boards.h	517;"	d
TOTAL_PINS	Firmata/Boards.h	533;"	d
TOTAL_PINS	Firmata/Boards.h	552;"	d
TOTAL_PINS	Firmata/Boards.h	570;"	d
TOTAL_PINS	Firmata/Boards.h	588;"	d
TOTAL_PINS	Firmata/Boards.h	606;"	d
TOTAL_PINS	Firmata/Boards.h	624;"	d
TOTAL_PINS	Firmata/Boards.h	642;"	d
TOTAL_PINS	Firmata/Boards.h	660;"	d
TOTAL_PINS	Firmata/Boards.h	678;"	d
TOTAL_PINS	Firmata/Boards.h	698;"	d
TOTAL_PINS	Firmata/Boards.h	718;"	d
TOTAL_PIN_MODES	Firmata/Firmata.h	108;"	d
TOTAL_PORTS	Firmata/Boards.h	269;"	d
TOTAL_PORTS	Firmata/Boards.h	831;"	d
TRANSFER_PGM	arduino/USBAPI.h	190;"	d
TRANSFER_RELEASE	arduino/USBAPI.h	191;"	d
TRANSFER_ZERO	arduino/USBAPI.h	192;"	d
TRANSPARENT_CONNECTED	GSM/src/GSM3MobileAccessProvider.h	/^enum GSM3_NetworkStatus_t { ERROR, IDLE, CONNECTING, GSM_READY, GPRS_READY, TRANSPARENT_CONNECTED, OFF};$/;"	e	enum:GSM3_NetworkStatus_t
TRIM_DURATION	Servo/src/avr/Servo.cpp	31;"	d	file:
TRIM_DURATION	Servo/src/sam/Servo.cpp	27;"	d	file:
TRIM_DURATION	Servo/src/samd/Servo.cpp	27;"	d	file:
TRUNCATED	Ethernet/src/Dns.cpp	48;"	d	file:
TRUNCATION_FLAG	Ethernet/src/Dns.cpp	28;"	d	file:
TTL_SIZE	Ethernet/src/Dns.cpp	19;"	d	file:
TWI_BUFFER_LENGTH	Wire/src/utility/twi.h	32;"	d
TWI_FREQ	Wire/src/utility/twi.h	28;"	d
TWI_MRX	Wire/src/utility/twi.h	36;"	d
TWI_MTX	Wire/src/utility/twi.h	37;"	d
TWI_READY	Wire/src/utility/twi.h	35;"	d
TWI_SRX	Wire/src/utility/twi.h	38;"	d
TWI_STX	Wire/src/utility/twi.h	39;"	d
TWO_PI	arduino/Arduino.h	49;"	d
TWO_STOP_BITS	arduino/USBAPI.h	/^		TWO_STOP_BITS = 2,$/;"	e	enum:Serial_::__anon10
TXBUF_BASE	Ethernet/src/utility/w5100.cpp	22;"	d	file:
TXC0	arduino/HardwareSerial_private.h	43;"	d
TXC0	arduino/HardwareSerial_private.h	53;"	d
TXEN0	arduino/HardwareSerial_private.h	45;"	d
TXEN0	arduino/HardwareSerial_private.h	55;"	d
TX_BUF	Ethernet/src/utility/w5100.cpp	19;"	d	file:
TX_RX_LED_PULSE_MS	arduino/USBCore.cpp	27;"	d	file:
TX_RX_MAX_BUF_SIZE	Ethernet/src/utility/w5100.cpp	18;"	d	file:
TYPE_A	Ethernet/src/Dns.cpp	38;"	d	file:
TYPE_BOTTOM_TK	Robot_Control/src/ArduinoRobot.h	94;"	d
TYPE_TOP_TK	Robot_Control/src/ArduinoRobot.h	92;"	d
TYPE_TOP_TKD	Robot_Control/src/ArduinoRobot.h	93;"	d
T_ACCESS	Robot_Control/src/Fat16.h	/^uint8_t const T_ACCESS = 1;$/;"	v
T_ACCESS	SD/src/utility/SdFat.h	/^uint8_t const T_ACCESS = 1;$/;"	v
T_CREATE	Robot_Control/src/Fat16.h	/^uint8_t const T_CREATE = 2;$/;"	v
T_CREATE	SD/src/utility/SdFat.h	/^uint8_t const T_CREATE = 2;$/;"	v
T_WRITE	Robot_Control/src/Fat16.h	/^uint8_t const T_WRITE  = 4;$/;"	v
T_WRITE	SD/src/utility/SdFat.h	/^uint8_t const T_WRITE = 4;$/;"	v
TextManager	Robot_Control/src/utility/RobotTextManager.h	/^class TextManager{$/;"	c
Timer1Service	Servo/src/avr/Servo.cpp	/^void Timer1Service()$/;"	f
Timer3Service	Servo/src/avr/Servo.cpp	/^void Timer3Service()$/;"	f
TwoWire	Wire/src/Wire.cpp	/^TwoWire::TwoWire()$/;"	f	class:TwoWire
TwoWire	Wire/src/Wire.h	/^class TwoWire : public Stream$/;"	c
TwoWire_h	Wire/src/Wire.h	23;"	d
TxLEDPulse	arduino/USBCore.cpp	/^volatile u8 TxLEDPulse; \/**< Milliseconds remaining for data Tx LED pulse *\/$/;"	v
U2X0	arduino/HardwareSerial_private.h	48;"	d
U2X0	arduino/HardwareSerial_private.h	58;"	d
UDP	Ethernet/src/utility/w5100.h	/^  static const uint8_t UDP         = 0x22;$/;"	m	class:SnSR
UDP	Ethernet/src/utility/w5100.h	/^  static const uint8_t UDP    = 0x02;$/;"	m	class:SnMR
UDP	Ethernet/src/utility/w5100.h	/^  static const uint8_t UDP  = 17;$/;"	m	class:IPPROTO
UDP	arduino/Udp.h	/^class UDP : public Stream {$/;"	c
UDP_HEADER_SIZE	Ethernet/src/Dns.cpp	17;"	d	file:
UDP_TX_PACKET_MAX_SIZE	Ethernet/src/EthernetUdp.h	42;"	d
UDRE0	arduino/HardwareSerial_private.h	50;"	d
UDRE0	arduino/HardwareSerial_private.h	60;"	d
UDRIE0	arduino/HardwareSerial_private.h	47;"	d
UDRIE0	arduino/HardwareSerial_private.h	57;"	d
UMPROVIDERS	GSM/src/GSM3ShieldV1ModemCore.h	43;"	d
UMProvider	GSM/src/GSM3ShieldV1ModemCore.h	/^		GSM3ShieldV1BaseProvider* UMProvider[UMPROVIDERS];$/;"	m	class:GSM3ShieldV1ModemCore
UNDEFINED	GSM/src/GSM3ShieldV1BandManagement.h	/^typedef enum GSM3GSMBand {UNDEFINED, EGSM_MODE, DCS_MODE, PCS_MODE, EGSM_DCS_MODE, GSM850_PCS_MODE, GSM850_EGSM_DCS_PCS_MODE};$/;"	e	enum:GSM3GSMBand
UNKNOWN	Robot_IR_Remote/src/IRremote.h	48;"	d
UNUSEDOK	SD/src/utility/SdFatUtil.h	36;"	d
UPE	arduino/HardwareSerial_private.h	40;"	d
UPE0	arduino/HardwareSerial_private.h	49;"	d
UPE0	arduino/HardwareSerial_private.h	59;"	d
USBConnected	arduino/USBCore.cpp	/^u8 USBConnected()$/;"	f
USBDevice	arduino/USBCore.cpp	/^USBDevice_ USBDevice;$/;"	v
USBDevice_	arduino/USBAPI.h	/^class USBDevice_$/;"	c
USBDevice_	arduino/USBCore.cpp	/^USBDevice_::USBDevice_()$/;"	f	class:USBDevice_
USBGetConfiguration	arduino/USBCore.cpp	/^u8 USBGetConfiguration(void)$/;"	f
USBSetup	arduino/USBAPI.h	/^} USBSetup;$/;"	t	typeref:struct:__anon12
USB_Available	arduino/USBCore.cpp	/^u8 USB_Available(u8 ep)$/;"	f
USB_CONFIGUARTION_DESC_SIZE	arduino/USBCore.h	69;"	d
USB_CONFIGURATION_DESCRIPTOR_TYPE	arduino/USBCore.h	74;"	d
USB_CONFIG_BUS_POWERED	arduino/USBCore.h	94;"	d
USB_CONFIG_POWERED_MASK	arduino/USBCore.h	93;"	d
USB_CONFIG_POWER_MA	arduino/USBCore.h	99;"	d
USB_CONFIG_REMOTE_WAKEUP	arduino/USBCore.h	96;"	d
USB_CONFIG_SELF_POWERED	arduino/USBCore.h	95;"	d
USB_ClockDisable	arduino/USBCore.cpp	/^static inline void USB_ClockDisable()$/;"	f	file:
USB_ClockEnable	arduino/USBCore.cpp	/^static inline void USB_ClockEnable()$/;"	f	file:
USB_DEVICE_CLASS_COMMUNICATIONS	arduino/USBCore.h	88;"	d
USB_DEVICE_CLASS_HUMAN_INTERFACE	arduino/USBCore.h	89;"	d
USB_DEVICE_CLASS_STORAGE	arduino/USBCore.h	90;"	d
USB_DEVICE_CLASS_VENDOR_SPECIFIC	arduino/USBCore.h	91;"	d
USB_DEVICE_DESCRIPTOR_TYPE	arduino/USBCore.h	73;"	d
USB_DEVICE_DESC_SIZE	arduino/USBCore.h	68;"	d
USB_DeviceDescriptor	arduino/USBCore.cpp	/^const DeviceDescriptor USB_DeviceDescriptor =$/;"	v
USB_DeviceDescriptorB	arduino/USBCore.cpp	/^const DeviceDescriptor USB_DeviceDescriptorB =$/;"	v
USB_ENDPOINTS	arduino/USBDesc.h	22;"	d
USB_ENDPOINTS	arduino/USBDesc.h	24;"	d
USB_ENDPOINT_DESCRIPTOR_TYPE	arduino/USBCore.h	77;"	d
USB_ENDPOINT_DESC_SIZE	arduino/USBCore.h	71;"	d
USB_ENDPOINT_DIRECTION_MASK	arduino/USBCore.h	102;"	d
USB_ENDPOINT_IN	arduino/USBCore.h	104;"	d
USB_ENDPOINT_OUT	arduino/USBCore.h	103;"	d
USB_ENDPOINT_TYPE_BULK	arduino/USBCore.h	109;"	d
USB_ENDPOINT_TYPE_CONTROL	arduino/USBCore.h	107;"	d
USB_ENDPOINT_TYPE_INTERRUPT	arduino/USBCore.h	110;"	d
USB_ENDPOINT_TYPE_ISOCHRONOUS	arduino/USBCore.h	108;"	d
USB_ENDPOINT_TYPE_MASK	arduino/USBCore.h	106;"	d
USB_EP_SIZE	arduino/USBAPI.h	38;"	d
USB_Flush	arduino/USBCore.cpp	/^void USB_Flush(u8 ep)$/;"	f
USB_INTERFACE_DESCRIPTOR_TYPE	arduino/USBCore.h	76;"	d
USB_INTERFACE_DESC_SIZE	arduino/USBCore.h	70;"	d
USB_MANUFACTURER	arduino/USBCore.cpp	55;"	d	file:
USB_MANUFACTURER	arduino/USBCore.cpp	57;"	d	file:
USB_MANUFACTURER	arduino/USBCore.cpp	60;"	d	file:
USB_MANUFACTURER	arduino/USBCore.cpp	62;"	d	file:
USB_MANUFACTURER	arduino/USBCore.cpp	65;"	d	file:
USB_PRODUCT	arduino/USBCore.cpp	48;"	d	file:
USB_RECV_TIMEOUT	arduino/USBCore.cpp	201;"	d	file:
USB_Recv	arduino/USBCore.cpp	/^int USB_Recv(u8 ep)$/;"	f
USB_Recv	arduino/USBCore.cpp	/^int USB_Recv(u8 ep, void* d, int len)$/;"	f
USB_RecvControl	arduino/USBCore.cpp	/^int USB_RecvControl(void* d, int len)$/;"	f
USB_STRING_DESCRIPTOR_TYPE	arduino/USBCore.h	75;"	d
USB_Send	arduino/USBCore.cpp	/^int USB_Send(u8 ep, const void* d, int len)$/;"	f
USB_SendControl	arduino/USBCore.cpp	/^int USB_SendControl(u8 flags, const void* d, int len)$/;"	f
USB_SendSpace	arduino/USBCore.cpp	/^u8 USB_SendSpace(u8 ep)$/;"	f
USB_SendStringDescriptor	arduino/USBCore.cpp	/^static bool USB_SendStringDescriptor(const u8*string_P, u8 string_len, uint8_t flags) {$/;"	f	file:
USB_VERSION	arduino/USBCore.h	130;"	d
USECPERTICK	Robot_IR_Remote/src/IRremote.h	87;"	d
USERNAME	Robot_Control/src/utility/RobotTextManager.h	4;"	d
USE_SPI_LIB	SD/src/utility/Sd2Card.cpp	20;"	d	file:
USE_SPI_LIB	SD/src/utility/Sd2Card.h	38;"	d
USE_TIMER2	arduino/Tone.cpp	102;"	d	file:
USE_TIMER2	arduino/Tone.cpp	118;"	d	file:
USE_TIMER2	arduino/Tone.cpp	94;"	d	file:
USE_TIMER3	arduino/Tone.cpp	110;"	d	file:
UTIL_H	Ethernet/src/utility/util.h	2;"	d
UTOL	Robot_IR_Remote/src/IRremoteInt.h	167;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	153;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	169;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	186;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	203;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	227;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	270;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	290;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	310;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	330;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	351;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	380;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	403;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	426;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	446;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	466;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	502;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	518;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	535;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	554;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	572;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	590;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	608;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	626;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	644;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	662;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	680;"	d
VERSION_BLINK_PIN	Firmata/Boards.h	699;"	d
VIRTUAL	Robot_IR_Remote/src/IRremote.h	81;"	d
VIRTUAL	Robot_IR_Remote/src/IRremote.h	83;"	d
VIRTUAL_KEYBOARD_H	Robot_Control/src/utility/VirtualKeyboard.h	2;"	d
VOICECALL	GSM/src/GSM3ShieldV1BaseProvider.h	/^	VOICECALL, ANSWERCALL, HANGCALL, RETRIEVECALLINGNUMBER, $/;"	e	enum:GSM3_commandType_e
VOLT_BMP	Robot_Control/src/ArduinoRobot.h	59;"	d
VirtualKeyboard	Robot_Control/src/utility/VirtualKeyboard.h	/^class VirtualKeyboard{$/;"	c
Vkey	Robot_Control/src/utility/VirtualKeyboard.cpp	/^VirtualKeyboard Vkey=VirtualKeyboard();/;"	v
W5100	Ethernet/src/utility/w5100.cpp	/^W5100Class W5100;$/;"	v
W5100Class	Ethernet/src/utility/w5100.h	/^class W5100Class {$/;"	c
W5100_H_INCLUDED	Ethernet/src/utility/w5100.h	11;"	d
WAITINGANSWER	GSM/src/GSM3MobileMockupProvider.h	/^		enum GSM3_modemlinest_e { IDLE, WAITINGANSWER, SENDINGSMS};$/;"	e	enum:GSM3MobileMockupProvider::GSM3_modemlinest_e
WAIT_TC16_REGS_SYNC	Servo/src/samd/Servo.cpp	44;"	d	file:
WEAK	arduino/CDC.cpp	39;"	d	file:
WHITE	Robot_Control/src/ArduinoRobot.h	155;"	d
WIDTH	Robot_Control/src/utility/Adafruit_GFX.h	/^    WIDTH, HEIGHT;   \/\/ This is the 'raw' display w\/h - never changes$/;"	m	class:Adafruit_GFX
WIDTH	TFT/src/utility/Adafruit_GFX.h	/^	WIDTH, HEIGHT;   \/\/ this is the 'raw' display w\/h - never changes$/;"	m	class:Adafruit_GFX
WIFI_101	Firmata/examples/StandardFirmataWiFi/wifiConfig.h	36;"	d
WIFI_CLIENT_STREAM_H	Firmata/utility/WiFiClientStream.h	27;"	d
WIFI_LIB_INCLUDED	Firmata/examples/StandardFirmataWiFi/wifiConfig.h	42;"	d
WIFI_LIB_INCLUDED	Firmata/examples/StandardFirmataWiFi/wifiConfig.h	65;"	d
WIFI_LIB_INCLUDED	Firmata/examples/StandardFirmataWiFi/wifiConfig.h	93;"	d
WIFI_SERVER_STREAM_H	Firmata/utility/WiFiServerStream.h	27;"	d
WIFI_STREAM_H	Firmata/utility/WiFiStream.h	22;"	d
WIFI_WPA_SECURITY	Firmata/examples/StandardFirmataWiFi/wifiConfig.h	148;"	d
WIRE_HAS_END	Wire/src/Wire.h	31;"	d
WIZ5100_ETHERNET	Firmata/examples/StandardFirmataEthernet/ethernetConfig.h	20;"	d
WRITE_MULTIPLE_TOKEN	SD/src/utility/SdInfo.h	/^uint8_t const WRITE_MULTIPLE_TOKEN = 0XFC;$/;"	v
WaitForINOrOUT	arduino/USBCore.cpp	/^static inline u8 WaitForINOrOUT()$/;"	f	file:
WaitIN	arduino/USBCore.cpp	/^static inline void WaitIN(void)$/;"	f	file:
WaitOUT	arduino/USBCore.cpp	/^static inline void WaitOUT(void)$/;"	f	file:
WiFiClientStream	Firmata/utility/WiFiClientStream.h	/^  WiFiClientStream(IPAddress server_ip, uint16_t server_port) : WiFiStream(server_ip, server_port) {}$/;"	f	class:WiFiClientStream
WiFiClientStream	Firmata/utility/WiFiClientStream.h	/^class WiFiClientStream : public WiFiStream$/;"	c
WiFiServerStream	Firmata/utility/WiFiServerStream.h	/^  WiFiServerStream(uint16_t server_port) : WiFiStream(server_port) {}$/;"	f	class:WiFiServerStream
WiFiServerStream	Firmata/utility/WiFiServerStream.h	/^class WiFiServerStream : public WiFiStream$/;"	c
WiFiStream	Firmata/utility/WiFiStream.h	/^  WiFiStream(IPAddress server_ip, uint16_t server_port) : _remote_ip(server_ip), _port(server_port) {}$/;"	f	class:WiFiStream
WiFiStream	Firmata/utility/WiFiStream.h	/^  WiFiStream(uint16_t server_port) : _port(server_port) {}$/;"	f	class:WiFiStream
WiFiStream	Firmata/utility/WiFiStream.h	/^class WiFiStream : public Stream$/;"	c
Wire	Wire/src/Wire.cpp	/^TwoWire Wire = TwoWire();$/;"	v
WiringPrivate_h	arduino/wiring_private.h	24;"	d
XMIT_START_ADJUSTMENT	GSM/src/GSM3SoftSerial.cpp	/^const int XMIT_START_ADJUSTMENT = 4;$/;"	v
XMIT_START_ADJUSTMENT	GSM/src/GSM3SoftSerial.cpp	/^const int XMIT_START_ADJUSTMENT = 5;$/;"	v
XMIT_START_ADJUSTMENT	GSM/src/GSM3SoftSerial.cpp	/^const int XMIT_START_ADJUSTMENT = 6;$/;"	v
XON	GSM/src/GSM3ShieldV1BaseProvider.h	/^enum GSM3_commandType_e { XON, NONE, MODEMCONFIG, ALIVETEST, BEGINSMS, ENDSMS, AVAILABLESMS, FLUSHSMS,$/;"	e	enum:GSM3_commandType_e
YELLOW	Robot_Control/src/ArduinoRobot.h	154;"	d
_ADAFRUIT_GFX_H	Robot_Control/src/utility/Adafruit_GFX.h	17;"	d
_ADAFRUIT_GFX_H	TFT/src/utility/Adafruit_GFX.h	18;"	d
_ADAFRUIT_ST7735H_	TFT/src/utility/Adafruit_ST7735.h	20;"	d
_ARDUINO_LCDH_	Robot_Control/src/Arduino_LCD.h	20;"	d
_ARDUINO_TFT_H	TFT/src/TFT.h	33;"	d
_BLE_STREAM_H_	Firmata/utility/BLEStream.h	11;"	d
_B_TK1	Robot_Control/src/ArduinoRobot.h	/^	int _B_TK1;$/;"	m	struct:MOTOR_BOARD_DATA
_B_TK2	Robot_Control/src/ArduinoRobot.h	/^	int _B_TK2;$/;"	m	struct:MOTOR_BOARD_DATA
_B_TK3	Robot_Control/src/ArduinoRobot.h	/^	int _B_TK3;$/;"	m	struct:MOTOR_BOARD_DATA
_B_TK4	Robot_Control/src/ArduinoRobot.h	/^	int _B_TK4;$/;"	m	struct:MOTOR_BOARD_DATA
_DEBUG	SoftwareSerial/src/SoftwareSerial.cpp	35;"	d	file:
_DEBUG_PIN1	SoftwareSerial/src/SoftwareSerial.cpp	36;"	d	file:
_DEBUG_PIN2	SoftwareSerial/src/SoftwareSerial.cpp	37;"	d	file:
_DELAY_TABLE	GSM/src/GSM3SoftSerial.cpp	/^typedef struct _DELAY_TABLE$/;"	s	file:
_GAP	Robot_IR_Remote/src/IRremoteInt.h	169;"	d
_GSM3MOBILEACCESSPROVIDER_	GSM/src/GSM3MobileAccessProvider.h	35;"	d
_GSM3MOBILECELLMANAGEMENT_	GSM/src/GSM3MobileCellManagement.h	35;"	d
_GSM3MOBILECLIENTSERVICE_	GSM/src/GSM3MobileClientService.h	35;"	d
_GSM3MOBILEDATANETWORKPROVIDER_	GSM/src/GSM3MobileDataNetworkProvider.h	35;"	d
_GSM3MOBILEMOCKUPPROVIDER_	GSM/src/GSM3MobileMockupProvider.h	35;"	d
_GSM3MOBILENETWORKPROVIDER_	GSM/src/GSM3MobileNetworkProvider.h	35;"	d
_GSM3MOBILENETWORKREGISTRY_	GSM/src/GSM3MobileNetworkRegistry.h	35;"	d
_GSM3MOBILESERVERSERVICE_	GSM/src/GSM3MobileServerService.h	35;"	d
_GSM3MOBILESMSPROVIDER_	GSM/src/GSM3MobileSMSProvider.h	35;"	d
_GSM3MOBILEVOICEPROVIDER_	GSM/src/GSM3MobileVoiceProvider.h	35;"	d
_GSM3SHIELDV1ACCESSPROVIDER_	GSM/src/GSM3ShieldV1AccessProvider.h	35;"	d
_GSM3SHIELDV1BASEPROVIDER_	GSM/src/GSM3ShieldV1BaseProvider.h	35;"	d
_GSM3SHIELDV1DATANETWORKPROVIDER_	GSM/src/GSM3ShieldV1DataNetworkProvider.h	35;"	d
_GSM3SHIELDV1MODEMVERIFICATION_	GSM/src/GSM3ShieldV1ModemVerification.h	35;"	d
_GSM3SHIELDV1PINMANAGEMENT_	GSM/src/GSM3ShieldV1PinManagement.h	35;"	d
_GSM3SHIELDV1VOICEPROVIDER_	GSM/src/GSM3ShieldV1VoiceProvider.h	36;"	d
_GSM3SIMPLIFIERFILE_	GSM/src/GSM.h	35;"	d
_GSM3SMSSERVICE_	GSM/src/GSM3SMSService.h	35;"	d
_GSM3VOICECALLSERVICE_	GSM/src/GSM3VoiceCallService.h	35;"	d
_GSMSOFTSERIALFLAGS_ESCAPED_	GSM/src/GSM3SoftSerial.cpp	45;"	d	file:
_GSMSOFTSERIALFLAGS_SENTXOFF_	GSM/src/GSM3SoftSerial.cpp	46;"	d	file:
_IRread	Robot_Motor/src/ArduinoRobotMotorBoard.cpp	/^int RobotMotorBoard::_IRread(uint8_t num){$/;"	f	class:RobotMotorBoard
_MAX_ATTR_DATA_LEN_	Firmata/utility/BLEStream.h	16;"	d
_MAX_ATTR_DATA_LEN_	Firmata/utility/BLEStream.h	19;"	d
_NOP	arduino/Arduino.h	118;"	d
_Nbr_16timers	Servo/src/avr/ServoTimers.h	/^typedef enum { _timer1, _Nbr_16timers } timer16_Sequence_t;$/;"	e	enum:__anon27
_Nbr_16timers	Servo/src/avr/ServoTimers.h	/^typedef enum { _timer1, _Nbr_16timers } timer16_Sequence_t;$/;"	e	enum:__anon30
_Nbr_16timers	Servo/src/avr/ServoTimers.h	/^typedef enum { _timer3, _timer1, _Nbr_16timers } timer16_Sequence_t;$/;"	e	enum:__anon28
_Nbr_16timers	Servo/src/avr/ServoTimers.h	/^typedef enum { _timer3, _timer1, _Nbr_16timers } timer16_Sequence_t;$/;"	e	enum:__anon29
_Nbr_16timers	Servo/src/avr/ServoTimers.h	/^typedef enum { _timer5, _timer1, _timer3, _timer4, _Nbr_16timers } timer16_Sequence_t;$/;"	e	enum:__anon26
_Nbr_16timers	Servo/src/sam/ServoTimers.h	/^typedef enum { _timer1, _timer2, _timer3, _timer4, _timer5, _Nbr_16timers } timer16_Sequence_t ;$/;"	e	enum:__anon31
_Nbr_16timers	Servo/src/samd/ServoTimers.h	/^    _Nbr_16timers } timer16_Sequence_t;$/;"	e	enum:__anon32
_PIMAGE_H	TFT/src/utility/PImage.h	4;"	d
_RIP_MSG_FIXED	Ethernet/src/Dhcp.h	/^typedef struct __attribute__((packed)) _RIP_MSG_FIXED$/;"	s
_SOCKET_H_	Ethernet/src/utility/socket.h	2;"	d
_SPI_H_INCLUDED	SPI/src/SPI.h	15;"	d
_SQUAWKSD_H_	Robot_Control/src/SquawkSD.h	2;"	d
_SQUAWK_H_	Robot_Control/src/Squawk.h	7;"	d
_SS_MAX_RX_BUFF	SoftwareSerial/src/SoftwareSerial.h	43;"	d
_USING_HID	HID/src/HID.h	28;"	d
__BUFFERMASK__	GSM/src/GSM3CircularBuffer.h	48;"	d
__BUFFERSIZE__	GSM/src/GSM3CircularBuffer.h	47;"	d
__GP_REGISTER16	Ethernet/src/utility/w5100.h	209;"	d
__GP_REGISTER16	Ethernet/src/utility/w5100.h	246;"	d
__GP_REGISTER8	Ethernet/src/utility/w5100.h	202;"	d
__GP_REGISTER8	Ethernet/src/utility/w5100.h	245;"	d
__GP_REGISTER_N	Ethernet/src/utility/w5100.h	219;"	d
__GP_REGISTER_N	Ethernet/src/utility/w5100.h	247;"	d
__GSM3DIRECTMODEMPROVIDER__	GSM/src/GSM3ShieldV1DirectModemProvider.h	36;"	d
__GSM3SHIELDV1BANDMANAGEMENT__	GSM/src/GSM3ShieldV1BandManagement.h	35;"	d
__GSM3SHIELDV1SCANNETWORKS__	GSM/src/GSM3ShieldV1ScanNetworks.h	35;"	d
__GSM3_CIRCULARBUFFER__	GSM/src/GSM3CircularBuffer.h	35;"	d
__GSM3_MOBILECLIENTPROVIDER__	GSM/src/GSM3MobileClientProvider.h	35;"	d
__GSM3_MOBILESERVERPROVIDER__	GSM/src/GSM3MobileServerProvider.h	35;"	d
__GSM3_SHIELDV1CELLMANAGEMENT__	GSM/src/GSM3ShieldV1CellManagement.h	35;"	d
__GSM3_SHIELDV1CLIENTPROVIDER__	GSM/src/GSM3ShieldV1ClientProvider.h	35;"	d
__GSM3_SHIELDV1CLIENTPROVIDER__	GSM/src/GSM3ShieldV1MultiClientProvider.h	35;"	d
__GSM3_SHIELDV1MODEMCORE__	GSM/src/GSM3ShieldV1ModemCore.h	36;"	d
__GSM3_SHIELDV1SERVERPROVIDER__	GSM/src/GSM3ShieldV1MultiServerProvider.h	35;"	d
__GSM3_SHIELDV1SERVERPROVIDER__	GSM/src/GSM3ShieldV1ServerProvider.h	35;"	d
__GSM3_SHIELDV1SMSPROVIDER__	GSM/src/GSM3ShieldV1SMSProvider.h	35;"	d
__GSM3_SHIELDV1__	GSM/src/GSM3ShieldV1.h	35;"	d
__GSM3_SOFTSERIAL__	GSM/src/GSM3SoftSerial.h	35;"	d
__NCLIENTS_MAX__	GSM/src/GSM3ShieldV1.cpp	46;"	d	file:
__NCLIENTS_MAX__	GSM/src/GSM3ShieldV1MultiServerProvider.cpp	38;"	d	file:
__PARAGRAPHGUARD__	GSM/src/GSM3SoftSerial.cpp	51;"	d	file:
__POWERPIN__	GSM/src/GSM3IO.h	35;"	d
__RESETPIN__	GSM/src/GSM3IO.h	36;"	d
__RESETPIN__	GSM/src/GSM3IO.h	38;"	d
__RESETPIN__	GSM/src/GSM3ShieldV1.cpp	38;"	d	file:
__RESETPIN__	GSM/src/GSM3ShieldV1DirectModemProvider.cpp	39;"	d	file:
__RXINT__	GSM/src/GSM3IO.h	45;"	d
__RXINT__	GSM/src/GSM3IO.h	49;"	d
__RXINT__	GSM/src/GSM3IO.h	54;"	d
__RXINT__	GSM/src/GSM3IO.h	58;"	d
__RXPIN__	GSM/src/GSM3IO.h	44;"	d
__RXPIN__	GSM/src/GSM3IO.h	48;"	d
__RXPIN__	GSM/src/GSM3IO.h	53;"	d
__RXPIN__	GSM/src/GSM3IO.h	57;"	d
__SD_H__	SD/src/SD.h	16;"	d
__SERVO_TIMERS_H__	Servo/src/samd/ServoTimers.h	28;"	d
__SOCKET_REGISTER16	Ethernet/src/utility/w5100.h	267;"	d
__SOCKET_REGISTER16	Ethernet/src/utility/w5100.h	309;"	d
__SOCKET_REGISTER8	Ethernet/src/utility/w5100.h	260;"	d
__SOCKET_REGISTER8	Ethernet/src/utility/w5100.h	308;"	d
__SOCKET_REGISTER_N	Ethernet/src/utility/w5100.h	280;"	d
__SOCKET_REGISTER_N	Ethernet/src/utility/w5100.h	310;"	d
__TOUTAT__	GSM/src/GSM3ShieldV1.cpp	42;"	d	file:
__TOUTAT__	GSM/src/GSM3ShieldV1AccessProvider.cpp	40;"	d	file:
__TOUTBEGINWRITE__	GSM/src/GSM3MobileClientService.cpp	47;"	d	file:
__TOUTCALL__	GSM/src/GSM3ShieldV1.cpp	44;"	d	file:
__TOUTFLUSH__	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	39;"	d	file:
__TOUTGPRS__	GSM/src/GSM3ShieldV1.cpp	45;"	d	file:
__TOUTLOCALCOMS__	GSM/src/GSM3ShieldV1.cpp	39;"	d	file:
__TOUTMODEMCONFIGURATION__	GSM/src/GSM3ShieldV1.cpp	41;"	d	file:
__TOUTMODEMCONFIGURATION__	GSM/src/GSM3ShieldV1AccessProvider.cpp	39;"	d	file:
__TOUTSERVER__	GSM/src/GSM3MobileServerService.cpp	39;"	d	file:
__TOUTSHUTDOWN__	GSM/src/GSM3ShieldV1.cpp	40;"	d	file:
__TOUTSHUTDOWN__	GSM/src/GSM3ShieldV1AccessProvider.cpp	38;"	d	file:
__TOUTSMS__	GSM/src/GSM3ShieldV1.cpp	43;"	d	file:
__TOUT__	GSM/src/GSM3SMSService.cpp	43;"	d	file:
__TOUT__	GSM/src/GSM3VoiceCallService.cpp	43;"	d	file:
__TXPIN__	GSM/src/GSM3IO.h	43;"	d
__TXPIN__	GSM/src/GSM3IO.h	47;"	d
__TXPIN__	GSM/src/GSM3IO.h	52;"	d
__TXPIN__	GSM/src/GSM3IO.h	56;"	d
__USBAPI__	arduino/USBAPI.h	21;"	d
__USBCORE_H__	arduino/USBCore.h	19;"	d
__XOFF__	GSM/src/GSM3SoftSerial.cpp	43;"	d	file:
__XON__	GSM/src/GSM3SoftSerial.cpp	42;"	d	file:
__cxa_deleted_virtual	arduino/abi.cpp	/^void __cxa_deleted_virtual(void) {$/;"	f
__cxa_pure_virtual	arduino/abi.cpp	/^void __cxa_pure_virtual(void) {$/;"	f
__empty	arduino/hooks.c	/^static void __empty() {$/;"	f	file:
__ok__	GSM/src/GSM3ShieldV1ModemCore.cpp	/^char* __ok__="OK";$/;"	v
_activeObject	GSM/src/GSM3SoftSerial.cpp	/^GSM3SoftSerial* GSM3SoftSerial::_activeObject=0;$/;"	m	class:GSM3SoftSerial	file:
_activeObject	GSM/src/GSM3SoftSerial.h	/^		static GSM3SoftSerial* _activeObject;$/;"	m	class:GSM3SoftSerial
_address	arduino/IPAddress.h	/^    } _address;$/;"	m	class:IPAddress	typeref:union:IPAddress::__anon14
_analogRead	Robot_Motor/src/ArduinoRobotMotorBoard.cpp	/^void RobotMotorBoard::_analogRead(uint8_t codename){$/;"	f	class:RobotMotorBoard
_analogReadTopMux	Robot_Control/src/Sensors.cpp	/^int RobotControl::_analogReadTopMux(uint8_t port){$/;"	f	class:RobotControl
_analogReadTopPin	Robot_Control/src/Sensors.cpp	/^int RobotControl::_analogReadTopPin(uint8_t port){$/;"	f	class:RobotControl
_analogWrite	Robot_Motor/src/ArduinoRobotMotorBoard.cpp	/^void RobotMotorBoard::_analogWrite(uint8_t codename,int value){$/;"	f	class:RobotMotorBoard
_beginTransmission	Robot_Control/src/Compass.cpp	/^void Compass::_beginTransmission(){$/;"	f	class:Compass
_beginTransmission	Robot_Control/src/EEPROM_I2C.cpp	/^void EEPROM_I2C::_beginTransmission(unsigned int eeaddress){$/;"	f	class:EEPROM_I2C
_bmpDepth	TFT/src/utility/PImage.h	/^  uint8_t  _bmpDepth;              \/\/ Bit depth (currently must be 24)$/;"	m	class:PImage
_bmpFile	TFT/src/utility/PImage.h	/^  File _bmpFile;$/;"	m	class:PImage
_bmpHeight	TFT/src/utility/PImage.h	/^  int  _bmpWidth, _bmpHeight;   \/\/ W+H in pixels$/;"	m	class:PImage
_bmpImageoffset	TFT/src/utility/PImage.h	/^  uint32_t _bmpImageoffset;        \/\/ Start of image data in file$/;"	m	class:PImage
_bmpWidth	TFT/src/utility/PImage.h	/^  int  _bmpWidth, _bmpHeight;   \/\/ W+H in pixels$/;"	m	class:PImage
_cdcComposite	arduino/USBCore.cpp	/^static u8 _cdcComposite = 0;$/;"	v	file:
_cdcInterface	arduino/CDC.cpp	/^const CDCDescriptor _cdcInterface =$/;"	v
_cend	arduino/USBCore.cpp	/^static int _cend;$/;"	v	file:
_client	Firmata/utility/WiFiStream.h	/^  WiFiClient _client;$/;"	m	class:WiFiStream
_cmark	arduino/USBCore.cpp	/^static int _cmark;$/;"	v	file:
_connected	Firmata/utility/BLEStream.h	/^    bool _connected;$/;"	m	class:BLEStream
_connected	Firmata/utility/WiFiStream.h	/^  bool _connected = false;$/;"	m	class:WiFiStream
_cs	Robot_Control/src/Arduino_LCD.h	/^  uint8_t  _cs, _rs, _rst, _sid, _sclk,$/;"	m	class:Arduino_LCD
_cs	TFT/src/utility/Adafruit_ST7735.h	/^  uint32_t  _cs, _rs, _rst, _sid, _sclk,$/;"	m	class:Adafruit_ST7735
_cs	TFT/src/utility/Adafruit_ST7735.h	/^  uint8_t  _cs, _rs, _rst, _sid, _sclk,$/;"	m	class:Adafruit_ST7735
_currentHostConnectionCallback	Firmata/utility/WiFiStream.h	/^  hostConnectionCallbackFunction _currentHostConnectionCallback;$/;"	m	class:WiFiStream
_dataInBufferFrom	GSM/src/GSM3ShieldV1ModemCore.h	/^		byte _dataInBufferFrom;$/;"	m	class:GSM3ShieldV1ModemCore
_dataInBufferTo	GSM/src/GSM3ShieldV1ModemCore.h	/^		byte _dataInBufferTo;$/;"	m	class:GSM3ShieldV1ModemCore
_data_pins	LiquidCrystal/src/LiquidCrystal.h	/^  uint8_t _data_pins[8];$/;"	m	class:LiquidCrystal
_debug	GSM/src/GSM3ShieldV1ModemCore.h	/^		bool _debug;$/;"	m	class:GSM3ShieldV1ModemCore
_dhcp	Ethernet/src/Ethernet.h	/^  DhcpClass* _dhcp;$/;"	m	class:EthernetClass
_dhcpDhcpServerIp	Ethernet/src/Dhcp.h	/^  uint8_t  _dhcpDhcpServerIp[4];$/;"	m	class:DhcpClass
_dhcpDnsServerIp	Ethernet/src/Dhcp.h	/^  uint8_t  _dhcpDnsServerIp[4];$/;"	m	class:DhcpClass
_dhcpGatewayIp	Ethernet/src/Dhcp.h	/^  uint8_t  _dhcpGatewayIp[4];$/;"	m	class:DhcpClass
_dhcpInitialTransactionId	Ethernet/src/Dhcp.h	/^  uint32_t _dhcpInitialTransactionId;$/;"	m	class:DhcpClass
_dhcpLeaseTime	Ethernet/src/Dhcp.h	/^  uint32_t _dhcpLeaseTime;$/;"	m	class:DhcpClass
_dhcpLocalIp	Ethernet/src/Dhcp.h	/^  uint8_t  _dhcpLocalIp[4];$/;"	m	class:DhcpClass
_dhcpMacAddr	Ethernet/src/Dhcp.h	/^  uint8_t  _dhcpMacAddr[6];$/;"	m	class:DhcpClass
_dhcpSubnetMask	Ethernet/src/Dhcp.h	/^  uint8_t  _dhcpSubnetMask[4];$/;"	m	class:DhcpClass
_dhcpT1	Ethernet/src/Dhcp.h	/^  uint32_t _dhcpT1, _dhcpT2;$/;"	m	class:DhcpClass
_dhcpT2	Ethernet/src/Dhcp.h	/^  uint32_t _dhcpT1, _dhcpT2;$/;"	m	class:DhcpClass
_dhcpTransactionId	Ethernet/src/Dhcp.h	/^  uint32_t _dhcpTransactionId;$/;"	m	class:DhcpClass
_dhcpUdpSocket	Ethernet/src/Dhcp.h	/^  EthernetUDP _dhcpUdpSocket;$/;"	m	class:DhcpClass
_dhcp_state	Ethernet/src/Dhcp.h	/^  uint8_t _dhcp_state;$/;"	m	class:DhcpClass
_digitalRead	Robot_Motor/src/ArduinoRobotMotorBoard.cpp	/^void RobotMotorBoard::_digitalRead(uint8_t codename){$/;"	f	class:RobotMotorBoard
_digitalReadTopMux	Robot_Control/src/Sensors.cpp	/^bool RobotControl::_digitalReadTopMux(uint8_t port){$/;"	f	class:RobotControl
_digitalReadTopPin	Robot_Control/src/Sensors.cpp	/^bool RobotControl::_digitalReadTopPin(uint8_t port){$/;"	f	class:RobotControl
_digitalWrite	Robot_Motor/src/ArduinoRobotMotorBoard.cpp	/^void RobotMotorBoard::_digitalWrite(uint8_t codename,bool value){$/;"	f	class:RobotMotorBoard
_digitalWriteTopPin	Robot_Control/src/Sensors.cpp	/^void RobotControl::_digitalWriteTopPin(uint8_t port, bool value){$/;"	f	class:RobotControl
_displaycontrol	LiquidCrystal/src/LiquidCrystal.h	/^  uint8_t _displaycontrol;$/;"	m	class:LiquidCrystal
_displayfunction	LiquidCrystal/src/LiquidCrystal.h	/^  uint8_t _displayfunction;$/;"	m	class:LiquidCrystal
_displaymode	LiquidCrystal/src/LiquidCrystal.h	/^  uint8_t _displaymode;$/;"	m	class:LiquidCrystal
_dnsServerAddress	Ethernet/src/Ethernet.h	/^  IPAddress _dnsServerAddress;$/;"	m	class:EthernetClass
_drawBMP	Robot_Control/src/lcd.cpp	/^void RobotControl::_drawBMP(char* filename, uint8_t posX, uint8_t posY){$/;"	f	class:RobotControl
_drawBMP	Robot_Control/src/lcd.cpp	/^void RobotControl::_drawBMP(uint32_t iconOffset, uint8_t x, uint8_t y, uint8_t width, uint8_t height){$/;"	f	class:RobotControl
_drawBMP_EEPROM	Robot_Control/src/lcd.cpp	/^void RobotControl::_drawBMP_EEPROM(uint16_t address, uint8_t width, uint8_t height){$/;"	f	class:RobotControl
_eeprom_bmp	Robot_Control/src/ArduinoRobot.h	/^		EEPROM_BMP * _eeprom_bmp;$/;"	m	class:RobotControl
_enableLCD	Robot_Control/src/lcd.cpp	/^void RobotControl::_enableLCD(){$/;"	f	class:RobotControl
_enableSD	Robot_Control/src/RobotSdCard.cpp	/^void RobotControl::_enableSD(){$/;"	f	class:RobotControl
_enable_pin	LiquidCrystal/src/LiquidCrystal.h	/^  uint8_t _enable_pin; \/\/ activated by a HIGH pulse.$/;"	m	class:LiquidCrystal
_endTransmission	Robot_Control/src/Compass.cpp	/^void Compass::_endTransmission(){$/;"	f	class:Compass
_endTransmission	Robot_Control/src/EEPROM_I2C.cpp	/^void EEPROM_I2C::_endTransmission(){$/;"	f	class:EEPROM_I2C
_file	SD/src/SD.h	/^  SdFile *_file;  \/\/ underlying file pointer$/;"	m	class:SDLib::File
_flags	GSM/src/GSM3SoftSerial.h	/^		uint8_t _flags;$/;"	m	class:GSM3SoftSerial
_flip	TFT/src/utility/PImage.h	/^  bool     _flip; $/;"	m	class:PImage
_flushInterval	Firmata/utility/BLEStream.h	/^    int _flushInterval;$/;"	m	class:BLEStream
_flushed	Firmata/utility/BLEStream.h	/^    unsigned long _flushed;$/;"	m	class:BLEStream
_gateway	Firmata/utility/WiFiStream.h	/^  IPAddress _gateway;$/;"	m	class:WiFiStream
_getTypeCode	Robot_Control/src/Sensors.cpp	/^uint8_t RobotControl::_getTypeCode(uint8_t port){$/;"	f	class:RobotControl
_height	Robot_Control/src/utility/Adafruit_GFX.h	/^    _width, _height, \/\/ Display w\/h as modified by current rotation$/;"	m	class:Adafruit_GFX
_height	TFT/src/utility/Adafruit_GFX.h	/^	_width, _height, \/\/ dependent on rotation$/;"	m	class:Adafruit_GFX
_initEndpoints	arduino/USBCore.cpp	/^u8 _initEndpoints[USB_ENDPOINTS] =$/;"	v
_initISR	Servo/src/sam/Servo.cpp	/^static void _initISR(Tc *tc, uint32_t channel, uint32_t id, IRQn_Type irqn)$/;"	f	file:
_initISR	Servo/src/samd/Servo.cpp	/^static void _initISR(Tc *tc, uint8_t channel, uint32_t id, IRQn_Type irqn, uint8_t gcmForTimer, uint8_t intEnableBit)$/;"	f	file:
_initialized	LiquidCrystal/src/LiquidCrystal.h	/^  uint8_t _initialized;$/;"	m	class:LiquidCrystal
_instance	Firmata/utility/BLEStream.h	/^    static BLEStream* _instance;$/;"	m	class:BLEStream
_instance	Firmata/utility/BLEStream.h	/^BLEStream* BLEStream::_instance = NULL;$/;"	m	class:BLEStream
_isEEPROM_BMP_Allocated	Robot_Control/src/ArduinoRobot.h	/^		bool _isEEPROM_BMP_Allocated;$/;"	m	class:RobotControl
_key	Firmata/utility/WiFiStream.h	/^  const char *_key = nullptr;         \/\/WEP$/;"	m	class:WiFiStream
_key_idx	Firmata/utility/WiFiStream.h	/^  uint8_t _key_idx;                   \/\/WEP$/;"	m	class:WiFiStream
_lastCheckLeaseMillis	Ethernet/src/Dhcp.h	/^  unsigned long _lastCheckLeaseMillis;$/;"	m	class:DhcpClass
_listening	Firmata/utility/WiFiServerStream.h	/^  bool _listening = false;$/;"	m	class:WiFiServerStream
_local_ip	Firmata/utility/WiFiStream.h	/^  IPAddress _local_ip;                \/\/ DHCP$/;"	m	class:WiFiStream
_name	SD/src/SD.h	/^  char _name[13]; \/\/ our name$/;"	m	class:SDLib::File
_numlines	LiquidCrystal/src/LiquidCrystal.h	/^  uint8_t _numlines;$/;"	m	class:LiquidCrystal
_offset	Ethernet/src/EthernetUdp.h	/^  uint16_t _offset; \/\/ offset into the packet being sent$/;"	m	class:EthernetUDP
_passphrase	Firmata/utility/WiFiStream.h	/^  const char *_passphrase = nullptr;  \/\/WPA$/;"	m	class:WiFiStream
_pcint_maskreg	SoftwareSerial/src/SoftwareSerial.h	/^  volatile uint8_t *_pcint_maskreg;$/;"	m	class:SoftwareSerial
_pcint_maskvalue	SoftwareSerial/src/SoftwareSerial.h	/^  uint8_t _pcint_maskvalue;$/;"	m	class:SoftwareSerial
_port	Ethernet/src/EthernetServer.h	/^  uint16_t _port;$/;"	m	class:EthernetServer
_port	Ethernet/src/EthernetUdp.h	/^  uint16_t _port; \/\/ local port to listen on$/;"	m	class:EthernetUDP
_port	Firmata/utility/WiFiStream.h	/^  uint16_t _port;$/;"	m	class:WiFiStream
_port	GSM/src/GSM3MobileServerService.h	/^		uint8_t _port; \/\/ Port$/;"	m	class:GSM3MobileServerService
_portToTopMux	Robot_Control/src/Sensors.cpp	/^uint8_t RobotControl::_portToTopMux(uint8_t port){$/;"	f	class:RobotControl
_readIR	Robot_Motor/src/ArduinoRobotMotorBoard.cpp	/^void RobotMotorBoard::_readIR(){$/;"	f	class:RobotMotorBoard
_readTrim	Robot_Motor/src/ArduinoRobotMotorBoard.cpp	/^void RobotMotorBoard::_readTrim(){$/;"	f	class:RobotMotorBoard
_rebindInSec	Ethernet/src/Dhcp.h	/^  unsigned long _rebindInSec;$/;"	m	class:DhcpClass
_receiveBitMask	GSM/src/GSM3SoftSerial.h	/^		uint8_t _receiveBitMask;$/;"	m	class:GSM3SoftSerial
_receiveBitMask	SoftwareSerial/src/SoftwareSerial.h	/^  uint8_t _receiveBitMask;$/;"	m	class:SoftwareSerial
_receivePin	SoftwareSerial/src/SoftwareSerial.h	/^  uint8_t _receivePin;$/;"	m	class:SoftwareSerial
_receivePortRegister	GSM/src/GSM3SoftSerial.h	/^		volatile uint8_t *_receivePortRegister;$/;"	m	class:GSM3SoftSerial
_receivePortRegister	SoftwareSerial/src/SoftwareSerial.h	/^  volatile uint8_t *_receivePortRegister;$/;"	m	class:SoftwareSerial
_receive_buffer	SoftwareSerial/src/SoftwareSerial.cpp	/^uint8_t SoftwareSerial::_receive_buffer[_SS_MAX_RX_BUFF]; $/;"	m	class:SoftwareSerial	file:
_receive_buffer	SoftwareSerial/src/SoftwareSerial.h	/^  static uint8_t _receive_buffer[_SS_MAX_RX_BUFF]; $/;"	m	class:SoftwareSerial
_receive_buffer_head	SoftwareSerial/src/SoftwareSerial.cpp	/^volatile uint8_t SoftwareSerial::_receive_buffer_head = 0;$/;"	m	class:SoftwareSerial	file:
_receive_buffer_head	SoftwareSerial/src/SoftwareSerial.h	/^  static volatile uint8_t _receive_buffer_head;$/;"	m	class:SoftwareSerial
_receive_buffer_tail	SoftwareSerial/src/SoftwareSerial.cpp	/^volatile uint8_t SoftwareSerial::_receive_buffer_tail = 0;$/;"	m	class:SoftwareSerial	file:
_receive_buffer_tail	SoftwareSerial/src/SoftwareSerial.h	/^  static volatile uint8_t _receive_buffer_tail;$/;"	m	class:SoftwareSerial
_received	Firmata/utility/BLEStream.h	/^void BLEStream::_received(BLECentral& \/*central*\/, BLECharacteristic& rxCharacteristic)$/;"	f	class:BLEStream
_received	Firmata/utility/BLEStream.h	/^void BLEStream::_received(const unsigned char* data, size_t size)$/;"	f	class:BLEStream
_refreshMotorAdjustment	Robot_Motor/src/ArduinoRobotMotorBoard.cpp	/^void RobotMotorBoard::_refreshMotorAdjustment(){$/;"	f	class:RobotMotorBoard
_remaining	Ethernet/src/EthernetUdp.h	/^  uint16_t _remaining; \/\/ remaining bytes of incoming packet yet to be processed$/;"	m	class:EthernetUDP
_remoteIP	Ethernet/src/EthernetUdp.h	/^  IPAddress _remoteIP; \/\/ remote IP address for the incoming packet whilst it's being processed$/;"	m	class:EthernetUDP
_remotePort	Ethernet/src/EthernetUdp.h	/^  uint16_t _remotePort; \/\/ remote port for the incoming packet whilst it's being processed$/;"	m	class:EthernetUDP
_remote_ip	Firmata/utility/WiFiStream.h	/^  IPAddress _remote_ip;$/;"	m	class:WiFiStream
_renewInSec	Ethernet/src/Dhcp.h	/^  unsigned long _renewInSec;$/;"	m	class:DhcpClass
_requestAnalogRead	Robot_Control/src/Sensors.cpp	/^int RobotControl::_requestAnalogRead(uint8_t port){$/;"	f	class:RobotControl
_requestDigitalRead	Robot_Control/src/Sensors.cpp	/^bool RobotControl::_requestDigitalRead(uint8_t port){$/;"	f	class:RobotControl
_requestDigitalWrite	Robot_Control/src/Sensors.cpp	/^void RobotControl::_requestDigitalWrite(uint8_t selector, uint8_t value){$/;"	f	class:RobotControl
_responseTimeout	Ethernet/src/Dhcp.h	/^  unsigned long _responseTimeout;$/;"	m	class:DhcpClass
_rowSize	TFT/src/utility/PImage.h	/^  uint32_t _rowSize;               \/\/ Not always = bmpWidth; may have padding$/;"	m	class:PImage
_row_offsets	LiquidCrystal/src/LiquidCrystal.h	/^  uint8_t _row_offsets[4];$/;"	m	class:LiquidCrystal
_rs	Robot_Control/src/Arduino_LCD.h	/^  uint8_t  _cs, _rs, _rst, _sid, _sclk,$/;"	m	class:Arduino_LCD
_rs	TFT/src/utility/Adafruit_ST7735.h	/^  uint32_t  _cs, _rs, _rst, _sid, _sclk,$/;"	m	class:Adafruit_ST7735
_rs	TFT/src/utility/Adafruit_ST7735.h	/^  uint8_t  _cs, _rs, _rst, _sid, _sclk,$/;"	m	class:Adafruit_ST7735
_rs_pin	LiquidCrystal/src/LiquidCrystal.h	/^  uint8_t _rs_pin; \/\/ LOW: command.  HIGH: character.$/;"	m	class:LiquidCrystal
_rst	Robot_Control/src/Arduino_LCD.h	/^  uint8_t  _cs, _rs, _rst, _sid, _sclk,$/;"	m	class:Arduino_LCD
_rst	TFT/src/utility/Adafruit_ST7735.h	/^  uint32_t  _cs, _rs, _rst, _sid, _sclk,$/;"	m	class:Adafruit_ST7735
_rst	TFT/src/utility/Adafruit_ST7735.h	/^  uint8_t  _cs, _rs, _rst, _sid, _sclk,$/;"	m	class:Adafruit_ST7735
_rw_pin	LiquidCrystal/src/LiquidCrystal.h	/^  uint8_t _rw_pin; \/\/ LOW: write to LCD.  HIGH: read from LCD.$/;"	m	class:LiquidCrystal
_rxBuffer	Firmata/utility/BLEStream.h	/^    unsigned char _rxBuffer[256];$/;"	m	class:BLEStream
_rxCharacteristic	Firmata/utility/BLEStream.h	/^    BLECharacteristic _rxCharacteristic = BLECharacteristic("6E400002-B5A3-F393-E0A9-E50E24DCCA9E", BLEWriteWithoutResponse, _MAX_ATTR_DATA_LEN_);$/;"	m	class:BLEStream
_rxHead	Firmata/utility/BLEStream.h	/^    size_t _rxHead;$/;"	m	class:BLEStream
_rxNameDescriptor	Firmata/utility/BLEStream.h	/^    BLEDescriptor _rxNameDescriptor = BLEDescriptor("2901", "RX - Receive Data (Write)");$/;"	m	class:BLEStream
_rxTail	Firmata/utility/BLEStream.h	/^    size_t _rxTail;$/;"	m	class:BLEStream
_rx_buffer	arduino/HardwareSerial.h	/^    unsigned char _rx_buffer[SERIAL_RX_BUFFER_SIZE];$/;"	m	class:HardwareSerial
_rx_buffer	arduino/USBAPI.h	/^	unsigned char _rx_buffer[SERIAL_BUFFER_SIZE];$/;"	m	class:Serial_
_rx_buffer_head	arduino/HardwareSerial.h	/^    volatile rx_buffer_index_t _rx_buffer_head;$/;"	m	class:HardwareSerial
_rx_buffer_head	arduino/USBAPI.h	/^	volatile uint8_t _rx_buffer_head;$/;"	m	class:Serial_
_rx_buffer_tail	arduino/HardwareSerial.h	/^    volatile rx_buffer_index_t _rx_buffer_tail;$/;"	m	class:HardwareSerial
_rx_buffer_tail	arduino/USBAPI.h	/^	volatile uint8_t _rx_buffer_tail;$/;"	m	class:Serial_
_rx_complete_irq	arduino/HardwareSerial_private.h	/^void HardwareSerial::_rx_complete_irq(void)$/;"	f	class:HardwareSerial
_rx_delay_centering	GSM/src/GSM3SoftSerial.h	/^		uint16_t _rx_delay_centering;$/;"	m	class:GSM3SoftSerial
_rx_delay_centering	SoftwareSerial/src/SoftwareSerial.h	/^  uint16_t _rx_delay_centering;$/;"	m	class:SoftwareSerial
_rx_delay_intrabit	GSM/src/GSM3SoftSerial.h	/^		uint16_t _rx_delay_intrabit;$/;"	m	class:GSM3SoftSerial
_rx_delay_intrabit	SoftwareSerial/src/SoftwareSerial.h	/^  uint16_t _rx_delay_intrabit;$/;"	m	class:SoftwareSerial
_rx_delay_stopbit	GSM/src/GSM3SoftSerial.h	/^		uint16_t _rx_delay_stopbit;$/;"	m	class:GSM3SoftSerial
_rx_delay_stopbit	SoftwareSerial/src/SoftwareSerial.h	/^  uint16_t _rx_delay_stopbit;$/;"	m	class:SoftwareSerial
_sclk	Robot_Control/src/Arduino_LCD.h	/^  uint8_t  _cs, _rs, _rst, _sid, _sclk,$/;"	m	class:Arduino_LCD
_sclk	TFT/src/utility/Adafruit_ST7735.h	/^  uint32_t  _cs, _rs, _rst, _sid, _sclk,$/;"	m	class:Adafruit_ST7735
_sclk	TFT/src/utility/Adafruit_ST7735.h	/^  uint8_t  _cs, _rs, _rst, _sid, _sclk,$/;"	m	class:Adafruit_ST7735
_serial	Robot_Control/src/EasyTransfer2.h	/^HardwareSerial *_serial;$/;"	m	class:EasyTransfer2
_serial	Robot_Motor/src/EasyTransfer2.h	/^HardwareSerial *_serial;$/;"	m	class:EasyTransfer2
_server	Firmata/utility/WiFiServerStream.h	/^  WiFiServer _server = WiFiServer(3030);$/;"	m	class:WiFiServerStream
_server_port	Ethernet/src/Ethernet.cpp	/^uint16_t EthernetClass::_server_port[MAX_SOCK_NUM] = { $/;"	m	class:EthernetClass	file:
_server_port	Ethernet/src/Ethernet.h	/^  static uint16_t _server_port[MAX_SOCK_NUM];$/;"	m	class:EthernetClass
_sid	Robot_Control/src/Arduino_LCD.h	/^  uint8_t  _cs, _rs, _rst, _sid, _sclk,$/;"	m	class:Arduino_LCD
_sid	TFT/src/utility/Adafruit_ST7735.h	/^  uint32_t  _cs, _rs, _rst, _sid, _sclk,$/;"	m	class:Adafruit_ST7735
_sid	TFT/src/utility/Adafruit_ST7735.h	/^  uint8_t  _cs, _rs, _rst, _sid, _sclk,$/;"	m	class:Adafruit_ST7735
_sock	Ethernet/src/EthernetClient.h	/^  uint8_t _sock;$/;"	m	class:EthernetClient
_sock	Ethernet/src/EthernetUdp.h	/^  uint8_t _sock;  \/\/ socket ID for Wiz5100$/;"	m	class:EthernetUDP
_srcport	Ethernet/src/EthernetClient.cpp	/^uint16_t EthernetClient::_srcport = 49152;      \/\/Use IANA recommended ephemeral port range 49152-65535$/;"	m	class:EthernetClient	file:
_srcport	Ethernet/src/EthernetClient.h	/^  static uint16_t _srcport;$/;"	m	class:EthernetClient
_sreg	arduino/USBCore.cpp	/^	u8 _sreg;$/;"	m	class:LockEP	file:
_ssid	Firmata/utility/WiFiStream.h	/^  char *_ssid = nullptr;$/;"	m	class:WiFiStream
_startMillis	arduino/Stream.h	/^    unsigned long _startMillis;  \/\/ used for timeout measurement$/;"	m	class:Stream
_state	Ethernet/src/Ethernet.cpp	/^uint8_t EthernetClass::_state[MAX_SOCK_NUM] = { $/;"	m	class:EthernetClass	file:
_state	Ethernet/src/Ethernet.h	/^  static uint8_t _state[MAX_SOCK_NUM];$/;"	m	class:EthernetClass
_status	GSM/src/GSM3ShieldV1ModemCore.h	/^		GSM3_NetworkStatus_t _status;$/;"	m	class:GSM3ShieldV1ModemCore
_subnet	Firmata/utility/WiFiStream.h	/^  IPAddress _subnet;$/;"	m	class:WiFiStream
_time_connect	Firmata/utility/WiFiClientStream.h	/^  uint32_t _time_connect = 0;$/;"	m	class:WiFiClientStream
_timeout	Ethernet/src/Dhcp.h	/^  unsigned long _timeout;$/;"	m	class:DhcpClass
_timeout	arduino/Stream.h	/^    unsigned long _timeout;      \/\/ number of milliseconds to wait for the next char before aborting timed read$/;"	m	class:Stream
_timer1	Servo/src/avr/ServoTimers.h	/^typedef enum { _timer1, _Nbr_16timers } timer16_Sequence_t;$/;"	e	enum:__anon27
_timer1	Servo/src/avr/ServoTimers.h	/^typedef enum { _timer1, _Nbr_16timers } timer16_Sequence_t;$/;"	e	enum:__anon30
_timer1	Servo/src/avr/ServoTimers.h	/^typedef enum { _timer3, _timer1, _Nbr_16timers } timer16_Sequence_t;$/;"	e	enum:__anon28
_timer1	Servo/src/avr/ServoTimers.h	/^typedef enum { _timer3, _timer1, _Nbr_16timers } timer16_Sequence_t;$/;"	e	enum:__anon29
_timer1	Servo/src/avr/ServoTimers.h	/^typedef enum { _timer5, _timer1, _timer3, _timer4, _Nbr_16timers } timer16_Sequence_t;$/;"	e	enum:__anon26
_timer1	Servo/src/sam/ServoTimers.h	/^typedef enum { _timer1, _timer2, _timer3, _timer4, _timer5, _Nbr_16timers } timer16_Sequence_t ;$/;"	e	enum:__anon31
_timer1	Servo/src/samd/ServoTimers.h	/^    _timer1,$/;"	e	enum:__anon32
_timer2	Servo/src/sam/ServoTimers.h	/^typedef enum { _timer1, _timer2, _timer3, _timer4, _timer5, _Nbr_16timers } timer16_Sequence_t ;$/;"	e	enum:__anon31
_timer2	Servo/src/samd/ServoTimers.h	/^    _timer2,$/;"	e	enum:__anon32
_timer3	Servo/src/avr/ServoTimers.h	/^typedef enum { _timer3, _timer1, _Nbr_16timers } timer16_Sequence_t;$/;"	e	enum:__anon28
_timer3	Servo/src/avr/ServoTimers.h	/^typedef enum { _timer3, _timer1, _Nbr_16timers } timer16_Sequence_t;$/;"	e	enum:__anon29
_timer3	Servo/src/avr/ServoTimers.h	/^typedef enum { _timer5, _timer1, _timer3, _timer4, _Nbr_16timers } timer16_Sequence_t;$/;"	e	enum:__anon26
_timer3	Servo/src/sam/ServoTimers.h	/^typedef enum { _timer1, _timer2, _timer3, _timer4, _timer5, _Nbr_16timers } timer16_Sequence_t ;$/;"	e	enum:__anon31
_timer4	Servo/src/avr/ServoTimers.h	/^typedef enum { _timer5, _timer1, _timer3, _timer4, _Nbr_16timers } timer16_Sequence_t;$/;"	e	enum:__anon26
_timer4	Servo/src/sam/ServoTimers.h	/^typedef enum { _timer1, _timer2, _timer3, _timer4, _timer5, _Nbr_16timers } timer16_Sequence_t ;$/;"	e	enum:__anon31
_timer5	Servo/src/avr/ServoTimers.h	/^typedef enum { _timer5, _timer1, _timer3, _timer4, _Nbr_16timers } timer16_Sequence_t;$/;"	e	enum:__anon26
_timer5	Servo/src/sam/ServoTimers.h	/^typedef enum { _timer1, _timer2, _timer3, _timer4, _timer5, _Nbr_16timers } timer16_Sequence_t ;$/;"	e	enum:__anon31
_topDPortToAPort	Robot_Control/src/Sensors.cpp	/^uint8_t RobotControl::_topDPortToAPort(uint8_t port){$/;"	f	class:RobotControl
_transmitBitMask	GSM/src/GSM3SoftSerial.h	/^		uint8_t _transmitBitMask;$/;"	m	class:GSM3SoftSerial
_transmitBitMask	SoftwareSerial/src/SoftwareSerial.h	/^  uint8_t _transmitBitMask;$/;"	m	class:SoftwareSerial
_transmitPortRegister	GSM/src/GSM3SoftSerial.h	/^		volatile uint8_t *_transmitPortRegister;$/;"	m	class:GSM3SoftSerial
_transmitPortRegister	SoftwareSerial/src/SoftwareSerial.h	/^  volatile uint8_t *_transmitPortRegister;$/;"	m	class:SoftwareSerial
_txBuffer	Firmata/utility/BLEStream.h	/^    unsigned char _txBuffer[_MAX_ATTR_DATA_LEN_];$/;"	m	class:BLEStream
_txCharacteristic	Firmata/utility/BLEStream.h	/^    BLECharacteristic _txCharacteristic = BLECharacteristic("6E400003-B5A3-F393-E0A9-E50E24DCCA9E", BLENotify, _MAX_ATTR_DATA_LEN_);$/;"	m	class:BLEStream
_txCount	Firmata/utility/BLEStream.h	/^    size_t _txCount;$/;"	m	class:BLEStream
_txNameDescriptor	Firmata/utility/BLEStream.h	/^    BLEDescriptor _txNameDescriptor = BLEDescriptor("2901", "TX - Transfer Data (Notify)");$/;"	m	class:BLEStream
_tx_buffer	arduino/HardwareSerial.h	/^    unsigned char _tx_buffer[SERIAL_TX_BUFFER_SIZE];$/;"	m	class:HardwareSerial
_tx_buffer_head	arduino/HardwareSerial.h	/^    volatile tx_buffer_index_t _tx_buffer_head;$/;"	m	class:HardwareSerial
_tx_buffer_tail	arduino/HardwareSerial.h	/^    volatile tx_buffer_index_t _tx_buffer_tail;$/;"	m	class:HardwareSerial
_tx_delay	GSM/src/GSM3SoftSerial.h	/^		uint16_t _tx_delay;$/;"	m	class:GSM3SoftSerial
_tx_delay	SoftwareSerial/src/SoftwareSerial.h	/^  uint16_t _tx_delay;$/;"	m	class:SoftwareSerial
_tx_udr_empty_irq	arduino/HardwareSerial.cpp	/^void HardwareSerial::_tx_udr_empty_irq(void)$/;"	f	class:HardwareSerial
_uartNameDescriptor	Firmata/utility/BLEStream.h	/^    BLEDescriptor _uartNameDescriptor = BLEDescriptor("2901", "UART");$/;"	m	class:BLEStream
_uartService	Firmata/utility/BLEStream.h	/^    BLEService _uartService = BLEService("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");$/;"	m	class:BLEStream
_ubrrh	arduino/HardwareSerial.h	/^    volatile uint8_t * const _ubrrh;$/;"	m	class:HardwareSerial
_ubrrl	arduino/HardwareSerial.h	/^    volatile uint8_t * const _ubrrl;$/;"	m	class:HardwareSerial
_ucsra	arduino/HardwareSerial.h	/^    volatile uint8_t * const _ucsra;$/;"	m	class:HardwareSerial
_ucsrb	arduino/HardwareSerial.h	/^    volatile uint8_t * const _ucsrb;$/;"	m	class:HardwareSerial
_ucsrc	arduino/HardwareSerial.h	/^    volatile uint8_t * const _ucsrc;$/;"	m	class:HardwareSerial
_udr	arduino/HardwareSerial.h	/^    volatile uint8_t * const _udr;$/;"	m	class:HardwareSerial
_updatedLUFAbootloader	arduino/CDC.cpp	/^bool _updatedLUFAbootloader = false;$/;"	v
_usbConfiguration	arduino/USBCore.cpp	/^volatile u8 _usbConfiguration = 0;$/;"	v
_usbCurrentStatus	arduino/USBCore.cpp	/^volatile u8 _usbCurrentStatus = 0; \/\/ meaning of bits see usb_20.pdf, Figure 9-4. Information Returned by a GetStatus() Request to a Device$/;"	v
_usbLineInfo	arduino/CDC.cpp	/^static volatile LineInfo _usbLineInfo = { 57600, 0x00, 0x00, 0x00, 0x00 };$/;"	v	file:
_usbSuspendState	arduino/USBCore.cpp	/^volatile u8 _usbSuspendState = 0; \/\/ copy of UDINT to check SUSPI and WAKEUPI bits$/;"	v
_useTimer1	Servo/src/avr/ServoTimers.h	36;"	d
_useTimer1	Servo/src/avr/ServoTimers.h	42;"	d
_useTimer1	Servo/src/avr/ServoTimers.h	47;"	d
_useTimer1	Servo/src/avr/ServoTimers.h	52;"	d
_useTimer1	Servo/src/avr/ServoTimers.h	56;"	d
_useTimer1	Servo/src/sam/ServoTimers.h	33;"	d
_useTimer1	Servo/src/samd/ServoTimers.h	36;"	d
_useTimer2	Servo/src/sam/ServoTimers.h	34;"	d
_useTimer3	Servo/src/avr/ServoTimers.h	37;"	d
_useTimer3	Servo/src/avr/ServoTimers.h	46;"	d
_useTimer3	Servo/src/avr/ServoTimers.h	51;"	d
_useTimer3	Servo/src/sam/ServoTimers.h	35;"	d
_useTimer4	Servo/src/avr/ServoTimers.h	38;"	d
_useTimer4	Servo/src/sam/ServoTimers.h	36;"	d
_useTimer5	Servo/src/avr/ServoTimers.h	35;"	d
_useTimer5	Servo/src/sam/ServoTimers.h	37;"	d
_valid	TFT/src/utility/PImage.h	/^  bool     _valid;$/;"	m	class:PImage
_voiceCallstatus	GSM/src/GSM3ShieldV1VoiceProvider.h	/^		GSM3_voiceCall_st _voiceCallstatus; \/\/ The voiceCall status$/;"	m	class:GSM3ShieldV1VoiceProvider
_width	Robot_Control/src/utility/Adafruit_GFX.h	/^    _width, _height, \/\/ Display w\/h as modified by current rotation$/;"	m	class:Adafruit_GFX
_width	TFT/src/utility/Adafruit_GFX.h	/^	_width, _height, \/\/ dependent on rotation$/;"	m	class:Adafruit_GFX
_written	arduino/HardwareSerial.h	/^    bool _written;$/;"	m	class:HardwareSerial
abs	SoftwareSerial/src/SoftwareSerial.h	120;"	d
abs	arduino/Arduino.h	89;"	d
abs	arduino/Arduino.h	94;"	d
accept	Ethernet/src/EthernetServer.cpp	/^void EthernetServer::accept()$/;"	f	class:EthernetServer
accessPoint	GSM/src/GSM3ShieldV1.h	/^		char* accessPoint;			\/\/APN.					$/;"	m	class:GSM3ShieldV1
activeProvider	GSM/src/GSM3ShieldV1ModemCore.h	/^		GSM3ShieldV1BaseProvider* activeProvider;$/;"	m	class:GSM3ShieldV1ModemCore
active_object	SoftwareSerial/src/SoftwareSerial.cpp	/^SoftwareSerial *SoftwareSerial::active_object = 0;$/;"	m	class:SoftwareSerial	file:
active_object	SoftwareSerial/src/SoftwareSerial.h	/^  static SoftwareSerial *active_object;$/;"	m	class:SoftwareSerial
acu	Robot_Motor/src/LineFollow.h	/^		int lectura_sensor[5], last_error, acu;$/;"	m	class:LineFollow
addCluster	Robot_Control/src/Fat16.cpp	/^uint8_t Fat16::addCluster(void) {$/;"	f	class:Fat16
addCluster	SD/src/utility/SdFile.cpp	/^uint8_t SdFile::addCluster() {$/;"	f	class:SdFile
addDirCluster	SD/src/utility/SdFile.cpp	/^uint8_t SdFile::addDirCluster(void) {$/;"	f	class:SdFile
addr	HID/src/HID.h	/^  uint8_t addr;$/;"	m	struct:__anon8
addr	arduino/USBCore.h	/^	u8 addr;$/;"	m	struct:__anon18
address	Robot_Control/src/ArduinoRobot.h	/^	uint16_t address;$/;"	m	struct:EEPROM_BMP
ajusta_niveles	Robot_Motor/src/lineFollow.cpp	/^void LineFollow::ajusta_niveles()$/;"	f	class:LineFollow
allocContiguous	SD/src/utility/SdVolume.cpp	/^uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {$/;"	f	class:SdVolume
allocSearchStart_	SD/src/utility/SdFat.h	/^  uint32_t allocSearchStart_;   \/\/ start cluster for alloc search$/;"	m	class:SdVolume
alternate	arduino/USBCore.h	/^	u8 alternate;$/;"	m	struct:__anon17
always1	Robot_Control/src/SdInfo.h	/^  unsigned always1 : 1;$/;"	m	struct:CID
always1	Robot_Control/src/SdInfo.h	/^  unsigned always1 : 1;$/;"	m	struct:CSD
always1	SD/src/utility/SdInfo.h	/^  unsigned always1 : 1;$/;"	m	struct:CID
always1	SD/src/utility/SdInfo.h	/^  unsigned always1 : 1;$/;"	m	struct:CSDV1
always1	SD/src/utility/SdInfo.h	/^  unsigned always1 : 1;$/;"	m	struct:CSDV2
analogInPinToBit	arduino/Arduino.h	159;"	d
analogInPinToBit	arduino/Arduino.h	180;"	d
analogRead	Robot_Control/src/Sensors.cpp	/^int RobotControl::analogRead(uint8_t port){$/;"	f	class:RobotControl
analogRead	arduino/wiring_analog.c	/^int analogRead(uint8_t pin)$/;"	f
analogReference	arduino/wiring_analog.c	/^void analogReference(uint8_t mode)$/;"	f
analogWrite	Robot_Control/src/Sensors.cpp	/^void RobotControl::analogWrite(uint8_t port, uint8_t value){$/;"	f	class:RobotControl
analogWrite	arduino/wiring_analog.c	/^void analogWrite(uint8_t pin, int val)$/;"	f
analog_reference	arduino/wiring_analog.c	/^uint8_t analog_reference = DEFAULT;$/;"	v
answerCall	GSM/src/GSM3MobileMockupProvider.h	/^		inline int answerCall(){return 0;};$/;"	f	class:GSM3MobileMockupProvider
answerCall	GSM/src/GSM3ShieldV1VoiceProvider.cpp	/^int GSM3ShieldV1VoiceProvider::answerCall()$/;"	f	class:GSM3ShieldV1VoiceProvider
answerCall	GSM/src/GSM3VoiceCallService.cpp	/^int GSM3VoiceCallService::answerCall()$/;"	f	class:GSM3VoiceCallService
answerCallContinue	GSM/src/GSM3ShieldV1VoiceProvider.cpp	/^void GSM3ShieldV1VoiceProvider::answerCallContinue()$/;"	f	class:GSM3ShieldV1VoiceProvider
arpeggio	Robot_Control/src/Squawk.cpp	/^static inline uint16_t arpeggio(uint8_t ch, uint8_t halftones) {$/;"	f	file:
atexit	arduino/main.cpp	/^int atexit(void (* \/*func*\/ )()) { return 0; }$/;"	f
attach	Firmata/Firmata.cpp	/^void FirmataClass::attach(byte command, callbackFunction newFunction)$/;"	f	class:FirmataClass
attach	Firmata/Firmata.cpp	/^void FirmataClass::attach(byte command, stringCallbackFunction newFunction)$/;"	f	class:FirmataClass
attach	Firmata/Firmata.cpp	/^void FirmataClass::attach(byte command, sysexCallbackFunction newFunction)$/;"	f	class:FirmataClass
attach	Firmata/Firmata.cpp	/^void FirmataClass::attach(byte command, systemResetCallbackFunction newFunction)$/;"	f	class:FirmataClass
attach	Firmata/utility/WiFiStream.h	/^  inline void attach( hostConnectionCallbackFunction newFunction ) { _currentHostConnectionCallback = newFunction; }$/;"	f	class:WiFiStream
attach	Servo/src/avr/Servo.cpp	/^uint8_t Servo::attach(int pin)$/;"	f	class:Servo
attach	Servo/src/avr/Servo.cpp	/^uint8_t Servo::attach(int pin, int min, int max)$/;"	f	class:Servo
attach	Servo/src/sam/Servo.cpp	/^uint8_t Servo::attach(int pin)$/;"	f	class:Servo
attach	Servo/src/sam/Servo.cpp	/^uint8_t Servo::attach(int pin, int min, int max)$/;"	f	class:Servo
attach	Servo/src/samd/Servo.cpp	/^uint8_t Servo::attach(int pin)$/;"	f	class:Servo
attach	Servo/src/samd/Servo.cpp	/^uint8_t Servo::attach(int pin, int min, int max)$/;"	f	class:Servo
attach	arduino/USBCore.cpp	/^void USBDevice_::attach()$/;"	f	class:USBDevice_
attachGPRS	GSM/src/GSM3ShieldV1DataNetworkProvider.cpp	/^GSM3_NetworkStatus_t GSM3ShieldV1DataNetworkProvider::attachGPRS(char* apn, char* user_name, char* password, bool synchronous)$/;"	f	class:GSM3ShieldV1DataNetworkProvider
attachGPRSContinue	GSM/src/GSM3ShieldV1DataNetworkProvider.cpp	/^void GSM3ShieldV1DataNetworkProvider::attachGPRSContinue()$/;"	f	class:GSM3ShieldV1DataNetworkProvider
attachInterrupt	SPI/src/SPI.h	/^  inline static void attachInterrupt() { SPCR |= _BV(SPIE); }$/;"	f	class:SPIClass
attachInterrupt	arduino/WInterrupts.c	/^void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {$/;"	f
attached	Servo/src/avr/Servo.cpp	/^bool Servo::attached()$/;"	f	class:Servo
attached	Servo/src/sam/Servo.cpp	/^bool Servo::attached()$/;"	f	class:Servo
attached	Servo/src/samd/Servo.cpp	/^bool Servo::attached()$/;"	f	class:Servo
attr	arduino/USBCore.h	/^	u8 attr;$/;"	m	struct:__anon18
attributes	Robot_Control/src/FatStructs.h	/^  uint8_t  attributes;$/;"	m	struct:directoryEntry
attributes	SD/src/utility/FatStructs.h	/^  uint8_t  attributes;$/;"	m	struct:directoryEntry
attributes	arduino/USBCore.h	/^	u8	attributes;$/;"	m	struct:__anon16
autoscroll	LiquidCrystal/src/LiquidCrystal.cpp	/^void LiquidCrystal::autoscroll(void) {$/;"	f	class:LiquidCrystal
available	Ethernet/src/EthernetClient.cpp	/^int EthernetClient::available() {$/;"	f	class:EthernetClient
available	Ethernet/src/EthernetServer.cpp	/^EthernetClient EthernetServer::available()$/;"	f	class:EthernetServer
available	Ethernet/src/EthernetUdp.cpp	/^int EthernetUDP::available() {$/;"	f	class:EthernetUDP
available	Firmata/Firmata.cpp	/^int FirmataClass::available(void)$/;"	f	class:FirmataClass
available	Firmata/utility/BLEStream.h	/^int BLEStream::available(void)$/;"	f	class:BLEStream
available	Firmata/utility/EthernetClientStream.h	/^EthernetClientStream::available()$/;"	f	class:EthernetClientStream
available	Firmata/utility/WiFiStream.h	/^  inline int available()$/;"	f	class:WiFiStream
available	GSM/src/GSM3MobileClientService.cpp	/^int GSM3MobileClientService::available()$/;"	f	class:GSM3MobileClientService
available	GSM/src/GSM3MobileServerService.cpp	/^GSM3MobileClientService GSM3MobileServerService::available(bool synch)$/;"	f	class:GSM3MobileServerService
available	GSM/src/GSM3SMSService.cpp	/^int GSM3SMSService::available()$/;"	f	class:GSM3SMSService
available	GSM/src/GSM3ShieldV1DirectModemProvider.cpp	/^int\/*bool*\/ GSM3ShieldV1DirectModemProvider::available()$/;"	f	class:GSM3ShieldV1DirectModemProvider
available	SD/src/File.cpp	/^int File::available() {$/;"	f	class:File
available	SoftwareSerial/src/SoftwareSerial.cpp	/^int SoftwareSerial::available()$/;"	f	class:SoftwareSerial
available	Wire/src/Wire.cpp	/^int TwoWire::available(void)$/;"	f	class:TwoWire
available	arduino/CDC.cpp	/^int Serial_::available(void)$/;"	f	class:Serial_
available	arduino/HardwareSerial.cpp	/^int HardwareSerial::available(void)$/;"	f	class:HardwareSerial
availableBytes	GSM/src/GSM3CircularBuffer.h	/^		inline byte availableBytes(){ return ((head-(tail+1))&__BUFFERMASK__);};$/;"	f	class:GSM3CircularBuffer
availableForWrite	arduino/CDC.cpp	/^int Serial_::availableForWrite(void)$/;"	f	class:Serial_
availableForWrite	arduino/HardwareSerial.cpp	/^int HardwareSerial::availableForWrite(void)$/;"	f	class:HardwareSerial
availableSMS	GSM/src/GSM3MobileMockupProvider.cpp	/^int GSM3MobileMockupProvider::availableSMS()$/;"	f	class:GSM3MobileMockupProvider
availableSMS	GSM/src/GSM3MobileSMSProvider.h	/^		virtual inline int availableSMS(){return 0;};$/;"	f	class:GSM3MobileSMSProvider
availableSMS	GSM/src/GSM3ShieldV1SMSProvider.cpp	/^int GSM3ShieldV1SMSProvider::availableSMS()$/;"	f	class:GSM3ShieldV1SMSProvider
availableSMSContinue	GSM/src/GSM3ShieldV1SMSProvider.cpp	/^void GSM3ShieldV1SMSProvider::availableSMSContinue()$/;"	f	class:GSM3ShieldV1SMSProvider
availableSocket	GSM/src/GSM3MobileMockupProvider.cpp	/^int GSM3MobileMockupProvider::availableSocket(int idsocket)$/;"	f	class:GSM3MobileMockupProvider
availableSocket	GSM/src/GSM3ShieldV1ClientProvider.cpp	/^int GSM3ShieldV1ClientProvider::availableSocket(bool client1Server0, int id_socket)$/;"	f	class:GSM3ShieldV1ClientProvider
availableSocket	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^int GSM3ShieldV1MultiClientProvider::availableSocket(bool client1Server0, int id_socket)$/;"	f	class:GSM3ShieldV1MultiClientProvider
availableSocketContinue	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^void GSM3ShieldV1MultiClientProvider::availableSocketContinue()$/;"	f	class:GSM3ShieldV1MultiClientProvider
averageAnalogInput	Robot_Control/src/keyboard.cpp	/^int RobotControl::averageAnalogInput(int pinNum)$/;"	f	class:RobotControl
bCharFormat	arduino/CDC.cpp	/^	u8	bCharFormat;$/;"	m	struct:__anon13	file:
bDataBits	arduino/CDC.cpp	/^	u8 	bDataBits;$/;"	m	struct:__anon13	file:
bDataInterface	arduino/USBCore.h	/^    u8 	bDataInterface;$/;"	m	struct:__anon22
bNumConfigurations	arduino/USBCore.h	/^	u8	bNumConfigurations;$/;"	m	struct:__anon15
bParityType	arduino/CDC.cpp	/^	u8 	bParityType;$/;"	m	struct:__anon13	file:
bRequest	arduino/USBAPI.h	/^	uint8_t bRequest;$/;"	m	struct:__anon12
backGround	Robot_Control/src/ArduinoRobot.h	/^		uint16_t backGround;\/\/background color$/;"	m	class:RobotControl
background	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::background(color c) {$/;"	f	class:Adafruit_GFX
background	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::background(uint8_t red, uint8_t green, uint8_t blue) {$/;"	f	class:Adafruit_GFX
background	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::background(color c) {$/;"	f	class:Adafruit_GFX
background	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::background(uint8_t red, uint8_t green, uint8_t blue) $/;"	f	class:Adafruit_GFX
baud	GSM/src/GSM3SoftSerial.cpp	/^  long baud;$/;"	m	struct:_DELAY_TABLE	file:
baud	arduino/CDC.cpp	/^unsigned long Serial_::baud() {$/;"	f	class:Serial_
beep	Robot_Control/src/Melody.cpp	/^void RobotControl::beep(int beep_length){$/;"	f	class:RobotControl
begin	EEPROM/src/EEPROM.h	/^    EEPtr begin()                        { return 0x00; }$/;"	f	struct:EEPROMClass
begin	Ethernet/src/Dns.cpp	/^void DNSClient::begin(const IPAddress& aDNSServer)$/;"	f	class:DNSClient
begin	Ethernet/src/Ethernet.cpp	/^int EthernetClass::begin(uint8_t *mac_address, unsigned long timeout, unsigned long responseTimeout)$/;"	f	class:EthernetClass
begin	Ethernet/src/Ethernet.cpp	/^void EthernetClass::begin(uint8_t *mac, IPAddress local_ip, IPAddress dns_server, IPAddress gateway, IPAddress subnet)$/;"	f	class:EthernetClass
begin	Ethernet/src/Ethernet.cpp	/^void EthernetClass::begin(uint8_t *mac_address, IPAddress local_ip)$/;"	f	class:EthernetClass
begin	Ethernet/src/Ethernet.cpp	/^void EthernetClass::begin(uint8_t *mac_address, IPAddress local_ip, IPAddress dns_server)$/;"	f	class:EthernetClass
begin	Ethernet/src/Ethernet.cpp	/^void EthernetClass::begin(uint8_t *mac_address, IPAddress local_ip, IPAddress dns_server, IPAddress gateway)$/;"	f	class:EthernetClass
begin	Ethernet/src/EthernetServer.cpp	/^void EthernetServer::begin()$/;"	f	class:EthernetServer
begin	Ethernet/src/EthernetUdp.cpp	/^uint8_t EthernetUDP::begin(uint16_t port) {$/;"	f	class:EthernetUDP
begin	Firmata/Firmata.cpp	/^void FirmataClass::begin(Stream &s)$/;"	f	class:FirmataClass
begin	Firmata/Firmata.cpp	/^void FirmataClass::begin(long speed)$/;"	f	class:FirmataClass
begin	Firmata/Firmata.cpp	/^void FirmataClass::begin(void)$/;"	f	class:FirmataClass
begin	Firmata/utility/BLEStream.h	/^void BLEStream::begin(...)$/;"	f	class:BLEStream
begin	Firmata/utility/WiFiStream.h	/^  inline int begin(char *ssid)$/;"	f	class:WiFiStream
begin	Firmata/utility/WiFiStream.h	/^  inline int begin(char *ssid, const char *passphrase)$/;"	f	class:WiFiStream
begin	Firmata/utility/WiFiStream.h	/^  inline int begin(char *ssid, uint8_t key_idx, const char *key)$/;"	f	class:WiFiStream
begin	GSM/src/GSM3MobileMockupProvider.cpp	/^int GSM3MobileMockupProvider::begin(char* pin)$/;"	f	class:GSM3MobileMockupProvider
begin	GSM/src/GSM3MobileServerService.cpp	/^void GSM3MobileServerService::begin()$/;"	f	class:GSM3MobileServerService
begin	GSM/src/GSM3ShieldV1AccessProvider.cpp	/^GSM3_NetworkStatus_t GSM3ShieldV1AccessProvider::begin(char* pin, bool restart, bool synchronous)$/;"	f	class:GSM3ShieldV1AccessProvider
begin	GSM/src/GSM3ShieldV1BandManagement.cpp	/^GSM3_NetworkStatus_t GSM3ShieldV1BandManagement::begin()$/;"	f	class:GSM3ShieldV1BandManagement
begin	GSM/src/GSM3ShieldV1DirectModemProvider.cpp	/^void GSM3ShieldV1DirectModemProvider::begin()$/;"	f	class:GSM3ShieldV1DirectModemProvider
begin	GSM/src/GSM3ShieldV1ModemVerification.cpp	/^int GSM3ShieldV1ModemVerification::begin()$/;"	f	class:GSM3ShieldV1ModemVerification
begin	GSM/src/GSM3ShieldV1PinManagement.cpp	/^void GSM3ShieldV1PinManagement::begin()$/;"	f	class:GSM3ShieldV1PinManagement
begin	GSM/src/GSM3ShieldV1ScanNetworks.cpp	/^GSM3_NetworkStatus_t GSM3ShieldV1ScanNetworks::begin()$/;"	f	class:GSM3ShieldV1ScanNetworks
begin	GSM/src/GSM3SoftSerial.cpp	/^int GSM3SoftSerial::begin(long speed)$/;"	f	class:GSM3SoftSerial
begin	HID/src/HID.cpp	/^int HID_::begin(void)$/;"	f	class:HID_
begin	LiquidCrystal/src/LiquidCrystal.cpp	/^void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {$/;"	f	class:LiquidCrystal
begin	Robot_Control/src/ArduinoRobot.cpp	/^void RobotControl::begin(){$/;"	f	class:RobotControl
begin	Robot_Control/src/Compass.cpp	/^void Compass::begin(){$/;"	f	class:Compass
begin	Robot_Control/src/EEPROM_I2C.cpp	/^void EEPROM_I2C::begin(){$/;"	f	class:EEPROM_I2C
begin	Robot_Control/src/EasyTransfer2.cpp	/^void EasyTransfer2::begin(HardwareSerial *theSerial){$/;"	f	class:EasyTransfer2
begin	Robot_Control/src/Multiplexer.cpp	/^void Multiplexer::begin(uint8_t* selectors, uint8_t Z, uint8_t length){$/;"	f	class:Multiplexer
begin	Robot_Control/src/Squawk.cpp	/^void SquawkSynth::begin(uint16_t hz) {$/;"	f	class:SquawkSynth
begin	Robot_Motor/src/ArduinoRobotMotorBoard.cpp	/^void RobotMotorBoard::begin(){$/;"	f	class:RobotMotorBoard
begin	Robot_Motor/src/EasyTransfer2.cpp	/^void EasyTransfer2::begin(HardwareSerial *theSerial){$/;"	f	class:EasyTransfer2
begin	Robot_Motor/src/Multiplexer.cpp	/^void Multiplexer::begin(uint8_t* selectors, uint8_t Z, uint8_t length){$/;"	f	class:Multiplexer
begin	SD/src/SD.cpp	/^boolean SDClass::begin(uint32_t clock, uint8_t csPin) {$/;"	f	class:SDLib::SDClass
begin	SD/src/SD.cpp	/^boolean SDClass::begin(uint8_t csPin) {$/;"	f	class:SDLib::SDClass
begin	SPI/src/SPI.cpp	/^void SPIClass::begin()$/;"	f	class:SPIClass
begin	SoftwareSerial/src/SoftwareSerial.cpp	/^void SoftwareSerial::begin(long speed)$/;"	f	class:SoftwareSerial
begin	TFT/src/TFT.cpp	/^void TFT::begin() {$/;"	f	class:TFT
begin	Wire/src/Wire.cpp	/^void TwoWire::begin(int address)$/;"	f	class:TwoWire
begin	Wire/src/Wire.cpp	/^void TwoWire::begin(uint8_t address)$/;"	f	class:TwoWire
begin	Wire/src/Wire.cpp	/^void TwoWire::begin(void)$/;"	f	class:TwoWire
begin	arduino/CDC.cpp	/^void Serial_::begin(unsigned long \/* baud_count *\/)$/;"	f	class:Serial_
begin	arduino/CDC.cpp	/^void Serial_::begin(unsigned long \/* baud_count *\/, byte \/* config *\/)$/;"	f	class:Serial_
begin	arduino/HardwareSerial.cpp	/^void HardwareSerial::begin(unsigned long baud, byte config)$/;"	f	class:HardwareSerial
begin	arduino/HardwareSerial.h	/^    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }$/;"	f	class:HardwareSerial
begin	arduino/WString.h	/^	char* begin() { return buffer; }$/;"	f	class:String
begin	arduino/WString.h	/^	const char* begin() const { return c_str(); }$/;"	f	class:String
beginBMPFromEEPROM	Robot_Control/src/lcd.cpp	/^void RobotControl::beginBMPFromEEPROM(){$/;"	f	class:RobotControl
beginCylinderHigh	Robot_Control/src/FatStructs.h	/^  unsigned beginCylinderHigh : 2;$/;"	m	struct:partitionTable
beginCylinderHigh	SD/src/utility/FatStructs.h	/^  unsigned beginCylinderHigh : 2;$/;"	m	struct:partitionTable
beginCylinderLow	Robot_Control/src/FatStructs.h	/^  uint8_t  beginCylinderLow;$/;"	m	struct:partitionTable
beginCylinderLow	SD/src/utility/FatStructs.h	/^  uint8_t  beginCylinderLow;$/;"	m	struct:partitionTable
beginHead	Robot_Control/src/FatStructs.h	/^  uint8_t  beginHead;$/;"	m	struct:partitionTable
beginHead	SD/src/utility/FatStructs.h	/^  uint8_t  beginHead;$/;"	m	struct:partitionTable
beginIRremote	Robot_IR_Remote/src/IRremoteTools.cpp	/^void beginIRremote(){$/;"	f
beginMulticast	Ethernet/src/EthernetUdp.cpp	/^uint8_t EthernetUDP::beginMulticast(IPAddress ip, uint16_t port)$/;"	f	class:EthernetUDP
beginMulticast	arduino/Udp.h	/^  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  \/\/ initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure$/;"	f	class:UDP
beginPacket	Ethernet/src/EthernetUdp.cpp	/^int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)$/;"	f	class:EthernetUDP
beginPacket	Ethernet/src/EthernetUdp.cpp	/^int EthernetUDP::beginPacket(const char *host, uint16_t port)$/;"	f	class:EthernetUDP
beginSD	Robot_Control/src/RobotSdCard.cpp	/^void RobotControl::beginSD(){$/;"	f	class:RobotControl
beginSMS	GSM/src/GSM3MobileMockupProvider.cpp	/^int GSM3MobileMockupProvider::beginSMS(const char* number)$/;"	f	class:GSM3MobileMockupProvider
beginSMS	GSM/src/GSM3MobileSMSProvider.h	/^		virtual inline int beginSMS(const char* to){return 0;};$/;"	f	class:GSM3MobileSMSProvider
beginSMS	GSM/src/GSM3SMSService.cpp	/^int GSM3SMSService::beginSMS(const char *number)$/;"	f	class:GSM3SMSService
beginSMS	GSM/src/GSM3ShieldV1SMSProvider.cpp	/^int GSM3ShieldV1SMSProvider::beginSMS(const char* to)$/;"	f	class:GSM3ShieldV1SMSProvider
beginSMSContinue	GSM/src/GSM3ShieldV1SMSProvider.cpp	/^void GSM3ShieldV1SMSProvider::beginSMSContinue()$/;"	f	class:GSM3ShieldV1SMSProvider
beginSector	Robot_Control/src/FatStructs.h	/^  unsigned beginSector : 6;$/;"	m	struct:partitionTable
beginSector	SD/src/utility/FatStructs.h	/^  unsigned beginSector : 6;$/;"	m	struct:partitionTable
beginSpeaker	Robot_Control/src/Melody.cpp	/^void RobotControl::beginSpeaker(uint16_t frequency){$/;"	f	class:RobotControl
beginTFT	Robot_Control/src/lcd.cpp	/^void RobotControl::beginTFT(uint16_t foreGround, uint16_t backGround){$/;"	f	class:RobotControl
beginTransaction	SPI/src/SPI.h	/^  inline static void beginTransaction(SPISettings settings) {$/;"	f	class:SPIClass
beginTransmission	Wire/src/Wire.cpp	/^void TwoWire::beginTransmission(int address)$/;"	f	class:TwoWire
beginTransmission	Wire/src/Wire.cpp	/^void TwoWire::beginTransmission(uint8_t address)$/;"	f	class:TwoWire
beginWithDHCP	Ethernet/src/Dhcp.cpp	/^int DhcpClass::beginWithDHCP(uint8_t *mac, unsigned long timeout, unsigned long responseTimeout)$/;"	f	class:DhcpClass
beginWrite	GSM/src/GSM3MobileClientService.cpp	/^void GSM3MobileClientService::beginWrite(bool sync)$/;"	f	class:GSM3MobileClientService
beginWrite	GSM/src/GSM3MobileServerService.cpp	/^void GSM3MobileServerService::beginWrite()$/;"	f	class:GSM3MobileServerService
beginWriteSocket	GSM/src/GSM3ShieldV1ClientProvider.cpp	/^void GSM3ShieldV1ClientProvider::beginWriteSocket(bool client1Server0, int id_socket)$/;"	f	class:GSM3ShieldV1ClientProvider
beginWriteSocket	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^void GSM3ShieldV1MultiClientProvider::beginWriteSocket(bool client1Server0, int id_socket)$/;"	f	class:GSM3ShieldV1MultiClientProvider
beginWriteSocketContinue	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^void GSM3ShieldV1MultiClientProvider::beginWriteSocketContinue()$/;"	f	class:GSM3ShieldV1MultiClientProvider
biosParmBlock	Robot_Control/src/FatStructs.h	/^struct biosParmBlock {$/;"	s
biosParmBlock	SD/src/utility/FatStructs.h	/^struct biosParmBlock {$/;"	s
bit	SD/src/utility/Sd2PinMap.h	/^  uint8_t bit;$/;"	m	struct:pin_map_t
bit	arduino/Arduino.h	123;"	d
bitClear	arduino/Arduino.h	113;"	d
bitRead	arduino/Arduino.h	111;"	d
bitSet	arduino/Arduino.h	112;"	d
bitWrite	arduino/Arduino.h	114;"	d
bits	Robot_IR_Remote/src/IRremote.h	/^  int bits; \/\/ Number of bits in decoded value$/;"	m	class:decode_results
blink	LiquidCrystal/src/LiquidCrystal.cpp	/^void LiquidCrystal::blink() {$/;"	f	class:LiquidCrystal
blink13	Robot_IR_Remote/src/IRremote.cpp	/^void IRrecv::blink13(int blinkflag)$/;"	f	class:IRrecv
blinkVersion	Firmata/Firmata.cpp	/^void FirmataClass::blinkVersion(void)$/;"	f	class:FirmataClass
blinkVersionDisabled	Firmata/Firmata.h	/^    boolean blinkVersionDisabled;$/;"	m	class:FirmataClass
blinkflag	Robot_IR_Remote/src/IRremoteInt.h	/^  uint8_t blinkflag;         \/\/ TRUE to enable blinking of pin 13 on IR processing$/;"	m	struct:__anon2
blockNumber	SD/src/utility/SdFat.h	/^  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {$/;"	f	class:SdVolume
blockOfCluster	Robot_Control/src/Fat16.h	/^  static uint8_t blockOfCluster(uint32_t position) {$/;"	f	class:Fat16
blockOfCluster	SD/src/utility/SdFat.h	/^  uint8_t blockOfCluster(uint32_t position) const {$/;"	f	class:SdVolume
block_	SD/src/utility/Sd2Card.h	/^  uint32_t block_;$/;"	m	class:Sd2Card
blocksPerCluster	SD/src/utility/SdFat.h	/^  uint8_t blocksPerCluster(void) const {return blocksPerCluster_;}$/;"	f	class:SdVolume
blocksPerCluster_	Robot_Control/src/Fat16.cpp	/^uint8_t  Fat16::blocksPerCluster_;       \/\/ must be power of 2$/;"	m	class:Fat16	file:
blocksPerCluster_	Robot_Control/src/Fat16.h	/^  static uint8_t  blocksPerCluster_;   \/\/ must be power of 2$/;"	m	class:Fat16
blocksPerCluster_	SD/src/utility/SdFat.h	/^  uint8_t blocksPerCluster_;    \/\/ cluster size in blocks$/;"	m	class:SdVolume
blocksPerFat	SD/src/utility/SdFat.h	/^  uint32_t blocksPerFat(void)  const {return blocksPerFat_;}$/;"	f	class:SdVolume
blocksPerFat_	Robot_Control/src/Fat16.cpp	/^fat_t    Fat16::blocksPerFat_;           \/\/ number of blocks in one FAT$/;"	m	class:Fat16	file:
blocksPerFat_	Robot_Control/src/Fat16.h	/^  static fat_t    blocksPerFat_;       \/\/ number of blocks in one FAT$/;"	m	class:Fat16
blocksPerFat_	SD/src/utility/SdFat.h	/^  uint32_t blocksPerFat_;       \/\/ FAT size in blocks$/;"	m	class:SdVolume
bmCapabilities	arduino/USBCore.h	/^    u8 	bmCapabilities;$/;"	m	struct:__anon22
bmCapabilities	arduino/USBCore.h	/^    u8 	bmCapabilities;$/;"	m	struct:__anon23
bmRequestType	arduino/USBAPI.h	/^	uint8_t bmRequestType;$/;"	m	struct:__anon12
boolean	arduino/Arduino.h	/^typedef bool boolean;$/;"	t
boot	Robot_Control/src/FatStructs.h	/^  uint8_t  boot;$/;"	m	struct:partitionTable
boot	SD/src/utility/FatStructs.h	/^  uint8_t  boot;$/;"	m	struct:partitionTable
bootCode	Robot_Control/src/FatStructs.h	/^  uint8_t  bootCode[420];$/;"	m	struct:fat32BootSector
bootCode	SD/src/utility/FatStructs.h	/^  uint8_t  bootCode[420];$/;"	m	struct:fat32BootSector
bootSectorSig0	Robot_Control/src/FatStructs.h	/^  uint8_t  bootSectorSig0;$/;"	m	struct:fat32BootSector
bootSectorSig0	SD/src/utility/FatStructs.h	/^  uint8_t  bootSectorSig0;$/;"	m	struct:fat32BootSector
bootSectorSig1	Robot_Control/src/FatStructs.h	/^  uint8_t  bootSectorSig1;$/;"	m	struct:fat32BootSector
bootSectorSig1	SD/src/utility/FatStructs.h	/^  uint8_t  bootSectorSig1;$/;"	m	struct:fat32BootSector
bootSignature	Robot_Control/src/FatStructs.h	/^  uint8_t  bootSignature;$/;"	m	struct:fat32BootSector
bootSignature	SD/src/utility/FatStructs.h	/^  uint8_t  bootSignature;$/;"	m	struct:fat32BootSector
bpb	Robot_Control/src/FatStructs.h	/^  bpb_t    bpb;$/;"	m	struct:fat32BootSector
bpb	SD/src/utility/FatStructs.h	/^  bpb_t    bpb;$/;"	m	struct:fat32BootSector
bpb_t	Robot_Control/src/FatStructs.h	/^typedef struct biosParmBlock bpb_t;$/;"	t	typeref:struct:biosParmBlock
bpb_t	SD/src/utility/FatStructs.h	/^typedef struct biosParmBlock bpb_t;$/;"	t	typeref:struct:biosParmBlock
breakValue	arduino/CDC.cpp	/^static volatile int32_t breakValue = -1;$/;"	v	file:
buffer	Robot_Control/examples/explore/R06_Wheel_Calibration/scripts_library.h	/^char buffer[42];\/\/must be longer than text$/;"	v
buffer	arduino/WString.h	/^	char *buffer;	        \/\/ the actual char array$/;"	m	class:String
bufferData	Ethernet/src/utility/socket.cpp	/^uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)$/;"	f
bufferICCID	GSM/src/GSM3ShieldV1CellManagement.h	/^		char *bufferICCID;$/;"	m	class:GSM3ShieldV1CellManagement
byte	GSM/src/GSM3CircularBuffer.h	42;"	d
byte	SoftwareSerial/src/SoftwareSerial.h	118;"	d
byte	arduino/Arduino.h	/^typedef uint8_t byte;$/;"	t
bytes	arduino/IPAddress.h	/^	uint8_t bytes[4];  \/\/ IPv4 address$/;"	m	union:IPAddress::__anon14
bytesPerSector	Robot_Control/src/FatStructs.h	/^  uint16_t bytesPerSector;$/;"	m	struct:biosParmBlock
bytesPerSector	SD/src/utility/FatStructs.h	/^  uint16_t bytesPerSector;$/;"	m	struct:biosParmBlock
c_size_high	Robot_Control/src/SdInfo.h	/^  unsigned c_size_high : 2;$/;"	m	struct:CSD
c_size_high	SD/src/utility/SdInfo.h	/^  unsigned c_size_high : 2;$/;"	m	struct:CSDV1
c_size_high	SD/src/utility/SdInfo.h	/^  unsigned c_size_high : 6;$/;"	m	struct:CSDV2
c_size_low	Robot_Control/src/SdInfo.h	/^  unsigned c_size_low :2;$/;"	m	struct:CSD
c_size_low	SD/src/utility/SdInfo.h	/^  uint8_t c_size_low;$/;"	m	struct:CSDV2
c_size_low	SD/src/utility/SdInfo.h	/^  unsigned c_size_low :2;$/;"	m	struct:CSDV1
c_size_mid	Robot_Control/src/SdInfo.h	/^  uint8_t c_size_mid;$/;"	m	struct:CSD
c_size_mid	SD/src/utility/SdInfo.h	/^  uint8_t c_size_mid;$/;"	m	struct:CSDV1
c_size_mid	SD/src/utility/SdInfo.h	/^  uint8_t c_size_mid;$/;"	m	struct:CSDV2
c_size_mult_high	Robot_Control/src/SdInfo.h	/^  unsigned c_size_mult_high : 2;$/;"	m	struct:CSD
c_size_mult_high	SD/src/utility/SdInfo.h	/^  unsigned c_size_mult_high : 2;$/;"	m	struct:CSDV1
c_size_mult_low	Robot_Control/src/SdInfo.h	/^  unsigned c_size_mult_low : 1;$/;"	m	struct:CSD
c_size_mult_low	SD/src/utility/SdInfo.h	/^  unsigned c_size_mult_low : 1;$/;"	m	struct:CSDV1
c_str	arduino/WString.h	/^	const char* c_str() const { return buffer; }$/;"	f	class:String
cache16_t	Robot_Control/src/Fat16.h	/^union cache16_t {$/;"	u
cacheBlockNumber_	Robot_Control/src/Fat16.cpp	/^uint32_t Fat16::cacheBlockNumber_ = 0XFFFFFFFF;  \/\/ init to invalid block number$/;"	m	class:Fat16	file:
cacheBlockNumber_	Robot_Control/src/Fat16.h	/^  static uint32_t cacheBlockNumber_;  \/\/ Logical number of block in the cache$/;"	m	class:Fat16
cacheBlockNumber_	SD/src/utility/SdFat.h	/^  static uint32_t cacheBlockNumber_;  \/\/ Logical number of block in the cache$/;"	m	class:SdVolume
cacheBlockNumber_	SD/src/utility/SdVolume.cpp	/^uint32_t SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;$/;"	m	class:SdVolume	file:
cacheBuffer_	Robot_Control/src/Fat16.cpp	/^cache16_t  Fat16::cacheBuffer_;         \/\/ 512 byte cache for SdCard$/;"	m	class:Fat16	file:
cacheBuffer_	Robot_Control/src/Fat16.h	/^  static cache16_t cacheBuffer_;      \/\/ 512 byte cache for raw blocks$/;"	m	class:Fat16
cacheBuffer_	SD/src/utility/SdFat.h	/^  static cache_t cacheBuffer_;        \/\/ 512 byte cache for device blocks$/;"	m	class:SdVolume
cacheBuffer_	SD/src/utility/SdVolume.cpp	/^cache_t  SdVolume::cacheBuffer_;     \/\/ 512 byte cache for Sd2Card$/;"	m	class:SdVolume	file:
cacheClear	SD/src/utility/SdFat.h	/^  static uint8_t* cacheClear(void) {$/;"	f	class:SdVolume
cacheDataOffset	Robot_Control/src/Fat16.h	/^  static uint16_t cacheDataOffset(uint32_t position) {return position & 0X1FF;}$/;"	f	class:Fat16
cacheDirEntry	Robot_Control/src/Fat16.cpp	/^dir_t* Fat16::cacheDirEntry(uint16_t index, uint8_t action) {$/;"	f	class:Fat16
cacheDirEntry	SD/src/utility/SdFile.cpp	/^dir_t* SdFile::cacheDirEntry(uint8_t action) {$/;"	f	class:SdFile
cacheDirty_	Robot_Control/src/Fat16.cpp	/^uint8_t  Fat16::cacheDirty_ = 0;        \/\/ cacheFlush() will write block if true$/;"	m	class:Fat16	file:
cacheDirty_	Robot_Control/src/Fat16.h	/^  static uint8_t cacheDirty_;         \/\/ cacheFlush() will write block if true$/;"	m	class:Fat16
cacheDirty_	SD/src/utility/SdFat.h	/^  static uint8_t cacheDirty_;         \/\/ cacheFlush() will write block if true$/;"	m	class:SdVolume
cacheDirty_	SD/src/utility/SdVolume.cpp	/^uint8_t  SdVolume::cacheDirty_ = 0;  \/\/ cacheFlush() will write block if true$/;"	m	class:SdVolume	file:
cacheFlush	Robot_Control/src/Fat16.cpp	/^uint8_t Fat16::cacheFlush(void) {$/;"	f	class:Fat16
cacheFlush	SD/src/utility/SdVolume.cpp	/^uint8_t SdVolume::cacheFlush(void) {$/;"	f	class:SdVolume
cacheMirrorBlock_	Robot_Control/src/Fat16.cpp	/^uint32_t Fat16::cacheMirrorBlock_ = 0;  \/\/ mirror  block for second FAT$/;"	m	class:Fat16	file:
cacheMirrorBlock_	Robot_Control/src/Fat16.h	/^  static uint32_t cacheMirrorBlock_;  \/\/ mirror block for second FAT$/;"	m	class:Fat16
cacheMirrorBlock_	SD/src/utility/SdFat.h	/^  static uint32_t cacheMirrorBlock_;  \/\/ block number for mirror FAT$/;"	m	class:SdVolume
cacheMirrorBlock_	SD/src/utility/SdVolume.cpp	/^uint32_t SdVolume::cacheMirrorBlock_ = 0;  \/\/ mirror  block for second FAT$/;"	m	class:SdVolume	file:
cacheRawBlock	Robot_Control/src/Fat16.cpp	/^uint8_t Fat16::cacheRawBlock(uint32_t blockNumber, uint8_t action) {$/;"	f	class:Fat16
cacheRawBlock	SD/src/utility/SdVolume.cpp	/^uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {$/;"	f	class:SdVolume
cacheSetDirty	Robot_Control/src/Fat16.h	/^  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}$/;"	f	class:Fat16
cacheSetDirty	SD/src/utility/SdFat.h	/^  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}$/;"	f	class:SdVolume
cacheZeroBlock	SD/src/utility/SdVolume.cpp	/^uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {$/;"	f	class:SdVolume
cache_t	SD/src/utility/SdFat.h	/^union cache_t {$/;"	u
calc_CS	Robot_Control/src/EasyTransfer2.h	/^uint8_t calc_CS;	   \/\/calculated Chacksum$/;"	m	class:EasyTransfer2
calc_CS	Robot_Motor/src/EasyTransfer2.h	/^uint8_t calc_CS;	   \/\/calculated Chacksum$/;"	m	class:EasyTransfer2
calibIRs	Robot_Motor/src/lineFollow.cpp	/^void LineFollow::calibIRs(){$/;"	f	class:LineFollow
callManagement	arduino/USBCore.h	/^	CMFunctionalDescriptor		callManagement;			\/\/ Call Management$/;"	m	struct:__anon24
callbackFunction	Firmata/Firmata.h	/^  typedef void (*callbackFunction)(byte, int);$/;"	t
callback_makeDirPath	SD/src/SD.cpp	/^boolean callback_makeDirPath(SdFile& parentDir, const char *filePathComponent, $/;"	f	namespace:SDLib
callback_pathExists	SD/src/SD.cpp	/^boolean callback_pathExists(SdFile& parentDir, const char *filePathComponent, $/;"	f	namespace:SDLib
callback_remove	SD/src/SD.cpp	/^boolean callback_remove(SdFile& parentDir, const char *filePathComponent, $/;"	f	namespace:SDLib
callback_rmdir	SD/src/SD.cpp	/^boolean callback_rmdir(SdFile& parentDir, const char *filePathComponent, $/;"	f	namespace:SDLib
capacity	arduino/WString.h	/^	unsigned int capacity;  \/\/ the array length minus one (for the '\\0')$/;"	m	class:String
card	Robot_Control/src/ArduinoRobot.h	/^		SdCard card;$/;"	m	class:RobotControl
card	SD/src/SD.h	/^  Sd2Card card;$/;"	m	class:SDLib::SDClass
cardAcmd	Robot_Control/src/SdCard.cpp	/^uint8_t SdCard::cardAcmd(uint8_t cmd, uint32_t arg) {$/;"	f	class:SdCard
cardAcmd	SD/src/utility/Sd2Card.h	/^  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {$/;"	f	class:Sd2Card
cardCommand	Robot_Control/src/SdCard.cpp	/^uint8_t SdCard::cardCommand(uint8_t cmd, uint32_t arg) {$/;"	f	class:SdCard
cardCommand	SD/src/utility/Sd2Card.cpp	/^uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {$/;"	f	class:Sd2Card
cardSize	Robot_Control/src/SdCard.cpp	/^uint32_t SdCard::cardSize(void) {$/;"	f	class:SdCard
cardSize	SD/src/utility/Sd2Card.cpp	/^uint32_t Sd2Card::cardSize(void) {$/;"	f	class:Sd2Card
cb	GSM/src/GSM3SoftSerial.h	/^		GSM3CircularBuffer cb; \/\/ Circular buffer$/;"	m	class:GSM3SoftSerial
cbi	Robot_IR_Remote/src/IRremoteInt.h	84;"	d
cbi	Wire/src/utility/twi.c	31;"	d	file:
cbi	arduino/wiring_private.h	38;"	d
cbm	GSM/src/GSM3CircularBuffer.h	/^		GSM3CircularBufferManager* cbm; \/\/ Circular buffer manager$/;"	m	class:GSM3CircularBuffer
ccc_high	Robot_Control/src/SdInfo.h	/^  uint8_t ccc_high;$/;"	m	struct:CSD
ccc_high	SD/src/utility/SdInfo.h	/^  uint8_t ccc_high;$/;"	m	struct:CSDV1
ccc_high	SD/src/utility/SdInfo.h	/^  uint8_t ccc_high;$/;"	m	struct:CSDV2
ccc_low	Robot_Control/src/SdInfo.h	/^  unsigned ccc_low : 4;$/;"	m	struct:CSD
ccc_low	SD/src/utility/SdInfo.h	/^  unsigned ccc_low : 4;$/;"	m	struct:CSDV1
ccc_low	SD/src/utility/SdInfo.h	/^  unsigned ccc_low : 4;$/;"	m	struct:CSDV2
cel	Robot_Control/src/Squawk.cpp	/^static cel_t    cel[4];$/;"	v	file:
cel_t	Robot_Control/src/Squawk.cpp	/^} cel_t;$/;"	t	typeref:struct:__anon5	file:
cellId	GSM/src/GSM3ShieldV1CellManagement.h	/^		char *cellId;$/;"	m	class:GSM3ShieldV1CellManagement
chaddr	Ethernet/src/Dhcp.h	/^	uint8_t  chaddr[6];$/;"	m	struct:_RIP_MSG_FIXED
chainSize	SD/src/utility/SdVolume.cpp	/^uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {$/;"	f	class:SdVolume
changeBuffer	arduino/WString.cpp	/^unsigned char String::changeBuffer(unsigned int maxStrLen)$/;"	f	class:String
changePIN	GSM/src/GSM3ShieldV1PinManagement.cpp	/^void GSM3ShieldV1PinManagement::changePIN(String old, String pin)$/;"	f	class:GSM3ShieldV1PinManagement
char	SoftwareSerial/src/SoftwareSerial.h	116;"	d
charAt	arduino/WString.cpp	/^char String::charAt(unsigned int loc) const$/;"	f	class:String
charWidth	Robot_Control/src/utility/RobotTextManager.cpp	/^const int TextManager::charWidth=6;$/;"	m	class:TextManager	file:
charWidth	Robot_Control/src/utility/RobotTextManager.h	/^    static const int charWidth;\/\/5+1=6$/;"	m	class:TextManager
checkLease	Ethernet/src/Dhcp.cpp	/^int DhcpClass::checkLease(){$/;"	f	class:DhcpClass
checkPIN	GSM/src/GSM3ShieldV1PinManagement.cpp	/^int GSM3ShieldV1PinManagement::checkPIN(String pin)$/;"	f	class:GSM3ShieldV1PinManagement
checkPUK	GSM/src/GSM3ShieldV1PinManagement.cpp	/^int GSM3ShieldV1PinManagement::checkPUK(String puk, String pin)$/;"	f	class:GSM3ShieldV1PinManagement
checkReg	GSM/src/GSM3ShieldV1PinManagement.cpp	/^int GSM3ShieldV1PinManagement::checkReg()$/;"	f	class:GSM3ShieldV1PinManagement
checkSecondBuffer	GSM/src/GSM3ShieldV1SMSProvider.h	/^		bool checkSecondBuffer; \/\/ Pending to detect if the second buffer has more than 1 SMS.$/;"	m	class:GSM3ShieldV1SMSProvider
checkSerial	Firmata/utility/SerialFirmata.cpp	/^void SerialFirmata::checkSerial()$/;"	f	class:SerialFirmata
chipSelectHigh	Robot_Control/src/SdCard.cpp	/^void SdCard::chipSelectHigh(void) {$/;"	f	class:SdCard
chipSelectHigh	SD/src/utility/Sd2Card.cpp	/^void Sd2Card::chipSelectHigh(void) {$/;"	f	class:Sd2Card
chipSelectLow	Robot_Control/src/SdCard.cpp	/^void SdCard::chipSelectLow(void) {$/;"	f	class:SdCard
chipSelectLow	SD/src/utility/Sd2Card.cpp	/^void Sd2Card::chipSelectLow(void) {$/;"	f	class:Sd2Card
chipSelectPin_	Robot_Control/src/SdCard.h	/^  uint8_t chipSelectPin_;$/;"	m	class:SdCard
chipSelectPin_	SD/src/utility/Sd2Card.h	/^  uint8_t chipSelectPin_;$/;"	m	class:Sd2Card
chip_select_asserted	SD/src/utility/Sd2Card.cpp	/^static uint8_t chip_select_asserted = 0;$/;"	v	file:
chopUntil	GSM/src/GSM3CircularBuffer.cpp	/^bool GSM3CircularBuffer::chopUntil(const char* reference, bool movetotheend, bool usehead)$/;"	f	class:GSM3CircularBuffer
ciaddr	Ethernet/src/Dhcp.h	/^	uint8_t  ciaddr[4];$/;"	m	struct:_RIP_MSG_FIXED
cid_t	Robot_Control/src/SdInfo.h	/^}cid_t;$/;"	t	typeref:struct:CID
cid_t	SD/src/utility/SdInfo.h	/^}cid_t;$/;"	t	typeref:struct:CID
cif	arduino/USBCore.h	/^	InterfaceDescriptor			cif;	\/\/ $/;"	m	struct:__anon24
cifin	arduino/USBCore.h	/^	EndpointDescriptor			cifin;$/;"	m	struct:__anon24
circle	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::circle(int16_t x, int16_t y, int16_t r) {$/;"	f	class:Adafruit_GFX
circle	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::circle(int16_t x, int16_t y, int16_t r) $/;"	f	class:Adafruit_GFX
cityNameRead	Robot_Control/src/ArduinoRobot.h	/^inline void RobotControl::cityNameRead(char* container){$/;"	f	class:RobotControl
cityNameWrite	Robot_Control/src/ArduinoRobot.h	/^inline void RobotControl::cityNameWrite(char* text){$/;"	f	class:RobotControl
clear	LiquidCrystal/src/LiquidCrystal.cpp	/^void LiquidCrystal::clear()$/;"	f	class:LiquidCrystal
clearScreen	Robot_Control/src/lcd.cpp	/^void RobotControl::clearScreen(){$/;"	f	class:RobotControl
clearUnbufferedRead	SD/src/utility/SdFat.h	/^  void clearUnbufferedRead(void) {$/;"	f	class:SdFile
clearWriteError	arduino/Print.h	/^    void clearWriteError() { setWriteError(0); }$/;"	f	class:Print
clen	arduino/USBCore.h	/^	u16 clen;			\/\/ total length$/;"	m	struct:__anon16
client	Firmata/examples/StandardFirmataEthernet/ethernetConfig.h	/^EthernetClient client;$/;"	v
client	Firmata/examples/StandardFirmataEthernet/ethernetConfig.h	/^YunClient client;$/;"	v
client	Firmata/utility/EthernetClientStream.h	/^    Client &client;$/;"	m	class:EthernetClientStream
client1_server0	GSM/src/GSM3ShieldV1MultiClientProvider.h	/^		bool client1_server0;	\/\/1 Client, 0 Server.$/;"	m	class:GSM3ShieldV1MultiClientProvider
client_h	arduino/Client.h	21;"	d
clkpinmask	Robot_Control/src/Arduino_LCD.h	/^           datapinmask, clkpinmask, cspinmask, rspinmask,$/;"	m	class:Arduino_LCD
clkpinmask	TFT/src/utility/Adafruit_ST7735.h	/^           datapinmask, clkpinmask, cspinmask, rspinmask,$/;"	m	class:Adafruit_ST7735
clkport	Robot_Control/src/Arduino_LCD.h	/^  volatile uint8_t *dataport, *clkport, *csport, *rsport;$/;"	m	class:Arduino_LCD
clkport	TFT/src/utility/Adafruit_ST7735.h	/^  volatile uint32_t *dataport, *clkport, *csport, *rsport;$/;"	m	class:Adafruit_ST7735
clkport	TFT/src/utility/Adafruit_ST7735.h	/^  volatile uint8_t *dataport, *clkport, *csport, *rsport;$/;"	m	class:Adafruit_ST7735
clockCyclesPerMicrosecond	arduino/Arduino.h	104;"	d
clockCyclesToMicroseconds	arduino/Arduino.h	105;"	d
close	Ethernet/src/utility/socket.cpp	/^void close(SOCKET s)$/;"	f
close	GSM/src/GSM3SoftSerial.cpp	/^void GSM3SoftSerial::close()$/;"	f	class:GSM3SoftSerial
close	Robot_Control/src/Fat16.cpp	/^uint8_t Fat16::close(void) {$/;"	f	class:Fat16
close	SD/src/File.cpp	/^void File::close() {$/;"	f	class:File
close	SD/src/utility/SdFile.cpp	/^uint8_t SdFile::close(void) {$/;"	f	class:SdFile
close	TFT/src/utility/PImage.h	/^  void close() { _bmpFile.close(); }$/;"	f	class:PImage
closeCommand	GSM/src/GSM3MobileMockupProvider.h	/^		inline void closeCommand(int code){};$/;"	f	class:GSM3MobileMockupProvider
closeCommand	GSM/src/GSM3MobileNetworkProvider.h	/^		virtual inline void closeCommand(int code){};$/;"	f	class:GSM3MobileNetworkProvider
closeCommand	GSM/src/GSM3ShieldV1ModemCore.cpp	/^void GSM3ShieldV1ModemCore::closeCommand(int code)$/;"	f	class:GSM3ShieldV1ModemCore
clusterCount	Robot_Control/src/Fat16.h	/^  static fat_t clusterCount(void) {return clusterCount_;}$/;"	f	class:Fat16
clusterCount	SD/src/utility/SdFat.h	/^  uint32_t clusterCount(void) const {return clusterCount_;}$/;"	f	class:SdVolume
clusterCount_	Robot_Control/src/Fat16.cpp	/^fat_t    Fat16::clusterCount_;           \/\/ total clusters in volume$/;"	m	class:Fat16	file:
clusterCount_	Robot_Control/src/Fat16.h	/^  static fat_t    clusterCount_;       \/\/ total clusters in volume$/;"	m	class:Fat16
clusterCount_	SD/src/utility/SdFat.h	/^  uint32_t clusterCount_;       \/\/ clusters in one FAT$/;"	m	class:SdVolume
clusterSize	Robot_Control/src/Fat16.h	/^  static uint8_t clusterSize(void) {return blocksPerCluster_;}$/;"	f	class:Fat16
clusterSizeShift	SD/src/utility/SdFat.h	/^  uint8_t clusterSizeShift(void) const {return clusterSizeShift_;}$/;"	f	class:SdVolume
clusterSizeShift_	SD/src/utility/SdFat.h	/^  uint8_t clusterSizeShift_;    \/\/ shift to convert cluster count to block count$/;"	m	class:SdVolume
clusterStartBlock	SD/src/utility/SdFat.h	/^  uint32_t clusterStartBlock(uint32_t cluster) const {$/;"	f	class:SdVolume
cmp	Robot_Control/src/lcd.cpp	/^bool cmp(char* str1, char* str2, uint8_t len){$/;"	f
codeArea	Robot_Control/src/FatStructs.h	/^  uint8_t  codeArea[440];$/;"	m	struct:masterBootRecord
codeArea	SD/src/utility/FatStructs.h	/^  uint8_t  codeArea[440];$/;"	m	struct:masterBootRecord
codenameToAPin	Robot_Motor/src/ArduinoRobotMotorBoard.cpp	/^uint8_t RobotMotorBoard::codenameToAPin(uint8_t codename){$/;"	f	class:RobotMotorBoard
color	Robot_Control/src/utility/Adafruit_GFX.h	/^typedef uint16_t color;$/;"	t
color	TFT/src/utility/Adafruit_GFX.h	/^typedef uint16_t color;$/;"	t
colstart	Robot_Control/src/Arduino_LCD.h	/^           colstart, rowstart; \/\/ some displays need this changed$/;"	m	class:Arduino_LCD
colstart	TFT/src/utility/Adafruit_ST7735.h	/^           colstart, rowstart; \/\/ some displays need this changed$/;"	m	class:Adafruit_ST7735
command	LiquidCrystal/src/LiquidCrystal.cpp	/^inline void LiquidCrystal::command(uint8_t value) {$/;"	f	class:LiquidCrystal
commandCounter	GSM/src/GSM3ShieldV1ModemCore.h	/^		uint8_t commandCounter;$/;"	m	class:GSM3ShieldV1ModemCore
commandError	GSM/src/GSM3ShieldV1ModemCore.h	/^		uint8_t commandError;$/;"	m	class:GSM3ShieldV1ModemCore
commandList	Robot_Control/src/Arduino_LCD.cpp	/^void Arduino_LCD::commandList(uint8_t *addr) {$/;"	f	class:Arduino_LCD
commandList	TFT/src/utility/Adafruit_ST7735.cpp	/^void Adafruit_ST7735::commandList(const uint8_t *addr) {$/;"	f	class:Adafruit_ST7735
commandMillis	GSM/src/GSM3ShieldV1.h	/^		long commandMillis;$/;"	m	class:GSM3ShieldV1
commandSent	GSM/src/GSM3ShieldV1.h	/^		bool commandSent;$/;"	m	class:GSM3ShieldV1
commonInit	Robot_Control/src/Arduino_LCD.cpp	/^void Arduino_LCD::commonInit(uint8_t *cmdList) {$/;"	f	class:Arduino_LCD
commonInit	TFT/src/utility/Adafruit_ST7735.cpp	/^void Adafruit_ST7735::commonInit(const uint8_t *cmdList) {$/;"	f	class:Adafruit_ST7735
compare	Robot_IR_Remote/src/IRremote.cpp	/^int IRrecv::compare(unsigned int oldval, unsigned int newval) {$/;"	f	class:IRrecv
compareTo	arduino/WString.cpp	/^int String::compareTo(const String &s) const$/;"	f	class:String
compassRead	Robot_Control/src/Sensors.cpp	/^uint16_t RobotControl::compassRead(){$/;"	f	class:RobotControl
concat	arduino/WString.cpp	/^unsigned char String::concat(char c)$/;"	f	class:String
concat	arduino/WString.cpp	/^unsigned char String::concat(const String &s)$/;"	f	class:String
concat	arduino/WString.cpp	/^unsigned char String::concat(const __FlashStringHelper * str)$/;"	f	class:String
concat	arduino/WString.cpp	/^unsigned char String::concat(const char *cstr)$/;"	f	class:String
concat	arduino/WString.cpp	/^unsigned char String::concat(const char *cstr, unsigned int length)$/;"	f	class:String
concat	arduino/WString.cpp	/^unsigned char String::concat(double num)$/;"	f	class:String
concat	arduino/WString.cpp	/^unsigned char String::concat(float num)$/;"	f	class:String
concat	arduino/WString.cpp	/^unsigned char String::concat(int num)$/;"	f	class:String
concat	arduino/WString.cpp	/^unsigned char String::concat(long num)$/;"	f	class:String
concat	arduino/WString.cpp	/^unsigned char String::concat(unsigned char num)$/;"	f	class:String
concat	arduino/WString.cpp	/^unsigned char String::concat(unsigned int num)$/;"	f	class:String
concat	arduino/WString.cpp	/^unsigned char String::concat(unsigned long num)$/;"	f	class:String
config	Firmata/utility/WiFiStream.h	/^  inline void config(IPAddress local_ip)$/;"	f	class:WiFiStream
config	Firmata/utility/WiFiStream.h	/^  inline void config(IPAddress local_ip, IPAddress gateway, IPAddress subnet)$/;"	f	class:WiFiStream
config	Robot_Motor/src/lineFollow.cpp	/^void LineFollow::config(uint8_t KP, uint8_t KD, uint8_t robotSpeed, uint8_t intergrationTime){$/;"	f	class:LineFollow
config	arduino/USBCore.h	/^	u8	config;$/;"	m	struct:__anon16
configured	arduino/USBCore.cpp	/^bool USBDevice_::configured()$/;"	f	class:USBDevice_
connect	Ethernet/src/EthernetClient.cpp	/^int EthernetClient::connect(IPAddress ip, uint16_t port) {$/;"	f	class:EthernetClient
connect	Ethernet/src/EthernetClient.cpp	/^int EthernetClient::connect(const char* host, uint16_t port) {$/;"	f	class:EthernetClient
connect	Ethernet/src/utility/socket.cpp	/^uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)$/;"	f
connect	GSM/src/GSM3MobileClientService.cpp	/^int GSM3MobileClientService::connect(IPAddress add, uint16_t port) $/;"	f	class:GSM3MobileClientService
connect	GSM/src/GSM3MobileClientService.cpp	/^int GSM3MobileClientService::connect(const char *host, uint16_t port)$/;"	f	class:GSM3MobileClientService
connect	GSM/src/GSM3ShieldV1DirectModemProvider.cpp	/^void GSM3ShieldV1DirectModemProvider::connect()$/;"	f	class:GSM3ShieldV1DirectModemProvider
connectTCPClient	GSM/src/GSM3MobileMockupProvider.cpp	/^int GSM3MobileMockupProvider::connectTCPClient(const char* server, int port, int id_socket)$/;"	f	class:GSM3MobileMockupProvider
connectTCPClient	GSM/src/GSM3ShieldV1ClientProvider.cpp	/^int GSM3ShieldV1ClientProvider::connectTCPClient(IPAddress add, int port, int id_socket)$/;"	f	class:GSM3ShieldV1ClientProvider
connectTCPClient	GSM/src/GSM3ShieldV1ClientProvider.cpp	/^int GSM3ShieldV1ClientProvider::connectTCPClient(const char* server, int port, int id_socket)$/;"	f	class:GSM3ShieldV1ClientProvider
connectTCPClient	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^int GSM3ShieldV1MultiClientProvider::connectTCPClient(IPAddress add, int port, int id_socket)$/;"	f	class:GSM3ShieldV1MultiClientProvider
connectTCPClient	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^int GSM3ShieldV1MultiClientProvider::connectTCPClient(const char* server, int port, int id_socket)$/;"	f	class:GSM3ShieldV1MultiClientProvider
connectTCPClientContinue	GSM/src/GSM3ShieldV1ClientProvider.cpp	/^void GSM3ShieldV1ClientProvider::connectTCPClientContinue()$/;"	f	class:GSM3ShieldV1ClientProvider
connectTCPClientContinue	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^void GSM3ShieldV1MultiClientProvider::connectTCPClientContinue()$/;"	f	class:GSM3ShieldV1MultiClientProvider
connectTCPServer	GSM/src/GSM3MobileMockupProvider.cpp	/^int GSM3MobileMockupProvider::connectTCPServer(int port, char* localIP, int* localIPlength)$/;"	f	class:GSM3MobileMockupProvider
connectTCPServer	GSM/src/GSM3MobileNetworkProvider.h	/^		virtual inline int connectTCPServer(int port, char* localIP, int localIPlength){return 0;};$/;"	f	class:GSM3MobileNetworkProvider
connectTCPServer	GSM/src/GSM3ShieldV1MultiServerProvider.cpp	/^int GSM3ShieldV1MultiServerProvider::connectTCPServer(int port)$/;"	f	class:GSM3ShieldV1MultiServerProvider
connectTCPServer	GSM/src/GSM3ShieldV1ServerProvider.cpp	/^int GSM3ShieldV1ServerProvider::connectTCPServer(int port)$/;"	f	class:GSM3ShieldV1ServerProvider
connectTCPServerContinue	GSM/src/GSM3ShieldV1MultiServerProvider.cpp	/^void GSM3ShieldV1MultiServerProvider::connectTCPServerContinue()$/;"	f	class:GSM3ShieldV1MultiServerProvider
connectTCPServerContinue	GSM/src/GSM3ShieldV1ServerProvider.cpp	/^void GSM3ShieldV1ServerProvider::connectTCPServerContinue()$/;"	f	class:GSM3ShieldV1ServerProvider
connect_client	Firmata/utility/WiFiClientStream.h	/^  virtual inline bool connect_client()$/;"	f	class:WiFiClientStream
connect_client	Firmata/utility/WiFiServerStream.h	/^  virtual inline bool connect_client()$/;"	f	class:WiFiServerStream
connected	Ethernet/src/EthernetClient.cpp	/^uint8_t EthernetClient::connected() {$/;"	f	class:EthernetClient
connected	Firmata/utility/EthernetClientStream.h	/^    bool connected;$/;"	m	class:EthernetClientStream
connected	GSM/src/GSM3MobileClientService.cpp	/^uint8_t GSM3MobileClientService::connected()$/;"	f	class:GSM3MobileClientService
constrain	arduino/Arduino.h	95;"	d
contiguousRange	SD/src/utility/SdFat.h	/^  uint8_t contiguousRange(uint32_t& bgnBlock, uint32_t& endBlock) {  \/\/ NOLINT$/;"	f	class:SdFile
contiguousRange	SD/src/utility/SdFile.cpp	/^uint8_t SdFile::contiguousRange(uint32_t* bgnBlock, uint32_t* endBlock) {$/;"	f	class:SdFile
controlManagement	arduino/USBCore.h	/^	ACMFunctionalDescriptor		controlManagement;		\/\/ ACM$/;"	m	struct:__anon24
copy	Robot_Control/src/SdInfo.h	/^  unsigned copy : 1;$/;"	m	struct:CSD
copy	SD/src/utility/SdInfo.h	/^  unsigned copy : 1;$/;"	m	struct:CSDV1
copy	SD/src/utility/SdInfo.h	/^  unsigned copy : 1;$/;"	m	struct:CSDV2
copy	arduino/WString.cpp	/^String & String::copy(const __FlashStringHelper *pstr, unsigned int length)$/;"	f	class:String
copy	arduino/WString.cpp	/^String & String::copy(const char *cstr, unsigned int length)$/;"	f	class:String
countPulseASM	arduino/wiring_pulse.S	/^countPulseASM:$/;"	l
country	HID/src/HID.h	/^  uint8_t country;$/;"	m	struct:__anon8
countryCode	GSM/src/GSM3ShieldV1CellManagement.h	/^		char *countryCode;$/;"	m	class:GSM3ShieldV1CellManagement
countryNameRead	Robot_Control/src/ArduinoRobot.h	/^inline void RobotControl::countryNameRead(char* container){$/;"	f	class:RobotControl
countryNameWrite	Robot_Control/src/ArduinoRobot.h	/^inline void RobotControl::countryNameWrite(char* text){$/;"	f	class:RobotControl
crc	Robot_Control/src/SdInfo.h	/^  unsigned crc : 7;$/;"	m	struct:CID
crc	Robot_Control/src/SdInfo.h	/^  unsigned crc : 7;$/;"	m	struct:CSD
crc	SD/src/utility/SdInfo.h	/^  unsigned crc : 7;$/;"	m	struct:CID
crc	SD/src/utility/SdInfo.h	/^  unsigned crc : 7;$/;"	m	struct:CSDV1
crc	SD/src/utility/SdInfo.h	/^  unsigned crc : 7;$/;"	m	struct:CSDV2
createChar	LiquidCrystal/src/LiquidCrystal.cpp	/^void LiquidCrystal::createChar(uint8_t location, uint8_t charmap[]) {$/;"	f	class:LiquidCrystal
createContiguous	SD/src/utility/SdFat.h	/^  uint8_t createContiguous(SdFile& dirFile,  \/\/ NOLINT$/;"	f	class:SdFile
createContiguous	SD/src/utility/SdFile.cpp	/^uint8_t SdFile::createContiguous(SdFile* dirFile,$/;"	f	class:SdFile
creationDate	Robot_Control/src/FatStructs.h	/^  uint16_t creationDate;$/;"	m	struct:directoryEntry
creationDate	SD/src/utility/FatStructs.h	/^  uint16_t creationDate;$/;"	m	struct:directoryEntry
creationTime	Robot_Control/src/FatStructs.h	/^  uint16_t creationTime;$/;"	m	struct:directoryEntry
creationTime	SD/src/utility/FatStructs.h	/^  uint16_t creationTime;$/;"	m	struct:directoryEntry
creationTimeTenths	Robot_Control/src/FatStructs.h	/^  uint8_t  creationTimeTenths;$/;"	m	struct:directoryEntry
creationTimeTenths	SD/src/utility/FatStructs.h	/^  uint8_t  creationTimeTenths;$/;"	m	struct:directoryEntry
csd1_t	SD/src/utility/SdInfo.h	/^}csd1_t;$/;"	t	typeref:struct:CSDV1
csd2_t	SD/src/utility/SdInfo.h	/^}csd2_t;$/;"	t	typeref:struct:CSDV2
csd_t	Robot_Control/src/SdInfo.h	/^}csd_t;$/;"	t	typeref:struct:CSD
csd_t	SD/src/utility/SdInfo.h	/^union csd_t {$/;"	u
csd_ver	Robot_Control/src/SdInfo.h	/^  unsigned csd_ver : 2;$/;"	m	struct:CSD
csd_ver	SD/src/utility/SdInfo.h	/^  unsigned csd_ver : 2;$/;"	m	struct:CSDV1
csd_ver	SD/src/utility/SdInfo.h	/^  unsigned csd_ver : 2;$/;"	m	struct:CSDV2
cspinmask	Robot_Control/src/Arduino_LCD.h	/^           datapinmask, clkpinmask, cspinmask, rspinmask,$/;"	m	class:Arduino_LCD
cspinmask	TFT/src/utility/Adafruit_ST7735.h	/^           datapinmask, clkpinmask, cspinmask, rspinmask,$/;"	m	class:Adafruit_ST7735
csport	Robot_Control/src/Arduino_LCD.h	/^  volatile uint8_t *dataport, *clkport, *csport, *rsport;$/;"	m	class:Arduino_LCD
csport	TFT/src/utility/Adafruit_ST7735.h	/^  volatile uint32_t *dataport, *clkport, *csport, *rsport;$/;"	m	class:Adafruit_ST7735
csport	TFT/src/utility/Adafruit_ST7735.h	/^  volatile uint8_t *dataport, *clkport, *csport, *rsport;$/;"	m	class:Adafruit_ST7735
curCluster	Robot_Control/src/Fat16.h	/^  fat_t curCluster(void) const {return curCluster_;}$/;"	f	class:Fat16
curCluster	SD/src/utility/SdFat.h	/^  uint32_t curCluster(void) const {return curCluster_;}$/;"	f	class:SdFile
curCluster_	Robot_Control/src/Fat16.h	/^  fat_t curCluster_;       \/\/ current cluster$/;"	m	class:Fat16
curCluster_	SD/src/utility/SdFat.h	/^  uint32_t  curCluster_;    \/\/ cluster for current file position$/;"	m	class:SdFile
curPosition	Robot_Control/src/Fat16.h	/^  uint32_t curPosition(void) const {return curPosition_;}$/;"	f	class:Fat16
curPosition	SD/src/utility/SdFat.h	/^  uint32_t curPosition(void) const {return curPosition_;}$/;"	f	class:SdFile
curPosition_	Robot_Control/src/Fat16.h	/^  uint32_t curPosition_;   \/\/ current byte offset$/;"	m	class:Fat16
curPosition_	SD/src/utility/SdFat.h	/^  uint32_t  curPosition_;   \/\/ current file position in bytes from beginning$/;"	m	class:SdFile
currentAnalogCallback	Firmata/Firmata.h	/^    callbackFunction currentAnalogCallback;$/;"	m	class:FirmataClass
currentDigitalCallback	Firmata/Firmata.h	/^    callbackFunction currentDigitalCallback;$/;"	m	class:FirmataClass
currentPinModeCallback	Firmata/Firmata.h	/^    callbackFunction currentPinModeCallback;$/;"	m	class:FirmataClass
currentPinValueCallback	Firmata/Firmata.h	/^    callbackFunction currentPinValueCallback;$/;"	m	class:FirmataClass
currentReportAnalogCallback	Firmata/Firmata.h	/^    callbackFunction currentReportAnalogCallback;$/;"	m	class:FirmataClass
currentReportDigitalCallback	Firmata/Firmata.h	/^    callbackFunction currentReportDigitalCallback;$/;"	m	class:FirmataClass
currentServoIndex	Servo/src/samd/Servo.cpp	/^static volatile int8_t currentServoIndex[_Nbr_16timers];   \/\/ index for the servo being pulsed for each timer (or -1 if refresh interval)$/;"	v	file:
currentStringCallback	Firmata/Firmata.h	/^    stringCallbackFunction currentStringCallback;$/;"	m	class:FirmataClass
currentSysexCallback	Firmata/Firmata.h	/^    sysexCallbackFunction currentSysexCallback;$/;"	m	class:FirmataClass
currentSystemResetCallback	Firmata/Firmata.h	/^    systemResetCallbackFunction currentSystemResetCallback;$/;"	m	class:FirmataClass
cursor	LiquidCrystal/src/LiquidCrystal.cpp	/^void LiquidCrystal::cursor() {$/;"	f	class:LiquidCrystal
cursor_x	Robot_Control/src/utility/Adafruit_GFX.h	/^    cursor_x, cursor_y;$/;"	m	class:Adafruit_GFX
cursor_x	TFT/src/utility/Adafruit_GFX.h	/^	cursor_x, cursor_y;$/;"	m	class:Adafruit_GFX
cursor_y	Robot_Control/src/utility/Adafruit_GFX.h	/^    cursor_x, cursor_y;$/;"	m	class:Adafruit_GFX
cursor_y	TFT/src/utility/Adafruit_GFX.h	/^	cursor_x, cursor_y;$/;"	m	class:Adafruit_GFX
d0	arduino/USBCore.h	/^	u8 d0;$/;"	m	struct:__anon20
d0	arduino/USBCore.h	/^	u8 d0;$/;"	m	struct:__anon21
d1	arduino/USBCore.h	/^	u8 d1;$/;"	m	struct:__anon20
data	HID/src/HID.h	/^  const void* data;$/;"	m	class:HIDSubDescriptor
data	Robot_Control/src/EasyTransfer2.h	/^uint8_t data[20];	\/\/data storage, for both read and send$/;"	m	class:EasyTransfer2
data	Robot_Control/src/Fat16.h	/^  uint8_t data[512];$/;"	m	union:cache16_t
data	Robot_Motor/src/EasyTransfer2.h	/^uint8_t data[20];	\/\/data storage, for both read and send$/;"	m	class:EasyTransfer2
data	SD/src/utility/SdFat.h	/^  uint8_t  data[512];$/;"	m	union:cache_t
dataBlockLba	Robot_Control/src/Fat16.h	/^  static uint32_t dataBlockLba(fat_t cluster, uint8_t blockOfCluster) {$/;"	f	class:Fat16
dataSocket	GSM/src/GSM3ShieldV1.h	/^		char* dataSocket;			\/\/Data socket.$/;"	m	class:GSM3ShieldV1
dataStartBlock	SD/src/utility/SdFat.h	/^  uint32_t dataStartBlock(void) const {return dataStartBlock_;}$/;"	f	class:SdVolume
dataStartBlock_	Robot_Control/src/Fat16.cpp	/^uint32_t Fat16::dataStartBlock_;         \/\/ start of data clusters$/;"	m	class:Fat16	file:
dataStartBlock_	Robot_Control/src/Fat16.h	/^  static uint32_t dataStartBlock_;     \/\/ start of data clusters$/;"	m	class:Fat16
dataStartBlock_	SD/src/utility/SdFat.h	/^  uint32_t dataStartBlock_;     \/\/ first data block number$/;"	m	class:SdVolume
datapinmask	Robot_Control/src/Arduino_LCD.h	/^           datapinmask, clkpinmask, cspinmask, rspinmask,$/;"	m	class:Arduino_LCD
datapinmask	TFT/src/utility/Adafruit_ST7735.h	/^           datapinmask, clkpinmask, cspinmask, rspinmask,$/;"	m	class:Adafruit_ST7735
dataport	Robot_Control/src/Arduino_LCD.h	/^  volatile uint8_t *dataport, *clkport, *csport, *rsport;$/;"	m	class:Arduino_LCD
dataport	TFT/src/utility/Adafruit_ST7735.h	/^  volatile uint32_t *dataport, *clkport, *csport, *rsport;$/;"	m	class:Adafruit_ST7735
dataport	TFT/src/utility/Adafruit_ST7735.h	/^  volatile uint8_t *dataport, *clkport, *csport, *rsport;$/;"	m	class:Adafruit_ST7735
dateTimeCallback	Robot_Control/src/Fat16.h	/^  static void dateTimeCallback($/;"	f	class:Fat16
dateTimeCallback	SD/src/utility/SdFat.h	/^  static void dateTimeCallback($/;"	f	class:SdFile
dateTimeCallbackCancel	Robot_Control/src/Fat16.h	/^  static void dateTimeCallbackCancel(void) {dateTime_ = NULL;}$/;"	f	class:Fat16
dateTimeCallbackCancel	SD/src/utility/SdFat.h	/^  static void dateTimeCallbackCancel(void) {$/;"	f	class:SdFile
dateTime_	Robot_Control/src/Fat16.cpp	/^void (*Fat16::dateTime_)(uint16_t* date, uint16_t* time) = NULL;$/;"	v
dateTime_	Robot_Control/src/Fat16.h	/^  static void (*dateTime_)(uint16_t* date, uint16_t* time);$/;"	m	class:Fat16
dateTime_	SD/src/utility/SdFat.h	/^  static void (*dateTime_)(uint16_t* date, uint16_t* time);$/;"	m	class:SdFile
dateTime_	SD/src/utility/SdFile.cpp	/^void (*SdFile::dateTime_)(uint16_t* date, uint16_t* time) = NULL;$/;"	v
dbgBufAdd	Robot_Control/src/Fat16.h	/^  static cache16_t* dbgBufAdd(void) {return &cacheBuffer_;}$/;"	f	class:Fat16
dbgCacheBlock	Robot_Control/src/Fat16.h	/^  static uint8_t* dbgCacheBlock(uint32_t blockNumber) {$/;"	f	class:Fat16
dbgCacheDir	Robot_Control/src/Fat16.h	/^  static dir_t* dbgCacheDir(uint16_t index) {$/;"	f	class:Fat16
dbgSetDev	Robot_Control/src/Fat16.h	/^  static void dbgSetDev(SdCard* dev) {rawDev_ = dev;}$/;"	f	class:Fat16
ddr	SD/src/utility/Sd2PinMap.h	/^  volatile uint8_t* ddr;$/;"	m	struct:pin_map_t
debugBuffer	GSM/src/GSM3CircularBuffer.cpp	/^void GSM3CircularBuffer::debugBuffer()$/;"	f	class:GSM3CircularBuffer
debugPrint	Robot_Control/src/lcd.cpp	/^void RobotControl::debugPrint(long value, uint8_t x, uint8_t y){$/;"	f	class:RobotControl
decode	Robot_IR_Remote/src/IRremote.cpp	/^int IRrecv::decode(decode_results *results) {$/;"	f	class:IRrecv
decodeHash	Robot_IR_Remote/src/IRremote.cpp	/^long IRrecv::decodeHash(decode_results *results) {$/;"	f	class:IRrecv
decodeNEC	Robot_IR_Remote/src/IRremote.cpp	/^long IRrecv::decodeNEC(decode_results *results) {$/;"	f	class:IRrecv
decode_results	Robot_IR_Remote/src/IRremote.h	/^class decode_results {$/;"	c
decode_type	Robot_IR_Remote/src/IRremote.h	/^  int decode_type; \/\/ NEC, SONY, RC5, UNKNOWN$/;"	m	class:decode_results
decrunch_row	Robot_Control/src/Squawk.cpp	/^static void decrunch_row() {$/;"	f	file:
degrees	arduino/Arduino.h	98;"	d
delay	arduino/wiring.c	/^void delay(unsigned long ms)$/;"	f
delayInsideInterrupt	GSM/src/GSM3ShieldV1ModemCore.cpp	/^void GSM3ShieldV1ModemCore::delayInsideInterrupt(unsigned long milliseconds)$/;"	f	class:GSM3ShieldV1ModemCore
delayInsideInterrupt2seg	GSM/src/GSM3ShieldV1.cpp	/^void GSM3ShieldV1::delayInsideInterrupt2seg()$/;"	f	class:GSM3ShieldV1
delayMicroseconds	arduino/wiring.c	/^void delayMicroseconds(unsigned int us)$/;"	f
deleteToTheEnd	GSM/src/GSM3CircularBuffer.h	/^		inline void deleteToTheEnd(byte from){tail=from;};$/;"	f	class:GSM3CircularBuffer
desc	HID/src/HID.h	/^  HIDDescDescriptor   desc;$/;"	m	struct:__anon9
descLenH	HID/src/HID.h	/^  uint8_t descLenH;$/;"	m	struct:__anon8
descLenL	HID/src/HID.h	/^  uint8_t descLenL;$/;"	m	struct:__anon8
descriptorSize	HID/src/HID.h	/^  uint16_t descriptorSize;$/;"	m	class:HID_
desctype	HID/src/HID.h	/^  uint8_t desctype; \/\/ 0x22 report$/;"	m	struct:__anon8
detach	Firmata/Firmata.cpp	/^void FirmataClass::detach(byte command)$/;"	f	class:FirmataClass
detach	Servo/src/avr/Servo.cpp	/^void Servo::detach()$/;"	f	class:Servo
detach	Servo/src/sam/Servo.cpp	/^void Servo::detach()$/;"	f	class:Servo
detach	Servo/src/samd/Servo.cpp	/^void Servo::detach()$/;"	f	class:Servo
detach	arduino/USBCore.cpp	/^void USBDevice_::detach()$/;"	f	class:USBDevice_
detachGPRS	GSM/src/GSM3ShieldV1DataNetworkProvider.cpp	/^GSM3_NetworkStatus_t GSM3ShieldV1DataNetworkProvider::detachGPRS(bool synchronous)$/;"	f	class:GSM3ShieldV1DataNetworkProvider
detachGPRSContinue	GSM/src/GSM3ShieldV1DataNetworkProvider.cpp	/^void GSM3ShieldV1DataNetworkProvider::detachGPRSContinue()$/;"	f	class:GSM3ShieldV1DataNetworkProvider
detachInterrupt	SPI/src/SPI.h	/^  inline static void detachInterrupt() { SPCR &= ~_BV(SPIE); }$/;"	f	class:SPIClass
detachInterrupt	arduino/WInterrupts.c	/^void detachInterrupt(uint8_t interruptNum) {$/;"	f
details	Robot_Control/src/EasyTransfer2.h	29;"	d
details	Robot_Motor/src/EasyTransfer2.h	29;"	d
deviceClass	arduino/USBCore.h	/^	u8	deviceClass;$/;"	m	struct:__anon15
deviceProtocol	arduino/USBCore.h	/^	u8	deviceProtocol;$/;"	m	struct:__anon15
deviceSubClass	arduino/USBCore.h	/^	u8	deviceSubClass;$/;"	m	struct:__anon15
deviceVersion	arduino/USBCore.h	/^	u16	deviceVersion;	\/\/ 0x100$/;"	m	struct:__anon15
dhcpClientIdentifier	Ethernet/src/Dhcp.h	/^	dhcpClientIdentifier	=	61,$/;"	e	enum:__anon1
dhcpIPaddrLeaseTime	Ethernet/src/Dhcp.h	/^	dhcpIPaddrLeaseTime	=	51,$/;"	e	enum:__anon1
dhcpMessageType	Ethernet/src/Dhcp.h	/^	dhcpMessageType		=	53,$/;"	e	enum:__anon1
dhcpParamRequest	Ethernet/src/Dhcp.h	/^	dhcpParamRequest	=	55,$/;"	e	enum:__anon1
dhcpRequestedIPaddr	Ethernet/src/Dhcp.h	/^	dhcpRequestedIPaddr	=	50,$/;"	e	enum:__anon1
dhcpServerIdentifier	Ethernet/src/Dhcp.h	/^	dhcpServerIdentifier	=	54,$/;"	e	enum:__anon1
dhcpT1value	Ethernet/src/Dhcp.h	/^	dhcpT1value		=	58,$/;"	e	enum:__anon1
dhcpT2value	Ethernet/src/Dhcp.h	/^	dhcpT2value		=	59,$/;"	e	enum:__anon1
dif	arduino/USBCore.h	/^	InterfaceDescriptor			dif;$/;"	m	struct:__anon24
digitalPinCount	SD/src/utility/Sd2PinMap.h	/^static const uint8_t digitalPinCount = sizeof(digitalPinMap)\/sizeof(pin_map_t);$/;"	v
digitalPinHasPWM	Firmata/Boards.h	141;"	d
digitalPinMap	SD/src/utility/Sd2PinMap.h	/^static const pin_map_t digitalPinMap[] = {$/;"	v
digitalPinToBitMask	arduino/Arduino.h	178;"	d
digitalPinToPort	arduino/Arduino.h	177;"	d
digitalPinToTimer	arduino/Arduino.h	179;"	d
digitalRead	Robot_Control/src/Sensors.cpp	/^bool RobotControl::digitalRead(uint8_t port){$/;"	f	class:RobotControl
digitalRead	arduino/wiring_digital.c	/^int digitalRead(uint8_t pin)$/;"	f
digitalWrite	Robot_Control/src/Sensors.cpp	/^void RobotControl::digitalWrite(uint8_t port, bool value){$/;"	f	class:RobotControl
digitalWrite	arduino/wiring_digital.c	/^void digitalWrite(uint8_t pin, uint8_t val)$/;"	f
dir	Robot_Control/src/Fat16.h	/^  dir_t   dir[16];$/;"	m	union:cache16_t
dir	SD/src/utility/SdFat.h	/^  dir_t    dir[16];$/;"	m	union:cache_t
dirBlock	SD/src/utility/SdFat.h	/^  uint32_t dirBlock(void) const {return dirBlock_;}$/;"	f	class:SdFile
dirBlock_	SD/src/utility/SdFat.h	/^  uint32_t  dirBlock_;      \/\/ SD block that contains directory entry for file$/;"	m	class:SdFile
dirEntry	Robot_Control/src/Fat16.cpp	/^uint8_t Fat16::dirEntry(dir_t* dir) {$/;"	f	class:Fat16
dirEntry	Robot_Control/src/Fat16.h	/^  uint8_t dirEntry(dir_t& dir) {  \/\/ NOLINT$/;"	f	class:Fat16
dirEntry	SD/src/utility/SdFat.h	/^  uint8_t dirEntry(dir_t& dir) {return dirEntry(&dir);}  \/\/ NOLINT$/;"	f	class:SdFile
dirEntry	SD/src/utility/SdFile.cpp	/^uint8_t SdFile::dirEntry(dir_t* dir) {$/;"	f	class:SdFile
dirEntryIndex_	Robot_Control/src/Fat16.h	/^  int16_t dirEntryIndex_;  \/\/ index of directory entry for open file$/;"	m	class:Fat16
dirIndex	SD/src/utility/SdFat.h	/^  uint8_t dirIndex(void) const {return dirIndex_;}$/;"	f	class:SdFile
dirIndex_	SD/src/utility/SdFat.h	/^  uint8_t   dirIndex_;      \/\/ index of entry in dirBlock 0 <= dirIndex_ <= 0XF$/;"	m	class:SdFile
dirName	SD/src/utility/SdFile.cpp	/^void SdFile::dirName(const dir_t& dir, char* name) {$/;"	f	class:SdFile
dir_t	Robot_Control/src/FatStructs.h	/^typedef struct directoryEntry dir_t;$/;"	t	typeref:struct:directoryEntry
dir_t	SD/src/utility/FatStructs.h	/^typedef struct directoryEntry dir_t;$/;"	t	typeref:struct:directoryEntry
direction	Stepper/src/Stepper.h	/^    int direction;            \/\/ Direction of rotation$/;"	m	class:Stepper
directoryEntry	Robot_Control/src/FatStructs.h	/^struct directoryEntry {$/;"	s
directoryEntry	SD/src/utility/FatStructs.h	/^struct directoryEntry {$/;"	s
disableBlinkVersion	Firmata/Firmata.cpp	/^void FirmataClass::disableBlinkVersion()$/;"	f	class:FirmataClass
disableTimer	arduino/Tone.cpp	/^void disableTimer(uint8_t _timer)$/;"	f
disconnect	Ethernet/src/utility/socket.cpp	/^void disconnect(SOCKET s)$/;"	f
disconnect	GSM/src/GSM3ShieldV1DirectModemProvider.cpp	/^void GSM3ShieldV1DirectModemProvider::disconnect()$/;"	f	class:GSM3ShieldV1DirectModemProvider
disconnectTCP	GSM/src/GSM3MobileMockupProvider.cpp	/^int GSM3MobileMockupProvider::disconnectTCP(int idsocket)$/;"	f	class:GSM3MobileMockupProvider
disconnectTCP	GSM/src/GSM3MobileNetworkProvider.h	/^		int disconnectTCP(bool client1Server0, int idsocket){return 1;};$/;"	f	class:GSM3MobileNetworkProvider
disconnectTCP	GSM/src/GSM3ShieldV1ClientProvider.cpp	/^int GSM3ShieldV1ClientProvider::disconnectTCP(bool client1Server0, int id_socket)$/;"	f	class:GSM3ShieldV1ClientProvider
disconnectTCP	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^int GSM3ShieldV1MultiClientProvider::disconnectTCP(bool client1Server0, int id_socket)$/;"	f	class:GSM3ShieldV1MultiClientProvider
disconnectTCPContinue	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^void GSM3ShieldV1MultiClientProvider::disconnectTCPContinue()$/;"	f	class:GSM3ShieldV1MultiClientProvider
diskSignature	Robot_Control/src/FatStructs.h	/^  uint32_t diskSignature;$/;"	m	struct:masterBootRecord
diskSignature	SD/src/utility/FatStructs.h	/^  uint32_t diskSignature;$/;"	m	struct:masterBootRecord
display	LiquidCrystal/src/LiquidCrystal.cpp	/^void LiquidCrystal::display() {$/;"	f	class:LiquidCrystal
display	Robot_Control/src/utility/VirtualKeyboard.cpp	/^void VirtualKeyboard::display(uint8_t top, uint16_t showColor, uint16_t hideColor){$/;"	f	class:VirtualKeyboard
displayLogos	Robot_Control/src/helper.cpp	/^void RobotControl::displayLogos(){$/;"	f	class:RobotControl
dns	Ethernet/src/Dhcp.h	/^	dns			=	6,$/;"	e	enum:__anon1
dnsServerIP	Ethernet/src/Ethernet.cpp	/^IPAddress EthernetClass::dnsServerIP()$/;"	f	class:EthernetClass
doCalibration	Robot_Motor/src/lineFollow.cpp	/^void LineFollow::doCalibration(int speedPct, int time){$/;"	f	class:LineFollow
do_osc	Robot_Control/src/Squawk.cpp	/^static int8_t do_osc(pto_t *p_osc) {$/;"	f	file:
domainName	Ethernet/src/Dhcp.h	/^	domainName		=	15,$/;"	e	enum:__anon1
drawBMP	Robot_Control/src/lcd.cpp	/^void RobotControl::drawBMP(char* filename, uint8_t x, uint8_t y){$/;"	f	class:RobotControl
drawBase	Robot_Control/src/helper.cpp	/^void RobotControl::drawBase(){$/;"	f	class:RobotControl
drawBitmap	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::drawBitmap(int16_t x, int16_t y,$/;"	f	class:Adafruit_GFX
drawBitmap	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::drawBitmap(int16_t x, int16_t y, $/;"	f	class:Adafruit_GFX
drawChar	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,$/;"	f	class:Adafruit_GFX
drawChar	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,$/;"	f	class:Adafruit_GFX
drawCircle	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::drawCircle(int16_t x0, int16_t y0, int16_t r,$/;"	f	class:Adafruit_GFX
drawCircle	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::drawCircle(int16_t x0, int16_t y0, int16_t r, $/;"	f	class:Adafruit_GFX
drawCircleHelper	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::drawCircleHelper( int16_t x0, int16_t y0,$/;"	f	class:Adafruit_GFX
drawCircleHelper	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::drawCircleHelper( int16_t x0, int16_t y0,$/;"	f	class:Adafruit_GFX
drawCompass	Robot_Control/src/helper.cpp	/^void RobotControl::drawCompass(uint16_t value){$/;"	f	class:RobotControl
drawDire	Robot_Control/src/helper.cpp	/^void RobotControl::drawDire(int16_t dire){$/;"	f	class:RobotControl
drawFastHLine	Robot_Control/src/Arduino_LCD.cpp	/^void Arduino_LCD::drawFastHLine(int16_t x, int16_t y, int16_t w,$/;"	f	class:Arduino_LCD
drawFastHLine	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,$/;"	f	class:Adafruit_GFX
drawFastHLine	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,$/;"	f	class:Adafruit_GFX
drawFastHLine	TFT/src/utility/Adafruit_ST7735.cpp	/^void Adafruit_ST7735::drawFastHLine(int16_t x, int16_t y, int16_t w,$/;"	f	class:Adafruit_ST7735
drawFastVLine	Robot_Control/src/Arduino_LCD.cpp	/^void Arduino_LCD::drawFastVLine(int16_t x, int16_t y, int16_t h,$/;"	f	class:Arduino_LCD
drawFastVLine	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,$/;"	f	class:Adafruit_GFX
drawFastVLine	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,$/;"	f	class:Adafruit_GFX
drawFastVLine	TFT/src/utility/Adafruit_ST7735.cpp	/^void Adafruit_ST7735::drawFastVLine(int16_t x, int16_t y, int16_t h,$/;"	f	class:Adafruit_ST7735
drawInput	Robot_Control/src/utility/RobotTextManager.cpp	/^void TextManager::drawInput(bool onOff){$/;"	f	class:TextManager
drawLine	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,$/;"	f	class:Adafruit_GFX
drawLine	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, $/;"	f	class:Adafruit_GFX
drawPixel	Robot_Control/src/Arduino_LCD.cpp	/^void Arduino_LCD::drawPixel(int16_t x, int16_t y, uint16_t color) {$/;"	f	class:Arduino_LCD
drawPixel	TFT/src/utility/Adafruit_ST7735.cpp	/^void Adafruit_ST7735::drawPixel(int16_t x, int16_t y, uint16_t color) {$/;"	f	class:Adafruit_ST7735
drawRect	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::drawRect(int16_t x, int16_t y,$/;"	f	class:Adafruit_GFX
drawRect	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::drawRect(int16_t x, int16_t y,$/;"	f	class:Adafruit_GFX
drawRoundRect	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::drawRoundRect(int16_t x, int16_t y, int16_t w,$/;"	f	class:Adafruit_GFX
drawRoundRect	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::drawRoundRect(int16_t x, int16_t y, int16_t w,$/;"	f	class:Adafruit_GFX
drawTriangle	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::drawTriangle(int16_t x0, int16_t y0,$/;"	f	class:Adafruit_GFX
drawTriangle	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::drawTriangle(int16_t x0, int16_t y0,$/;"	f	class:Adafruit_GFX
driveNumber	Robot_Control/src/FatStructs.h	/^  uint8_t  driveNumber;$/;"	m	struct:fat32BootSector
driveNumber	SD/src/utility/FatStructs.h	/^  uint8_t  driveNumber;$/;"	m	struct:fat32BootSector
dsr_imp	Robot_Control/src/SdInfo.h	/^  unsigned dsr_imp : 1;$/;"	m	struct:CSD
dsr_imp	SD/src/utility/SdInfo.h	/^  unsigned dsr_imp : 1;$/;"	m	struct:CSDV1
dsr_imp	SD/src/utility/SdInfo.h	/^  unsigned dsr_imp : 1;$/;"	m	struct:CSDV2
dtr	arduino/CDC.cpp	/^bool Serial_::dtr() {$/;"	f	class:Serial_
dtype	HID/src/HID.h	/^  uint8_t dtype;    \/\/ 0x21$/;"	m	struct:__anon8
dtype	arduino/USBCore.h	/^	u8	dtype;			\/\/ 2$/;"	m	struct:__anon16
dtype	arduino/USBCore.h	/^	u8 dtype;			\/\/ 1 USB_DEVICE_DESCRIPTOR_TYPE$/;"	m	struct:__anon15
dtype	arduino/USBCore.h	/^	u8 dtype;			\/\/ 11$/;"	m	struct:__anon19
dtype	arduino/USBCore.h	/^	u8 dtype;	\/\/ 0x24$/;"	m	struct:__anon20
dtype	arduino/USBCore.h	/^	u8 dtype;	\/\/ 0x24$/;"	m	struct:__anon21
dtype	arduino/USBCore.h	/^	u8 dtype;	\/\/ 4$/;"	m	struct:__anon17
dtype	arduino/USBCore.h	/^	u8 dtype;	\/\/ 5$/;"	m	struct:__anon18
dtype	arduino/USBCore.h	/^    u8 	dtype;		\/\/ 0x24$/;"	m	struct:__anon22
dtype	arduino/USBCore.h	/^    u8 	dtype;		\/\/ 0x24$/;"	m	struct:__anon23
dwDTERate	arduino/CDC.cpp	/^	u32	dwDTERate;$/;"	m	struct:__anon13	file:
dword	arduino/IPAddress.h	/^	uint32_t dword;$/;"	m	union:IPAddress::__anon14
enableIRIn	Robot_IR_Remote/src/IRremote.cpp	/^void IRrecv::enableIRIn() {$/;"	f	class:IRrecv
end	EEPROM/src/EEPROM.h	/^    EEPtr end()                          { return length(); } \/\/Standards requires this to be the item after the last valid entry. The returned pointer is invalid.$/;"	f	struct:EEPROMClass
end	Firmata/utility/BLEStream.h	/^void BLEStream::end()$/;"	f	class:BLEStream
end	SPI/src/SPI.cpp	/^void SPIClass::end() {$/;"	f	class:SPIClass
end	SoftwareSerial/src/SoftwareSerial.cpp	/^void SoftwareSerial::end()$/;"	f	class:SoftwareSerial
end	Wire/src/Wire.cpp	/^void TwoWire::end(void)$/;"	f	class:TwoWire
end	arduino/CDC.cpp	/^void Serial_::end(void)$/;"	f	class:Serial_
end	arduino/HardwareSerial.cpp	/^void HardwareSerial::end()$/;"	f	class:HardwareSerial
end	arduino/WString.h	/^	char* end() { return buffer + length(); }$/;"	f	class:String
end	arduino/WString.h	/^	const char* end() const { return c_str() + length(); }$/;"	f	class:String
endBMPFromEEPROM	Robot_Control/src/lcd.cpp	/^void RobotControl::endBMPFromEEPROM(){$/;"	f	class:RobotControl
endCylinderHigh	Robot_Control/src/FatStructs.h	/^  unsigned endCylinderHigh : 2;$/;"	m	struct:partitionTable
endCylinderHigh	SD/src/utility/FatStructs.h	/^  unsigned endCylinderHigh : 2;$/;"	m	struct:partitionTable
endCylinderLow	Robot_Control/src/FatStructs.h	/^  uint8_t  endCylinderLow;$/;"	m	struct:partitionTable
endCylinderLow	SD/src/utility/FatStructs.h	/^  uint8_t  endCylinderLow;$/;"	m	struct:partitionTable
endHead	Robot_Control/src/FatStructs.h	/^  uint8_t  endHead;$/;"	m	struct:partitionTable
endHead	SD/src/utility/FatStructs.h	/^  uint8_t  endHead;$/;"	m	struct:partitionTable
endOption	Ethernet/src/Dhcp.h	/^	endOption		=	255$/;"	e	enum:__anon1
endPacket	Ethernet/src/EthernetUdp.cpp	/^int EthernetUDP::endPacket()$/;"	f	class:EthernetUDP
endSMS	GSM/src/GSM3MobileMockupProvider.cpp	/^int GSM3MobileMockupProvider::endSMS()$/;"	f	class:GSM3MobileMockupProvider
endSMS	GSM/src/GSM3MobileSMSProvider.h	/^		virtual inline int endSMS(){return 0;};$/;"	f	class:GSM3MobileSMSProvider
endSMS	GSM/src/GSM3SMSService.cpp	/^int GSM3SMSService::endSMS()$/;"	f	class:GSM3SMSService
endSMS	GSM/src/GSM3ShieldV1SMSProvider.cpp	/^int GSM3ShieldV1SMSProvider::endSMS()$/;"	f	class:GSM3ShieldV1SMSProvider
endSMSContinue	GSM/src/GSM3ShieldV1SMSProvider.cpp	/^void GSM3ShieldV1SMSProvider::endSMSContinue()$/;"	f	class:GSM3ShieldV1SMSProvider
endSector	Robot_Control/src/FatStructs.h	/^  unsigned endSector : 6;$/;"	m	struct:partitionTable
endSector	SD/src/utility/FatStructs.h	/^  unsigned endSector : 6;$/;"	m	struct:partitionTable
endSysex	Firmata/Firmata.cpp	/^void FirmataClass::endSysex(void)$/;"	f	class:FirmataClass
endTransaction	SPI/src/SPI.h	/^  inline static void endTransaction(void) {$/;"	f	class:SPIClass
endTransmission	Wire/src/Wire.cpp	/^uint8_t TwoWire::endTransmission(uint8_t sendStop)$/;"	f	class:TwoWire
endTransmission	Wire/src/Wire.cpp	/^uint8_t TwoWire::endTransmission(void)$/;"	f	class:TwoWire
endWrite	GSM/src/GSM3MobileClientService.cpp	/^void GSM3MobileClientService::endWrite(bool sync)$/;"	f	class:GSM3MobileClientService
endWrite	GSM/src/GSM3MobileServerService.cpp	/^void GSM3MobileServerService::endWrite()$/;"	f	class:GSM3MobileServerService
endWriteSocket	GSM/src/GSM3ShieldV1ClientProvider.cpp	/^void GSM3ShieldV1ClientProvider::endWriteSocket()$/;"	f	class:GSM3ShieldV1ClientProvider
endWriteSocket	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^void GSM3ShieldV1MultiClientProvider::endWriteSocket()$/;"	f	class:GSM3ShieldV1MultiClientProvider
endWriteSocketContinue	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^void GSM3ShieldV1MultiClientProvider::endWriteSocketContinue()$/;"	f	class:GSM3ShieldV1MultiClientProvider
endpointType	arduino/PluggableUSB.h	/^  const uint8_t *endpointType;$/;"	m	class:PluggableUSBModule
endsWith	arduino/WString.cpp	/^unsigned char String::endsWith( const String &s2 ) const$/;"	f	class:String
epType	HID/src/HID.h	/^  uint8_t epType[1];$/;"	m	class:HID_
equals	arduino/WString.cpp	/^unsigned char String::equals(const String &s2) const$/;"	f	class:String
equals	arduino/WString.cpp	/^unsigned char String::equals(const char *cstr) const$/;"	f	class:String
equalsIgnoreCase	arduino/WString.cpp	/^unsigned char String::equalsIgnoreCase( const String &s2 ) const$/;"	f	class:String
erase	SD/src/utility/Sd2Card.cpp	/^uint8_t Sd2Card::erase(uint32_t firstBlock, uint32_t lastBlock) {$/;"	f	class:Sd2Card
eraseSingleBlockEnable	SD/src/utility/Sd2Card.cpp	/^uint8_t Sd2Card::eraseSingleBlockEnable(void) {$/;"	f	class:Sd2Card
erase_blk_en	Robot_Control/src/SdInfo.h	/^  unsigned erase_blk_en : 1;$/;"	m	struct:CSD
erase_blk_en	SD/src/utility/SdInfo.h	/^  unsigned erase_blk_en : 1;$/;"	m	struct:CSDV1
erase_blk_en	SD/src/utility/SdInfo.h	/^  unsigned erase_blk_en : 1;$/;"	m	struct:CSDV2
error	Robot_Control/src/SdCard.cpp	/^void SdCard::error(uint8_t code) {$/;"	f	class:SdCard
error	Robot_Control/src/SdCard.cpp	/^void SdCard::error(uint8_t code, uint8_t data) {$/;"	f	class:SdCard
error	SD/src/utility/Sd2Card.h	/^  void error(uint8_t code) {errorCode_ = code;}$/;"	f	class:Sd2Card
errorCode	Robot_Control/src/SdCard.h	/^  uint8_t errorCode;$/;"	m	class:SdCard
errorCode	SD/src/utility/Sd2Card.h	/^  uint8_t errorCode(void) const {return errorCode_;}$/;"	f	class:Sd2Card
errorCode_	SD/src/utility/Sd2Card.h	/^  uint8_t errorCode_;$/;"	m	class:Sd2Card
errorData	Robot_Control/src/SdCard.h	/^  uint8_t errorData;$/;"	m	class:SdCard
errorData	SD/src/utility/Sd2Card.h	/^  uint8_t errorData(void) const {return status_;}$/;"	f	class:Sd2Card
ethernet_h	Ethernet/src/Ethernet.h	2;"	d
ethernetclient_h	Ethernet/src/EthernetClient.h	2;"	d
ethernetserver_h	Ethernet/src/EthernetServer.h	2;"	d
ethernetudp_h	Ethernet/src/EthernetUdp.h	38;"	d
execCmdSn	Ethernet/src/utility/w5100.cpp	/^void W5100Class::execCmdSn(SOCKET s, SockCMD _cmd) {$/;"	f	class:W5100Class
executeMultiByteCommand	Firmata/Firmata.h	/^    byte executeMultiByteCommand; \/\/ execute this after getting multi-byte data$/;"	m	class:FirmataClass
exists	SD/src/SD.cpp	/^boolean SDClass::exists(const char *filepath) {$/;"	f	class:SDLib::SDClass
exists	SD/src/SD.h	/^  boolean exists(const String &filepath) { return exists(filepath.c_str()); }$/;"	f	class:SDLib::SDClass
extractSubstring	GSM/src/GSM3CircularBuffer.cpp	/^bool GSM3CircularBuffer::extractSubstring(const char* from, const char* to, char* buffer, int bufsize)$/;"	f	class:GSM3CircularBuffer
f	Robot_Control/src/SquawkSD.cpp	/^    Fat16 f;$/;"	m	class:StreamFile	file:
f	Robot_Control/src/SquawkSD.h	/^  	Fat16 f;$/;"	m	class:SquawkSynthSD
fastDigitalRead	SD/src/utility/Sd2PinMap.h	/^  uint8_t fastDigitalRead(uint8_t pin) {$/;"	f
fastDigitalWrite	SD/src/utility/Sd2PinMap.h	/^  void fastDigitalWrite(uint8_t pin, uint8_t value) {$/;"	f
fat	Robot_Control/src/Fat16.h	/^  fat_t   fat[256];$/;"	m	union:cache16_t
fat16	SD/src/utility/SdFat.h	/^  uint16_t fat16[256];$/;"	m	union:cache_t
fat32	SD/src/utility/SdFat.h	/^  uint32_t fat32[128];$/;"	m	union:cache_t
fat32BackBootBlock	Robot_Control/src/FatStructs.h	/^  uint16_t fat32BackBootBlock;$/;"	m	struct:biosParmBlock
fat32BackBootBlock	SD/src/utility/FatStructs.h	/^  uint16_t fat32BackBootBlock;$/;"	m	struct:biosParmBlock
fat32BootSector	Robot_Control/src/FatStructs.h	/^struct fat32BootSector {$/;"	s
fat32BootSector	SD/src/utility/FatStructs.h	/^struct fat32BootSector {$/;"	s
fat32FSInfo	Robot_Control/src/FatStructs.h	/^  uint16_t fat32FSInfo;$/;"	m	struct:biosParmBlock
fat32FSInfo	SD/src/utility/FatStructs.h	/^  uint16_t fat32FSInfo;$/;"	m	struct:biosParmBlock
fat32Flags	Robot_Control/src/FatStructs.h	/^  uint16_t fat32Flags;$/;"	m	struct:biosParmBlock
fat32Flags	SD/src/utility/FatStructs.h	/^  uint16_t fat32Flags;$/;"	m	struct:biosParmBlock
fat32Reserved	Robot_Control/src/FatStructs.h	/^  uint8_t  fat32Reserved[12];$/;"	m	struct:biosParmBlock
fat32Reserved	SD/src/utility/FatStructs.h	/^  uint8_t  fat32Reserved[12];$/;"	m	struct:biosParmBlock
fat32RootCluster	Robot_Control/src/FatStructs.h	/^  uint32_t fat32RootCluster;$/;"	m	struct:biosParmBlock
fat32RootCluster	SD/src/utility/FatStructs.h	/^  uint32_t fat32RootCluster;$/;"	m	struct:biosParmBlock
fat32Version	Robot_Control/src/FatStructs.h	/^  uint16_t fat32Version;$/;"	m	struct:biosParmBlock
fat32Version	SD/src/utility/FatStructs.h	/^  uint16_t fat32Version;$/;"	m	struct:biosParmBlock
fatCount	Robot_Control/src/FatStructs.h	/^  uint8_t  fatCount;$/;"	m	struct:biosParmBlock
fatCount	SD/src/utility/FatStructs.h	/^  uint8_t  fatCount;$/;"	m	struct:biosParmBlock
fatCount	SD/src/utility/SdFat.h	/^  uint8_t fatCount(void) const {return fatCount_;}$/;"	f	class:SdVolume
fatCount_	Robot_Control/src/Fat16.cpp	/^uint8_t  Fat16::fatCount_;               \/\/ number of file allocation tables$/;"	m	class:Fat16	file:
fatCount_	Robot_Control/src/Fat16.h	/^  static uint8_t  fatCount_;           \/\/ number of FATs$/;"	m	class:Fat16
fatCount_	SD/src/utility/SdFat.h	/^  uint8_t fatCount_;            \/\/ number of FATs on volume$/;"	m	class:SdVolume
fatGet	Robot_Control/src/Fat16.cpp	/^uint8_t Fat16::fatGet(fat_t cluster, fat_t* value) {$/;"	f	class:Fat16
fatGet	SD/src/utility/SdVolume.cpp	/^uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {$/;"	f	class:SdVolume
fatPut	Robot_Control/src/Fat16.cpp	/^uint8_t Fat16::fatPut(fat_t cluster, fat_t value) {$/;"	f	class:Fat16
fatPut	SD/src/utility/SdVolume.cpp	/^uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {$/;"	f	class:SdVolume
fatPutEOC	SD/src/utility/SdFat.h	/^  uint8_t fatPutEOC(uint32_t cluster) {$/;"	f	class:SdVolume
fatStartBlock	SD/src/utility/SdFat.h	/^  uint32_t fatStartBlock(void) const {return fatStartBlock_;}$/;"	f	class:SdVolume
fatStartBlock_	Robot_Control/src/Fat16.cpp	/^uint32_t Fat16::fatStartBlock_;          \/\/ start of first FAT$/;"	m	class:Fat16	file:
fatStartBlock_	Robot_Control/src/Fat16.h	/^  static uint32_t fatStartBlock_;      \/\/ start of first FAT$/;"	m	class:Fat16
fatStartBlock_	SD/src/utility/SdFat.h	/^  uint32_t fatStartBlock_;      \/\/ start block for first FAT$/;"	m	class:SdVolume
fatType	SD/src/utility/SdFat.h	/^  uint8_t fatType(void) const {return fatType_;}$/;"	f	class:SdVolume
fatType_	SD/src/utility/SdFat.h	/^  uint8_t fatType_;             \/\/ volume type (12, 16, OR 32)$/;"	m	class:SdVolume
fat_t	Robot_Control/src/Fat16.h	/^typedef uint16_t fat_t;$/;"	t
fbs	Robot_Control/src/Fat16.h	/^  fbs_t   fbs;$/;"	m	union:cache16_t
fbs	SD/src/utility/SdFat.h	/^  fbs_t    fbs;$/;"	m	union:cache_t
fbs_t	Robot_Control/src/FatStructs.h	/^typedef struct fat32BootSector fbs_t;$/;"	t	typeref:struct:fat32BootSector
fbs_t	SD/src/utility/FatStructs.h	/^typedef struct fat32BootSector fbs_t;$/;"	t	typeref:struct:fat32BootSector
file	Robot_Control/src/ArduinoRobot.h	/^		Fat16 file;$/;"	m	class:RobotControl
file	Robot_Control/src/SquawkSD.cpp	/^static StreamFile file;$/;"	v	file:
fileOpenMode	SD/src/SD.h	/^  int fileOpenMode;$/;"	m	class:SDLib::SDClass
fileSize	Robot_Control/src/Fat16.h	/^  uint32_t fileSize(void) const {return fileSize_;}$/;"	f	class:Fat16
fileSize	Robot_Control/src/FatStructs.h	/^  uint32_t fileSize;$/;"	m	struct:directoryEntry
fileSize	SD/src/utility/FatStructs.h	/^  uint32_t fileSize;$/;"	m	struct:directoryEntry
fileSize	SD/src/utility/SdFat.h	/^  uint32_t fileSize(void) const {return fileSize_;}$/;"	f	class:SdFile
fileSize_	Robot_Control/src/Fat16.h	/^  uint32_t fileSize_;      \/\/ fileSize$/;"	m	class:Fat16
fileSize_	SD/src/utility/SdFat.h	/^  uint32_t  fileSize_;      \/\/ file size in bytes$/;"	m	class:SdFile
fileSystemType	Robot_Control/src/FatStructs.h	/^  char     fileSystemType[8];$/;"	m	struct:fat32BootSector
fileSystemType	SD/src/utility/FatStructs.h	/^  char     fileSystemType[8];$/;"	m	struct:fat32BootSector
file_format	Robot_Control/src/SdInfo.h	/^  unsigned file_format : 2;$/;"	m	struct:CSD
file_format	SD/src/utility/SdInfo.h	/^  unsigned file_format : 2;$/;"	m	struct:CSDV1
file_format	SD/src/utility/SdInfo.h	/^  unsigned file_format : 2;$/;"	m	struct:CSDV2
file_format_grp	Robot_Control/src/SdInfo.h	/^  unsigned file_format_grp : 1;$/;"	m	struct:CSD
file_format_grp	SD/src/utility/SdInfo.h	/^  unsigned file_format_grp : 1;$/;"	m	struct:CSDV1
file_format_grp	SD/src/utility/SdInfo.h	/^  unsigned file_format_grp : 1;$/;"	m	struct:CSDV2
fill	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::fill(color c) {$/;"	f	class:Adafruit_GFX
fill	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::fill(uint8_t red, uint8_t green, uint8_t blue) {$/;"	f	class:Adafruit_GFX
fill	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::fill(color c) $/;"	f	class:Adafruit_GFX
fill	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::fill(uint8_t red, uint8_t green, uint8_t blue) $/;"	f	class:Adafruit_GFX
fillCircle	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::fillCircle(int16_t x0, int16_t y0, int16_t r,$/;"	f	class:Adafruit_GFX
fillCircle	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::fillCircle(int16_t x0, int16_t y0, int16_t r,$/;"	f	class:Adafruit_GFX
fillCircleHelper	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,$/;"	f	class:Adafruit_GFX
fillCircleHelper	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,$/;"	f	class:Adafruit_GFX
fillColor	Robot_Control/src/utility/Adafruit_GFX.h	/^  color fillColor;$/;"	m	class:Adafruit_GFX
fillColor	TFT/src/utility/Adafruit_GFX.h	/^  color fillColor;$/;"	m	class:Adafruit_GFX
fillRect	Robot_Control/src/Arduino_LCD.cpp	/^void Arduino_LCD::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,$/;"	f	class:Arduino_LCD
fillRect	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,$/;"	f	class:Adafruit_GFX
fillRect	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,$/;"	f	class:Adafruit_GFX
fillRect	TFT/src/utility/Adafruit_ST7735.cpp	/^void Adafruit_ST7735::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,$/;"	f	class:Adafruit_ST7735
fillRoundRect	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::fillRoundRect(int16_t x, int16_t y, int16_t w,$/;"	f	class:Adafruit_GFX
fillRoundRect	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::fillRoundRect(int16_t x, int16_t y, int16_t w,$/;"	f	class:Adafruit_GFX
fillScreen	Robot_Control/src/Arduino_LCD.cpp	/^void Arduino_LCD::fillScreen(uint16_t color) {$/;"	f	class:Arduino_LCD
fillScreen	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::fillScreen(uint16_t color) {$/;"	f	class:Adafruit_GFX
fillScreen	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::fillScreen(uint16_t color) {$/;"	f	class:Adafruit_GFX
fillScreen	TFT/src/utility/Adafruit_ST7735.cpp	/^void Adafruit_ST7735::fillScreen(uint16_t color) {$/;"	f	class:Adafruit_ST7735
fillTriangle	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::fillTriangle ( int16_t x0, int16_t y0,$/;"	f	class:Adafruit_GFX
fillTriangle	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::fillTriangle ( int16_t x0, int16_t y0,$/;"	f	class:Adafruit_GFX
finISR	Servo/src/avr/Servo.cpp	/^static void finISR(timer16_Sequence_t timer)$/;"	f	file:
finISR	Servo/src/sam/Servo.cpp	/^static void finISR(timer16_Sequence_t timer)$/;"	f	file:
finISR	Servo/src/samd/Servo.cpp	/^static void finISR(timer16_Sequence_t timer)$/;"	f	file:
finalWrite	GSM/src/GSM3SoftSerial.cpp	/^size_t GSM3SoftSerial::finalWrite(uint8_t c)$/;"	f	class:GSM3SoftSerial
find	arduino/Stream.cpp	/^bool  Stream::find(char *target)$/;"	f	class:Stream
find	arduino/Stream.cpp	/^bool Stream::find(char *target, size_t length)$/;"	f	class:Stream
find	arduino/Stream.h	/^  bool find(char target) { return find (&target, 1); }$/;"	f	class:Stream
find	arduino/Stream.h	/^  bool find(uint8_t *target) { return find ((char *)target); }$/;"	f	class:Stream
find	arduino/Stream.h	/^  bool find(uint8_t *target, size_t length) { return find ((char *)target, length); }$/;"	f	class:Stream
findMulti	arduino/Stream.cpp	/^int Stream::findMulti( struct Stream::MultiTarget *targets, int tCount) {$/;"	f	class:Stream
findUntil	arduino/Stream.cpp	/^bool  Stream::findUntil(char *target, char *terminator)$/;"	f	class:Stream
findUntil	arduino/Stream.cpp	/^bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)$/;"	f	class:Stream
findUntil	arduino/Stream.h	/^  bool findUntil(uint8_t *target, char *terminator) { return findUntil((char *)target, terminator); }$/;"	f	class:Stream
findUntil	arduino/Stream.h	/^  bool findUntil(uint8_t *target, size_t targetLen, char *terminate, size_t termLen) {return findUntil((char *)target, targetLen, terminate, termLen); }$/;"	f	class:Stream
firmwareVersionCount	Firmata/Firmata.h	/^    byte firmwareVersionCount;$/;"	m	class:FirmataClass
firmwareVersionVector	Firmata/Firmata.h	/^    byte *firmwareVersionVector;$/;"	m	class:FirmataClass
firstCluster	SD/src/utility/SdFat.h	/^  uint32_t firstCluster(void) const {return firstCluster_;}$/;"	f	class:SdFile
firstClusterHigh	Robot_Control/src/FatStructs.h	/^  uint16_t firstClusterHigh;$/;"	m	struct:directoryEntry
firstClusterHigh	SD/src/utility/FatStructs.h	/^  uint16_t firstClusterHigh;$/;"	m	struct:directoryEntry
firstClusterLow	Robot_Control/src/FatStructs.h	/^  uint16_t firstClusterLow;$/;"	m	struct:directoryEntry
firstClusterLow	SD/src/utility/FatStructs.h	/^  uint16_t firstClusterLow;$/;"	m	struct:directoryEntry
firstCluster_	Robot_Control/src/Fat16.h	/^  fat_t firstCluster_;     \/\/ first cluster of file$/;"	m	class:Fat16
firstCluster_	SD/src/utility/SdFat.h	/^  uint32_t  firstCluster_;  \/\/ first cluster of file$/;"	m	class:SdFile
firstInterface	arduino/USBCore.h	/^	u8 firstInterface;$/;"	m	struct:__anon19
firstSector	Robot_Control/src/FatStructs.h	/^  uint32_t firstSector;$/;"	m	struct:partitionTable
firstSector	SD/src/utility/FatStructs.h	/^  uint32_t firstSector;$/;"	m	struct:partitionTable
firstString	GSM/src/GSM3CircularBuffer.h	/^		inline char* firstString(){return (char*)theBuffer+head;};$/;"	f	class:GSM3CircularBuffer
flagReadingSMS	GSM/src/GSM3ShieldV1SMSProvider.h	/^		bool flagReadingSMS; \/\/ To detect first SMS char if not yet reading.$/;"	m	class:GSM3ShieldV1SMSProvider
flagReadingSocket	GSM/src/GSM3ShieldV1MultiClientProvider.h	/^		bool flagReadingSocket; \/\/In case socket data being read, update fullBufferSocket in the next buffer.$/;"	m	class:GSM3ShieldV1MultiClientProvider
flags	Ethernet/src/Dhcp.h	/^	uint16_t flags;$/;"	m	struct:_RIP_MSG_FIXED
flags	GSM/src/GSM3MobileClientService.h	/^		uint8_t flags;$/;"	m	class:GSM3MobileClientService
flags	GSM/src/GSM3MobileServerService.h	/^		uint8_t flags;$/;"	m	class:GSM3MobileServerService
flags	GSM/src/GSM3SMSService.h	/^		uint8_t flags;$/;"	m	class:GSM3SMSService
flags	GSM/src/GSM3VoiceCallService.h	/^		uint8_t flags;$/;"	m	class:GSM3VoiceCallService
flags_	Robot_Control/src/Fat16.h	/^  uint8_t flags_;          \/\/ see above for bit definitions$/;"	m	class:Fat16
flags_	SD/src/utility/SdFat.h	/^  uint8_t   flags_;         \/\/ See above for definition of flags_ bits$/;"	m	class:SdFile
float	SoftwareSerial/src/SoftwareSerial.h	119;"	d
flush	Ethernet/src/EthernetClient.cpp	/^void EthernetClient::flush() {$/;"	f	class:EthernetClient
flush	Ethernet/src/EthernetUdp.cpp	/^void EthernetUDP::flush()$/;"	f	class:EthernetUDP
flush	Ethernet/src/utility/socket.cpp	/^void flush(SOCKET s) {$/;"	f
flush	Firmata/utility/BLEStream.h	/^void BLEStream::flush(void)$/;"	f	class:BLEStream
flush	Firmata/utility/EthernetClientStream.h	/^void EthernetClientStream::flush()$/;"	f	class:EthernetClientStream
flush	Firmata/utility/WiFiStream.h	/^  inline void flush()$/;"	f	class:WiFiStream
flush	GSM/src/GSM3CircularBuffer.cpp	/^void GSM3CircularBuffer::flush()$/;"	f	class:GSM3CircularBuffer
flush	GSM/src/GSM3MobileClientService.cpp	/^void GSM3MobileClientService::flush()$/;"	f	class:GSM3MobileClientService
flush	GSM/src/GSM3SMSService.cpp	/^void GSM3SMSService::flush()$/;"	f	class:GSM3SMSService
flush	GSM/src/GSM3ShieldV1DirectModemProvider.cpp	/^void GSM3ShieldV1DirectModemProvider::flush()$/;"	f	class:GSM3ShieldV1DirectModemProvider
flush	SD/src/File.cpp	/^void File::flush() {$/;"	f	class:File
flush	SoftwareSerial/src/SoftwareSerial.cpp	/^void SoftwareSerial::flush()$/;"	f	class:SoftwareSerial
flush	Wire/src/Wire.cpp	/^void TwoWire::flush(void)$/;"	f	class:TwoWire
flush	arduino/CDC.cpp	/^void Serial_::flush(void)$/;"	f	class:Serial_
flush	arduino/HardwareSerial.cpp	/^void HardwareSerial::flush()$/;"	f	class:HardwareSerial
flushSMS	GSM/src/GSM3MobileMockupProvider.cpp	/^void GSM3MobileMockupProvider::flushSMS()$/;"	f	class:GSM3MobileMockupProvider
flushSMS	GSM/src/GSM3MobileSMSProvider.h	/^		virtual inline void flushSMS(){return;};$/;"	f	class:GSM3MobileSMSProvider
flushSMS	GSM/src/GSM3ShieldV1SMSProvider.cpp	/^void GSM3ShieldV1SMSProvider::flushSMS()$/;"	f	class:GSM3ShieldV1SMSProvider
flushSMSContinue	GSM/src/GSM3ShieldV1SMSProvider.cpp	/^void GSM3ShieldV1SMSProvider::flushSMSContinue()$/;"	f	class:GSM3ShieldV1SMSProvider
flushSocket	GSM/src/GSM3MobileMockupProvider.cpp	/^void GSM3MobileMockupProvider::flushSocket(int idsocket)$/;"	f	class:GSM3MobileMockupProvider
flushSocket	GSM/src/GSM3ShieldV1ClientProvider.cpp	/^void GSM3ShieldV1ClientProvider::flushSocket()$/;"	f	class:GSM3ShieldV1ClientProvider
flushSocket	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^void GSM3ShieldV1MultiClientProvider::flushSocket()$/;"	f	class:GSM3ShieldV1MultiClientProvider
flushSocketContinue	GSM/src/GSM3ShieldV1ClientProvider.cpp	/^void GSM3ShieldV1ClientProvider::flushSocketContinue()$/;"	f	class:GSM3ShieldV1ClientProvider
flushSocketContinue	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^void GSM3ShieldV1MultiClientProvider::flushSocketContinue()$/;"	f	class:GSM3ShieldV1MultiClientProvider
foreGround	Robot_Control/src/ArduinoRobot.h	/^		uint16_t foreGround;\/\/foreground color$/;"	m	class:RobotControl
freeChain	Robot_Control/src/Fat16.cpp	/^uint8_t Fat16::freeChain(fat_t cluster) {$/;"	f	class:Fat16
freeChain	SD/src/utility/SdVolume.cpp	/^uint8_t SdVolume::freeChain(uint32_t cluster) {$/;"	f	class:SdVolume
freq	Robot_Control/src/Squawk.h	/^  uint16_t freq;$/;"	m	struct:__anon7
fromString	arduino/IPAddress.cpp	/^bool IPAddress::fromString(const char *address)$/;"	f	class:IPAddress
fromString	arduino/IPAddress.h	/^    bool fromString(const String &address) { return fromString(address.c_str()); }$/;"	f	class:IPAddress
fullBufferSMS	GSM/src/GSM3ShieldV1SMSProvider.h	/^		bool fullBufferSMS; \/\/ To detect if the SMS being read needs another buffer. $/;"	m	class:GSM3ShieldV1SMSProvider
fullBufferSocket	GSM/src/GSM3ShieldV1MultiClientProvider.h	/^		bool fullBufferSocket;	\/\/To detect if the socket data being read needs another buffer.$/;"	m	class:GSM3ShieldV1MultiClientProvider
functionClass	arduino/USBCore.h	/^	u8 functionClass;$/;"	m	struct:__anon19
functionProtocol	arduino/USBCore.h	/^	u8 functionProtocol;$/;"	m	struct:__anon19
functionalDescriptor	arduino/USBCore.h	/^	CDCCSInterfaceDescriptor	functionalDescriptor;	\/\/ CDC_UNION$/;"	m	struct:__anon24
funtionSubClass	arduino/USBCore.h	/^	u8 funtionSubClass;$/;"	m	struct:__anon19
fxc	Robot_Control/src/Squawk.cpp	/^  uint8_t fxc, fxp, ixp;$/;"	m	struct:__anon5	file:
fxm	Robot_Control/src/Squawk.cpp	/^static fxm_t    fxm[4];$/;"	v	file:
fxm_t	Robot_Control/src/Squawk.cpp	/^} fxm_t;$/;"	t	typeref:struct:__anon6	file:
fxp	Robot_Control/src/Squawk.cpp	/^  uint8_t fxc, fxp, ixp;$/;"	m	struct:__anon5	file:
fxp	Robot_Control/src/Squawk.cpp	/^  uint8_t fxp;$/;"	m	struct:__anon4	file:
gatewayIP	Ethernet/src/Ethernet.cpp	/^IPAddress EthernetClass::gatewayIP()$/;"	f	class:EthernetClass
genericCommand_rq	GSM/src/GSM3ShieldV1ModemCore.cpp	/^void GSM3ShieldV1ModemCore::genericCommand_rq(PGM_P str, bool addCR)$/;"	f	class:GSM3ShieldV1ModemCore
genericCommand_rqc	GSM/src/GSM3ShieldV1ModemCore.cpp	/^void GSM3ShieldV1ModemCore::genericCommand_rqc(const char* str, bool addCR)$/;"	f	class:GSM3ShieldV1ModemCore
genericParse_rsp	GSM/src/GSM3ShieldV1ModemCore.cpp	/^bool GSM3ShieldV1ModemCore::genericParse_rsp(bool& rsp, char* string, char* string2)$/;"	f	class:GSM3ShieldV1ModemCore
get	EEPROM/src/EEPROM.h	/^    template< typename T > T &get( int idx, T &t ){$/;"	f	struct:EEPROMClass
getAnalogValue	Robot_Control/src/Multiplexer.cpp	/^int Multiplexer::getAnalogValue(){$/;"	f	class:Multiplexer
getAnalogValue	Robot_Motor/src/Multiplexer.cpp	/^int Multiplexer::getAnalogValue(){$/;"	f	class:Multiplexer
getAnalogValueAt	Robot_Control/src/Multiplexer.cpp	/^int Multiplexer::getAnalogValueAt(uint8_t num){$/;"	f	class:Multiplexer
getAnalogValueAt	Robot_Motor/src/Multiplexer.cpp	/^int Multiplexer::getAnalogValueAt(uint8_t num){$/;"	f	class:Multiplexer
getBand	GSM/src/GSM3ShieldV1BandManagement.cpp	/^String GSM3ShieldV1BandManagement::getBand()$/;"	f	class:GSM3ShieldV1BandManagement
getBytes	arduino/WString.cpp	/^void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const$/;"	f	class:String
getCol	Robot_Control/src/utility/RobotTextManager.cpp	/^int TextManager::getCol(int colNum){$/;"	f	class:TextManager
getColLin	Robot_Control/src/utility/VirtualKeyboard.cpp	/^int VirtualKeyboard::getColLin(int val){$/;"	f	class:VirtualKeyboard
getCommandCounter	GSM/src/GSM3ShieldV1ModemCore.h	/^		uint8_t getCommandCounter(){return commandCounter;};$/;"	f	class:GSM3ShieldV1ModemCore
getCommandError	GSM/src/GSM3ShieldV1ModemCore.h	/^		uint8_t getCommandError(){return commandError;};$/;"	f	class:GSM3ShieldV1ModemCore
getCurrentCarrier	GSM/src/GSM3ShieldV1ScanNetworks.cpp	/^String GSM3ShieldV1ScanNetworks::getCurrentCarrier()$/;"	f	class:GSM3ShieldV1ScanNetworks
getDescriptor	HID/src/HID.cpp	/^int HID_::getDescriptor(USBSetup& setup)$/;"	f	class:HID_
getDescriptor	arduino/PluggableUSB.cpp	/^int PluggableUSB_::getDescriptor(USBSetup& setup)$/;"	f	class:PluggableUSB_
getDhcpServerIp	Ethernet/src/Dhcp.cpp	/^IPAddress DhcpClass::getDhcpServerIp()$/;"	f	class:DhcpClass
getDigitalValue	Robot_Control/src/Multiplexer.cpp	/^bool Multiplexer::getDigitalValue(){$/;"	f	class:Multiplexer
getDigitalValue	Robot_Motor/src/Multiplexer.cpp	/^bool Multiplexer::getDigitalValue(){$/;"	f	class:Multiplexer
getDigitalValueAt	Robot_Control/src/Multiplexer.cpp	/^bool Multiplexer::getDigitalValueAt(uint8_t num){$/;"	f	class:Multiplexer
getDigitalValueAt	Robot_Motor/src/Multiplexer.cpp	/^bool Multiplexer::getDigitalValueAt(uint8_t num){$/;"	f	class:Multiplexer
getDnsServerIp	Ethernet/src/Dhcp.cpp	/^IPAddress DhcpClass::getDnsServerIp()$/;"	f	class:DhcpClass
getGatewayIp	Ethernet/src/Dhcp.cpp	/^IPAddress DhcpClass::getGatewayIp()$/;"	f	class:DhcpClass
getGatewayIp	Ethernet/src/utility/w5100.h	/^void W5100Class::getGatewayIp(uint8_t *_addr) {$/;"	f	class:W5100Class
getHead	GSM/src/GSM3CircularBuffer.h	/^		inline byte getHead(){return head;};$/;"	f	class:GSM3CircularBuffer
getHostByName	Ethernet/src/Dns.cpp	/^int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)$/;"	f	class:DNSClient
getICCID	GSM/src/GSM3MobileCellManagement.h	/^		virtual inline int getICCID() {return 0;};$/;"	f	class:GSM3MobileCellManagement
getICCID	GSM/src/GSM3ShieldV1CellManagement.cpp	/^int GSM3ShieldV1CellManagement::getICCID(char *iccid)$/;"	f	class:GSM3ShieldV1CellManagement
getICCIDContinue	GSM/src/GSM3ShieldV1CellManagement.cpp	/^void GSM3ShieldV1CellManagement::getICCIDContinue()$/;"	f	class:GSM3ShieldV1CellManagement
getIMEI	GSM/src/GSM3ShieldV1ModemVerification.cpp	/^String GSM3ShieldV1ModemVerification::getIMEI()$/;"	f	class:GSM3ShieldV1ModemVerification
getIP	GSM/src/GSM3MobileNetworkProvider.h	/^		virtual inline int getIP(char* LocalIP, int LocalIPlength){return 0;};$/;"	f	class:GSM3MobileNetworkProvider
getIP	GSM/src/GSM3ShieldV1DataNetworkProvider.cpp	/^int GSM3ShieldV1DataNetworkProvider::getIP(char* LocalIP, int LocalIPlength)$/;"	f	class:GSM3ShieldV1DataNetworkProvider
getIP	GSM/src/GSM3ShieldV1MultiServerProvider.cpp	/^int GSM3ShieldV1MultiServerProvider::getIP(char* LocalIP, int LocalIPlength)$/;"	f	class:GSM3ShieldV1MultiServerProvider
getIPAddress	Ethernet/src/utility/w5100.h	/^void W5100Class::getIPAddress(uint8_t *_addr) {$/;"	f	class:W5100Class
getIPAddress	GSM/src/GSM3ShieldV1DataNetworkProvider.cpp	/^IPAddress GSM3ShieldV1DataNetworkProvider::getIPAddress() {$/;"	f	class:GSM3ShieldV1DataNetworkProvider
getIPContinue	GSM/src/GSM3ShieldV1DataNetworkProvider.cpp	/^void GSM3ShieldV1DataNetworkProvider::getIPContinue()$/;"	f	class:GSM3ShieldV1DataNetworkProvider
getIPContinue	GSM/src/GSM3ShieldV1MultiServerProvider.cpp	/^void GSM3ShieldV1MultiServerProvider::getIPContinue()$/;"	f	class:GSM3ShieldV1MultiServerProvider
getIRresult	Robot_IR_Remote/src/IRremoteTools.cpp	/^unsigned long getIRresult(){$/;"	f
getInput	Robot_Control/src/utility/RobotTextManager.cpp	/^void TextManager::getInput(int lin, int col){$/;"	f	class:TextManager
getInterface	HID/src/HID.cpp	/^int HID_::getInterface(uint8_t* interfaceCount)$/;"	f	class:HID_
getInterface	arduino/PluggableUSB.cpp	/^int PluggableUSB_::getInterface(uint8_t* interfaceCount)$/;"	f	class:PluggableUSB_
getLin	Robot_Control/src/utility/RobotTextManager.cpp	/^int TextManager::getLin(int lineNum){$/;"	f	class:TextManager
getLocalIP	Firmata/utility/WiFiStream.h	/^  inline IPAddress getLocalIP()$/;"	f	class:WiFiStream
getLocalIp	Ethernet/src/Dhcp.cpp	/^IPAddress DhcpClass::getLocalIp()$/;"	f	class:DhcpClass
getLocation	GSM/src/GSM3MobileCellManagement.h	/^		virtual inline int getLocation() {return 0;};$/;"	f	class:GSM3MobileCellManagement
getLocation	GSM/src/GSM3ShieldV1CellManagement.cpp	/^int GSM3ShieldV1CellManagement::getLocation(char *country, char *network, char *area, char *cell)$/;"	f	class:GSM3ShieldV1CellManagement
getLocationContinue	GSM/src/GSM3ShieldV1CellManagement.cpp	/^void GSM3ShieldV1CellManagement::getLocationContinue()$/;"	f	class:GSM3ShieldV1CellManagement
getMACAddress	Ethernet/src/utility/w5100.h	/^void W5100Class::getMACAddress(uint8_t *_addr) {$/;"	f	class:W5100Class
getMobileNetworkProvider	GSM/src/GSM3MobileNetworkRegistry.cpp	/^GSM3MobileNetworkProvider* GSM3MobileNetworkRegistry::getMobileNetworkProvider()$/;"	f	class:GSM3MobileNetworkRegistry
getNewOccupiedSocketAsServer	GSM/src/GSM3MobileNetworkProvider.cpp	/^int GSM3MobileNetworkProvider::getNewOccupiedSocketAsServer()$/;"	f	class:GSM3MobileNetworkProvider
getNewOccupiedSocketAsServer	GSM/src/GSM3ShieldV1MultiServerProvider.cpp	/^int GSM3ShieldV1MultiServerProvider::getNewOccupiedSocketAsServer()$/;"	f	class:GSM3ShieldV1MultiServerProvider
getNewOccupiedSocketAsServer	GSM/src/GSM3ShieldV1ServerProvider.cpp	/^int GSM3ShieldV1ServerProvider::getNewOccupiedSocketAsServer()$/;"	f	class:GSM3ShieldV1ServerProvider
getNextPathComponent	SD/src/SD.cpp	/^bool getNextPathComponent(const char *path, unsigned int *p_offset,$/;"	f	namespace:SDLib
getOngoingCommand	GSM/src/GSM3ShieldV1ModemCore.h	/^		GSM3_commandType_e getOngoingCommand(){return ongoingCommand;};$/;"	f	class:GSM3ShieldV1ModemCore
getPGMtext	Robot_Control/examples/explore/R06_Wheel_Calibration/scripts_library.h	/^void getPGMtext(int seq){$/;"	f
getPGMtext	Robot_Control/src/utility/RobotTextManager.cpp	/^void TextManager::getPGMtext(int seq){$/;"	f	class:TextManager
getPINUsed	GSM/src/GSM3ShieldV1PinManagement.cpp	/^bool GSM3ShieldV1PinManagement::getPINUsed()$/;"	f	class:GSM3ShieldV1PinManagement
getParentDir	SD/src/SD.cpp	/^SdFile SDClass::getParentDir(const char *filepath, int *index) {$/;"	f	class:SDLib::SDClass
getPhoneNumber	GSM/src/GSM3ShieldV1ModemCore.h	/^		char *getPhoneNumber(){return phoneNumber;};$/;"	f	class:GSM3ShieldV1ModemCore
getPinMode	Firmata/Firmata.cpp	/^byte FirmataClass::getPinMode(byte pin)$/;"	f	class:FirmataClass
getPinMode	SD/src/utility/Sd2PinMap.h	/^  uint8_t getPinMode(uint8_t pin) {$/;"	f
getPinState	Firmata/Firmata.cpp	/^int FirmataClass::getPinState(byte pin)$/;"	f	class:FirmataClass
getPort	GSM/src/GSM3ShieldV1ModemCore.h	/^		int getPort(){return port;};$/;"	f	class:GSM3ShieldV1ModemCore
getPortFromId	Firmata/utility/SerialFirmata.cpp	/^Stream* SerialFirmata::getPortFromId(byte portId)$/;"	f	class:SerialFirmata
getRClevel	Robot_IR_Remote/src/IRremote.cpp	/^int IRrecv::getRClevel(decode_results *results, int *offset, int *used, int t1) {$/;"	f	class:IRrecv
getRXReceivedSize	Ethernet/src/utility/w5100.cpp	/^uint16_t W5100Class::getRXReceivedSize(SOCKET s)$/;"	f	class:W5100Class
getReading	Robot_Control/src/Compass.cpp	/^float Compass::getReading(){$/;"	f	class:Compass
getRotation	Robot_Control/src/utility/Adafruit_GFX.cpp	/^uint8_t Adafruit_GFX::getRotation(void) {$/;"	f	class:Adafruit_GFX
getRotation	TFT/src/utility/Adafruit_GFX.cpp	/^uint8_t Adafruit_GFX::getRotation(void) $/;"	f	class:Adafruit_GFX
getSelection	Robot_Control/src/utility/VirtualKeyboard.cpp	/^char VirtualKeyboard::getSelection(){$/;"	f	class:VirtualKeyboard
getSerialPinNumbers	Firmata/utility/SerialFirmata.h	/^  inline serial_pins getSerialPinNumbers(uint8_t portId) {$/;"	f	namespace:__anon3
getSerialPinType	Firmata/utility/SerialFirmata.h	/^  inline uint8_t getSerialPinType(uint8_t pin) {$/;"	f	namespace:__anon3
getShortName	HID/src/HID.cpp	/^uint8_t HID_::getShortName(char *name)$/;"	f	class:HID_
getShortName	arduino/PluggableUSB.cpp	/^void PluggableUSB_::getShortName(char *iSerialNum)$/;"	f	class:PluggableUSB_
getShortName	arduino/PluggableUSB.h	/^  virtual uint8_t getShortName(char *name) { name[0] = 'A'+pluggedInterface; return 1; }$/;"	f	class:PluggableUSBModule
getSignalStrength	GSM/src/GSM3ShieldV1ScanNetworks.cpp	/^String GSM3ShieldV1ScanNetworks::getSignalStrength()$/;"	f	class:GSM3ShieldV1ScanNetworks
getSocket	GSM/src/GSM3MobileClientService.h	/^		inline int getSocket(){return (int)mySocket;};$/;"	f	class:GSM3MobileClientService
getSocket	GSM/src/GSM3ShieldV1ClientProvider.cpp	/^int GSM3ShieldV1ClientProvider::getSocket(int socket)$/;"	f	class:GSM3ShieldV1ClientProvider
getSocket	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^int GSM3ShieldV1MultiClientProvider::getSocket(int socket)$/;"	f	class:GSM3ShieldV1MultiClientProvider
getSocketAsServerModemStatus	GSM/src/GSM3MobileNetworkProvider.h	/^		virtual inline bool getSocketAsServerModemStatus(int s){return false;};$/;"	f	class:GSM3MobileNetworkProvider
getSocketAsServerModemStatus	GSM/src/GSM3ShieldV1MultiServerProvider.cpp	/^bool GSM3ShieldV1MultiServerProvider::getSocketAsServerModemStatus(int s)$/;"	f	class:GSM3ShieldV1MultiServerProvider
getSocketAsServerModemStatus	GSM/src/GSM3ShieldV1ServerProvider.cpp	/^bool GSM3ShieldV1ServerProvider::getSocketAsServerModemStatus(int s)$/;"	f	class:GSM3ShieldV1ServerProvider
getSocketModemStatus	GSM/src/GSM3MobileMockupProvider.cpp	/^bool GSM3MobileMockupProvider::getSocketModemStatus(uint8_t s)$/;"	f	class:GSM3MobileMockupProvider
getSocketNumber	Ethernet/src/EthernetClient.cpp	/^uint8_t EthernetClient::getSocketNumber() {$/;"	f	class:EthernetClient
getStatus	GSM/src/GSM3MobileMockupProvider.h	/^		inline GSM3_NetworkStatus_t getStatus(){return ERROR;};$/;"	f	class:GSM3MobileMockupProvider
getStatus	GSM/src/GSM3MobileNetworkProvider.h	/^		virtual inline GSM3_NetworkStatus_t getStatus(){return ERROR;};$/;"	f	class:GSM3MobileNetworkProvider
getStatus	GSM/src/GSM3ShieldV1AccessProvider.h	/^		inline GSM3_NetworkStatus_t getStatus(){return theGSM3ShieldV1ModemCore.getStatus();};$/;"	f	class:GSM3ShieldV1AccessProvider
getStatus	GSM/src/GSM3ShieldV1DataNetworkProvider.h	/^		inline GSM3_NetworkStatus_t getStatus(){return theGSM3ShieldV1ModemCore.getStatus();};$/;"	f	class:GSM3ShieldV1DataNetworkProvider
getStatus	GSM/src/GSM3ShieldV1ModemCore.h	/^		inline GSM3_NetworkStatus_t getStatus() { return _status; };$/;"	f	class:GSM3ShieldV1ModemCore
getStatusSocketAsServer	GSM/src/GSM3MobileNetworkProvider.cpp	/^bool GSM3MobileNetworkProvider::getStatusSocketAsServer(uint8_t socket)$/;"	f	class:GSM3MobileNetworkProvider
getStatusSocketAsServer	GSM/src/GSM3ShieldV1MultiServerProvider.cpp	/^bool GSM3ShieldV1MultiServerProvider::getStatusSocketAsServer(uint8_t socket)$/;"	f	class:GSM3ShieldV1MultiServerProvider
getStatusSocketAsServer	GSM/src/GSM3ShieldV1ServerProvider.cpp	/^bool GSM3ShieldV1ServerProvider::getStatusSocketAsServer(uint8_t socket)$/;"	f	class:GSM3ShieldV1ServerProvider
getStatusSocketClient	GSM/src/GSM3ShieldV1ClientProvider.cpp	/^bool GSM3ShieldV1ClientProvider::getStatusSocketClient(uint8_t socket)$/;"	f	class:GSM3ShieldV1ClientProvider
getStatusSocketClient	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^bool GSM3ShieldV1MultiClientProvider::getStatusSocketClient(uint8_t socket)$/;"	f	class:GSM3ShieldV1MultiClientProvider
getSubnetMask	Ethernet/src/Dhcp.cpp	/^IPAddress DhcpClass::getSubnetMask()$/;"	f	class:DhcpClass
getSubnetMask	Ethernet/src/utility/w5100.h	/^void W5100Class::getSubnetMask(uint8_t *_addr) {$/;"	f	class:W5100Class
getTXFreeSize	Ethernet/src/utility/w5100.cpp	/^uint16_t W5100Class::getTXFreeSize(SOCKET s)$/;"	f	class:W5100Class
getTail	GSM/src/GSM3CircularBuffer.h	/^		inline byte getTail(){return tail;};$/;"	f	class:GSM3CircularBuffer
getTimeout	arduino/Stream.h	/^  unsigned long getTimeout(void) { return _timeout; }$/;"	f	class:Stream
getWriteError	arduino/Print.h	/^    int getWriteError() { return write_error; }$/;"	f	class:Print
get_motorBoardData	Robot_Control/src/Sensors.cpp	/^int RobotControl::get_motorBoardData(uint8_t port){$/;"	f	class:RobotControl
getvoiceCallStatus	GSM/src/GSM3MobileMockupProvider.h	/^		inline GSM3_voiceCall_st getvoiceCallStatus(){return IDLE_CALL;};$/;"	f	class:GSM3MobileMockupProvider
getvoiceCallStatus	GSM/src/GSM3ShieldV1VoiceProvider.h	/^		GSM3_voiceCall_st getvoiceCallStatus(){ready(); return _voiceCallstatus;};$/;"	f	class:GSM3ShieldV1VoiceProvider
getvoiceCallStatus	GSM/src/GSM3VoiceCallService.cpp	/^GSM3_voiceCall_st GSM3VoiceCallService::getvoiceCallStatus()$/;"	f	class:GSM3VoiceCallService
giaddr	Ethernet/src/Dhcp.h	/^	uint8_t  giaddr[4];$/;"	m	struct:_RIP_MSG_FIXED
glissando	Robot_Control/src/Squawk.cpp	/^  bool      glissando;$/;"	m	struct:__anon6	file:
glissando	Robot_Control/src/Squawk.cpp	/^static inline uint16_t glissando(uint8_t ch) {$/;"	f	file:
gsm	GSM/src/GSM3ShieldV1ModemVerification.h	/^		GSM3ShieldV1AccessProvider gsm; \/\/ Access provider to GSM\/GPRS network$/;"	m	class:GSM3ShieldV1ModemVerification
gsm	GSM/src/GSM3ShieldV1PinManagement.h	/^		GSM3ShieldV1AccessProvider gsm; \/\/ GSM access required for network register with PIN code     $/;"	m	class:GSM3ShieldV1PinManagement
gss	GSM/src/GSM3ShieldV1ModemCore.h	/^		GSM3SoftSerial gss; \/\/ Direct access to modem$/;"	m	class:GSM3ShieldV1ModemCore
handleCapability	Firmata/utility/SerialFirmata.cpp	/^void SerialFirmata::handleCapability(byte pin)$/;"	f	class:SerialFirmata
handlePinMode	Firmata/utility/SerialFirmata.cpp	/^boolean SerialFirmata::handlePinMode(byte pin, int mode)$/;"	f	class:SerialFirmata
handleSysex	Firmata/utility/SerialFirmata.cpp	/^boolean SerialFirmata::handleSysex(byte command, byte argc, byte *argv)$/;"	f	class:SerialFirmata
handle_interrupt	GSM/src/GSM3SoftSerial.cpp	/^void GSM3SoftSerial::handle_interrupt()$/;"	f	class:GSM3SoftSerial
handle_interrupt	SoftwareSerial/src/SoftwareSerial.cpp	/^inline void SoftwareSerial::handle_interrupt()$/;"	f	class:SoftwareSerial
handle_interrupts	Servo/src/avr/Servo.cpp	/^static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)$/;"	f	file:
hangCall	GSM/src/GSM3MobileMockupProvider.h	/^		inline int hangCall(){return 0;};$/;"	f	class:GSM3MobileMockupProvider
hangCall	GSM/src/GSM3ShieldV1VoiceProvider.cpp	/^int GSM3ShieldV1VoiceProvider::hangCall()$/;"	f	class:GSM3ShieldV1VoiceProvider
hangCall	GSM/src/GSM3VoiceCallService.cpp	/^int GSM3VoiceCallService::hangCall()$/;"	f	class:GSM3VoiceCallService
hangCallContinue	GSM/src/GSM3ShieldV1VoiceProvider.cpp	/^void GSM3ShieldV1VoiceProvider::hangCallContinue()$/;"	f	class:GSM3ShieldV1VoiceProvider
head	GSM/src/GSM3CircularBuffer.h	/^		volatile byte head; \/\/ First written one$/;"	m	class:GSM3CircularBuffer
headCount	Robot_Control/src/FatStructs.h	/^  uint16_t headCount;$/;"	m	struct:biosParmBlock
headCount	SD/src/utility/FatStructs.h	/^  uint16_t headCount;$/;"	m	struct:biosParmBlock
header	arduino/USBCore.h	/^	CDCCSInterfaceDescriptor	header;$/;"	m	struct:__anon24
height	Robot_Control/src/ArduinoRobot.h	/^	uint8_t height;$/;"	m	struct:EEPROM_BMP
height	Robot_Control/src/utility/Adafruit_GFX.cpp	/^int16_t Adafruit_GFX::height(void) {$/;"	f	class:Adafruit_GFX
height	TFT/src/utility/Adafruit_GFX.cpp	/^int16_t Adafruit_GFX::height(void) $/;"	f	class:Adafruit_GFX
height	TFT/src/utility/PImage.h	/^  int height() { return _bmpHeight; }$/;"	f	class:PImage
hid	HID/src/HID.h	/^  InterfaceDescriptor hid;$/;"	m	struct:__anon9
hidddenSectors	Robot_Control/src/FatStructs.h	/^  uint32_t hidddenSectors;$/;"	m	struct:biosParmBlock
hidddenSectors	SD/src/utility/FatStructs.h	/^  uint32_t hidddenSectors;$/;"	m	struct:biosParmBlock
hide	Robot_Control/src/utility/VirtualKeyboard.cpp	/^void VirtualKeyboard::hide(){$/;"	f	class:VirtualKeyboard
hideColor	Robot_Control/src/utility/VirtualKeyboard.h	/^		uint16_t hideColor;$/;"	m	class:VirtualKeyboard
highByte	arduino/Arduino.h	109;"	d
hlen	Ethernet/src/Dhcp.h	/^	uint8_t  hlen;$/;"	m	struct:_RIP_MSG_FIXED
home	LiquidCrystal/src/LiquidCrystal.cpp	/^void LiquidCrystal::home()$/;"	f	class:LiquidCrystal
hops	Ethernet/src/Dhcp.h	/^	uint8_t  hops;$/;"	m	struct:_RIP_MSG_FIXED
host	Firmata/utility/EthernetClientStream.h	/^    const char* host;$/;"	m	class:EthernetClientStream
hostConnectionCallbackFunction	Firmata/utility/WiFiStream.h	/^  typedef void (*hostConnectionCallbackFunction)(byte);$/;"	t
hostName	Ethernet/src/Dhcp.h	/^	hostName		=	12,$/;"	e	enum:__anon1
htonl	Ethernet/src/utility/util.h	8;"	d
htons	Ethernet/src/utility/util.h	4;"	d
htype	Ethernet/src/Dhcp.h	/^	uint8_t  htype; $/;"	m	struct:_RIP_MSG_FIXED
hwSPI	Robot_Control/src/Arduino_LCD.h	/^  boolean  hwSPI;$/;"	m	class:Arduino_LCD
hwSPI	TFT/src/utility/Adafruit_ST7735.h	/^  boolean  hwSPI;$/;"	m	class:Adafruit_ST7735
iDNSServer	Ethernet/src/Dns.h	/^    IPAddress iDNSServer;$/;"	m	class:DNSClient
iInterface	arduino/USBCore.h	/^	u8 iInterface;$/;"	m	struct:__anon17
iInterface	arduino/USBCore.h	/^	u8 iInterface;$/;"	m	struct:__anon19
iManufacturer	arduino/USBCore.h	/^	u8	iManufacturer;$/;"	m	struct:__anon15
iProduct	arduino/USBCore.h	/^	u8	iProduct;$/;"	m	struct:__anon15
iRequestId	Ethernet/src/Dns.h	/^    uint16_t iRequestId;$/;"	m	class:DNSClient
iSerialNumber	arduino/USBCore.h	/^	u8	iSerialNumber;$/;"	m	struct:__anon15
iUdp	Ethernet/src/Dns.h	/^    EthernetUDP iUdp;$/;"	m	class:DNSClient
iad	arduino/USBCore.h	/^	IADDescriptor				iad;	\/\/ Only needed on compound device$/;"	m	struct:__anon24
iconfig	arduino/USBCore.h	/^	u8	iconfig;$/;"	m	struct:__anon16
idProduct	arduino/USBCore.h	/^	u16	idProduct;$/;"	m	struct:__anon15
idSMS	GSM/src/GSM3ShieldV1SMSProvider.h	/^		int idSMS; \/\/ Id from current SMS being read.$/;"	m	class:GSM3ShieldV1SMSProvider
idSocket	GSM/src/GSM3ShieldV1ClientProvider.h	/^		int idSocket;				\/\/ Remote ID socket.$/;"	m	class:GSM3ShieldV1ClientProvider
idSocket	GSM/src/GSM3ShieldV1MultiClientProvider.h	/^		int idSocket; 		\/\/ Remote ID socket$/;"	m	class:GSM3ShieldV1MultiClientProvider
idVendor	arduino/USBCore.h	/^	u16	idVendor;$/;"	m	struct:__anon15
idle	HID/src/HID.h	/^  uint8_t idle;$/;"	m	class:HID_
igmpsend	Ethernet/src/utility/socket.cpp	/^uint16_t igmpsend(SOCKET s, const uint8_t * buf, uint16_t len)$/;"	f
image	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::image(PImage & img, uint16_t x, uint16_t y) {$/;"	f	class:Adafruit_GFX
image	TFT/src/utility/Adafruit_GFX.h	/^void Adafruit_GFX::image(PImage & img, uint16_t x, uint16_t y) {$/;"	f	class:Adafruit_GFX
in	HID/src/HID.h	/^  EndpointDescriptor  in;$/;"	m	struct:__anon9
in	arduino/USBCore.h	/^	EndpointDescriptor			in;$/;"	m	struct:__anon24
in	arduino/USBCore.h	/^	EndpointDescriptor			in;$/;"	m	struct:__anon25
inBlock_	SD/src/utility/Sd2Card.h	/^  uint8_t inBlock_;$/;"	m	class:Sd2Card
inTransactionFlag	SPI/src/SPI.cpp	/^uint8_t SPIClass::inTransactionFlag = 0;$/;"	m	class:SPIClass	file:
inTransactionFlag	SPI/src/SPI.h	/^  static uint8_t inTransactionFlag;$/;"	m	class:SPIClass
index	EEPROM/src/EEPROM.h	/^    int index; \/\/Index of current EEPROM cell.$/;"	m	struct:EEPtr
index	EEPROM/src/EEPROM.h	/^    int index; \/\/Index of current EEPROM cell.$/;"	m	struct:EERef
index	arduino/Stream.h	/^    size_t index;     \/\/ index used by the search routine.$/;"	m	struct:Stream::MultiTarget
indexOf	arduino/WString.cpp	/^int String::indexOf( char ch, unsigned int fromIndex ) const$/;"	f	class:String
indexOf	arduino/WString.cpp	/^int String::indexOf(char c) const$/;"	f	class:String
indexOf	arduino/WString.cpp	/^int String::indexOf(const String &s2) const$/;"	f	class:String
indexOf	arduino/WString.cpp	/^int String::indexOf(const String &s2, unsigned int fromIndex) const$/;"	f	class:String
inet_aton	Ethernet/src/Dns.cpp	/^int DNSClient::inet_aton(const char* address, IPAddress& result)$/;"	f	class:DNSClient
inet_aton	GSM/src/GSM3ShieldV1DataNetworkProvider.cpp	/^int GSM3ShieldV1DataNetworkProvider::inet_aton(const char* aIPAddrString, IPAddress& aResult)$/;"	f	class:GSM3ShieldV1DataNetworkProvider
init	Ethernet/src/utility/w5100.cpp	/^void W5100Class::init(void)$/;"	f	class:W5100Class
init	LiquidCrystal/src/LiquidCrystal.cpp	/^void LiquidCrystal::init(uint8_t fourbitmode, uint8_t rs, uint8_t rw, uint8_t enable,$/;"	f	class:LiquidCrystal
init	Robot_Control/src/Fat16.cpp	/^uint8_t Fat16::init(SdCard* dev, uint8_t part) {$/;"	f	class:Fat16
init	Robot_Control/src/Fat16.h	/^  static uint8_t init(SdCard& dev) {return init(&dev);}  \/\/ NOLINT$/;"	f	class:Fat16
init	Robot_Control/src/Fat16.h	/^  static uint8_t init(SdCard& dev, uint8_t part) {  \/\/ NOLINT$/;"	f	class:Fat16
init	Robot_Control/src/Fat16.h	/^  static uint8_t init(SdCard* dev) {$/;"	f	class:Fat16
init	Robot_Control/src/SdCard.cpp	/^uint8_t SdCard::init(uint8_t speed, uint8_t chipSelectPin) {$/;"	f	class:SdCard
init	Robot_Control/src/SdCard.h	/^  uint8_t init(uint8_t speed) {$/;"	f	class:SdCard
init	Robot_Control/src/SdCard.h	/^  uint8_t init(void) {$/;"	f	class:SdCard
init	SD/src/utility/Sd2Card.cpp	/^uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {$/;"	f	class:Sd2Card
init	SD/src/utility/Sd2Card.h	/^  uint8_t init(uint8_t sckRateID) {$/;"	f	class:Sd2Card
init	SD/src/utility/Sd2Card.h	/^  uint8_t init(void) {$/;"	f	class:Sd2Card
init	SD/src/utility/SdFat.h	/^  uint8_t init(Sd2Card& dev) {return init(&dev);}  \/\/ NOLINT$/;"	f	class:SdVolume
init	SD/src/utility/SdFat.h	/^  uint8_t init(Sd2Card& dev, uint8_t part) {  \/\/ NOLINT$/;"	f	class:SdVolume
init	SD/src/utility/SdFat.h	/^  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}$/;"	f	class:SdVolume
init	SD/src/utility/SdVolume.cpp	/^uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {$/;"	f	class:SdVolume
init	arduino/WString.cpp	/^inline void String::init(void)$/;"	f	class:String
init	arduino/wiring.c	/^void init()$/;"	f
initB	Robot_Control/src/Arduino_LCD.cpp	/^void Arduino_LCD::initB(void) {$/;"	f	class:Arduino_LCD
initB	TFT/src/utility/Adafruit_ST7735.cpp	/^void Adafruit_ST7735::initB(void) {$/;"	f	class:Adafruit_ST7735
initG	TFT/src/utility/Adafruit_ST7735.cpp	/^void Adafruit_ST7735::initG(void) {$/;"	f	class:Adafruit_ST7735
initISR	Servo/src/avr/Servo.cpp	/^static void initISR(timer16_Sequence_t timer)$/;"	f	file:
initISR	Servo/src/sam/Servo.cpp	/^static void initISR(timer16_Sequence_t timer)$/;"	f	file:
initISR	Servo/src/samd/Servo.cpp	/^static void initISR(timer16_Sequence_t timer)$/;"	f	file:
initR	Robot_Control/src/Arduino_LCD.cpp	/^void Arduino_LCD::initR(uint8_t options) {$/;"	f	class:Arduino_LCD
initR	TFT/src/utility/Adafruit_ST7735.cpp	/^void Adafruit_ST7735::initR(uint8_t options) {$/;"	f	class:Adafruit_ST7735
initSS	Ethernet/src/utility/w5100.h	/^	inline static void initSS() { pinMode(10, OUTPUT); };$/;"	f	class:W5100Class
initSS	Ethernet/src/utility/w5100.h	/^      inline static void initSS()    { DDRB  |=  _BV(0); };$/;"	f	class:W5100Class
initSS	Ethernet/src/utility/w5100.h	/^      inline static void initSS()    { DDRB  |=  _BV(2); };$/;"	f	class:W5100Class
initSS	Ethernet/src/utility/w5100.h	/^      inline static void initSS()    { DDRB  |=  _BV(4); };$/;"	f	class:W5100Class
initSS	Ethernet/src/utility/w5100.h	/^      inline static void initSS()    { DDRB  |=  _BV(6); };$/;"	f	class:W5100Class
initSS	Ethernet/src/utility/w5100.h	/^    inline static void initSS() {$/;"	f	class:W5100Class
initVariant	arduino/main.cpp	/^void initVariant() { }$/;"	f
init_AlwaysInline	SPI/src/SPI.h	/^  void init_AlwaysInline(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)$/;"	f	class:SPISettings
init_MightInline	SPI/src/SPI.h	/^  void init_MightInline(uint32_t clock, uint8_t bitOrder, uint8_t dataMode) {$/;"	f	class:SPISettings
initialize	GSM/src/GSM3MobileVoiceProvider.h	/^		virtual void initialize(){};$/;"	f	class:GSM3MobileVoiceProvider
initialize	GSM/src/GSM3ShieldV1VoiceProvider.cpp	/^ void GSM3ShieldV1VoiceProvider::initialize()$/;"	f	class:GSM3ShieldV1VoiceProvider
initialized	SPI/src/SPI.cpp	/^uint8_t SPIClass::initialized = 0;$/;"	m	class:SPIClass	file:
initialized	SPI/src/SPI.h	/^  static uint8_t initialized;$/;"	m	class:SPIClass
input	Robot_Control/src/utility/RobotTextManager.cpp	/^void TextManager::input(int lin,int col, int code){$/;"	f	class:TextManager
inputCol	Robot_Control/src/utility/RobotTextManager.h	/^    int inputCol;$/;"	m	class:TextManager
inputLin	Robot_Control/src/utility/RobotTextManager.h	/^    int inputLin;$/;"	m	class:TextManager
inputPool	Robot_Control/src/utility/RobotTextManager.h	/^    char inputPool[18];$/;"	m	class:TextManager
inputPos	Robot_Control/src/utility/RobotTextManager.h	/^    int inputPos;$/;"	m	class:TextManager
int	SoftwareSerial/src/SoftwareSerial.h	115;"	d
intFunc	arduino/WInterrupts.c	/^static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS] = {$/;"	v	file:
interfaceClass	arduino/USBCore.h	/^	u8 interfaceClass;$/;"	m	struct:__anon17
interfaceCount	arduino/USBCore.h	/^	u8 interfaceCount;$/;"	m	struct:__anon19
interfaceSubClass	arduino/USBCore.h	/^	u8 interfaceSubClass;$/;"	m	struct:__anon17
intergrationTime	Robot_Motor/src/LineFollow.h	/^		uint8_t intergrationTime;$/;"	m	class:LineFollow
interruptMask	SPI/src/SPI.cpp	/^uint8_t SPIClass::interruptMask = 0;$/;"	m	class:SPIClass	file:
interruptMask	SPI/src/SPI.h	/^  static uint8_t interruptMask; \/\/ which interrupts to mask$/;"	m	class:SPIClass
interruptMode	SPI/src/SPI.cpp	/^uint8_t SPIClass::interruptMode = 0;$/;"	m	class:SPIClass	file:
interruptMode	SPI/src/SPI.h	/^  static uint8_t interruptMode; \/\/ 0=none, 1=mask, 2=global$/;"	m	class:SPIClass
interruptSave	SPI/src/SPI.cpp	/^uint8_t SPIClass::interruptSave = 0;$/;"	m	class:SPIClass	file:
interruptSave	SPI/src/SPI.h	/^  static uint8_t interruptSave; \/\/ temp storage, to restore state$/;"	m	class:SPIClass
interrupts	arduino/Arduino.h	101;"	d
interval	arduino/USBCore.h	/^	u8 interval;$/;"	m	struct:__anon18
invalidate	arduino/WString.cpp	/^void String::invalidate(void)$/;"	f	class:String
invertDisplay	Robot_Control/src/Arduino_LCD.cpp	/^void Arduino_LCD::invertDisplay(boolean i) {$/;"	f	class:Arduino_LCD
invertDisplay	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::invertDisplay(boolean i) {$/;"	f	class:Adafruit_GFX
invertDisplay	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::invertDisplay(boolean i) $/;"	f	class:Adafruit_GFX
invertDisplay	TFT/src/utility/Adafruit_ST7735.cpp	/^void Adafruit_ST7735::invertDisplay(boolean i) {$/;"	f	class:Adafruit_ST7735
ip	Firmata/utility/EthernetClientStream.h	/^    IPAddress ip;$/;"	m	class:EthernetClientStream
irparams	Robot_IR_Remote/src/IRremote.cpp	/^volatile irparams_t irparams;$/;"	v
irparams_t	Robot_IR_Remote/src/IRremoteInt.h	/^irparams_t;$/;"	t	typeref:struct:__anon2
isAccessAlive	GSM/src/GSM3ShieldV1AccessProvider.cpp	/^int GSM3ShieldV1AccessProvider::isAccessAlive()$/;"	f	class:GSM3ShieldV1AccessProvider
isActionDone	Robot_Control/src/communication.cpp	/^bool RobotControl::isActionDone(){$/;"	f	class:RobotControl
isActive	Servo/src/Servo.h	/^  uint8_t isActive   :1 ;             \/\/ true if this channel is enabled, pin not pulsed if false $/;"	m	struct:__anon33
isAlpha	arduino/WCharacter.h	/^inline boolean isAlpha(int c)$/;"	f
isAlphaNumeric	arduino/WCharacter.h	/^inline boolean isAlphaNumeric(int c) $/;"	f
isAscii	arduino/WCharacter.h	/^inline boolean isAscii(int c)$/;"	f
isControl	arduino/WCharacter.h	/^inline boolean isControl(int c)$/;"	f
isDigit	arduino/WCharacter.h	/^inline boolean isDigit(int c)$/;"	f
isDir	SD/src/utility/SdFat.h	/^  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}$/;"	f	class:SdFile
isDirectory	SD/src/File.cpp	/^boolean File::isDirectory(void) {$/;"	f	class:File
isEOC	Robot_Control/src/Fat16.h	/^  static uint8_t isEOC(fat_t cluster) {return cluster >= 0XFFF8;}$/;"	f	class:Fat16
isEOC	SD/src/utility/SdFat.h	/^  uint8_t isEOC(uint32_t cluster) const {$/;"	f	class:SdVolume
isFile	SD/src/utility/SdFat.h	/^  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}$/;"	f	class:SdFile
isGraph	arduino/WCharacter.h	/^inline boolean isGraph(int c)$/;"	f
isHexadecimalDigit	arduino/WCharacter.h	/^inline boolean isHexadecimalDigit(int c)$/;"	f
isListening	SoftwareSerial/src/SoftwareSerial.h	/^  bool isListening() { return this == active_object; }$/;"	f	class:SoftwareSerial
isLowerCase	arduino/WCharacter.h	/^inline boolean isLowerCase(int c)$/;"	f
isModemAlive	GSM/src/GSM3MobileMockupProvider.h	/^		inline int isModemAlive(){return 0;};$/;"	f	class:GSM3MobileMockupProvider
isModemAliveContinue	GSM/src/GSM3ShieldV1AccessProvider.cpp	/^void GSM3ShieldV1AccessProvider::isModemAliveContinue()$/;"	f	class:GSM3ShieldV1AccessProvider
isOpen	Robot_Control/src/Fat16.h	/^  uint8_t isOpen(void) const {return (flags_ & O_ACCMODE) != 0;}$/;"	f	class:Fat16
isOpen	SD/src/utility/SdFat.h	/^  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}$/;"	f	class:SdFile
isPIN	GSM/src/GSM3ShieldV1PinManagement.cpp	/^int GSM3ShieldV1PinManagement::isPIN()$/;"	f	class:GSM3ShieldV1PinManagement
isParsingMessage	Firmata/Firmata.cpp	/^boolean FirmataClass::isParsingMessage(void)$/;"	f	class:FirmataClass
isPaused	Robot_Motor/src/ArduinoRobotMotorBoard.h	/^		uint8_t isPaused;$/;"	m	class:RobotMotorBoard
isPrintable	arduino/WCharacter.h	/^inline boolean isPrintable(int c)$/;"	f
isPunct	arduino/WCharacter.h	/^inline boolean isPunct(int c)$/;"	f
isRoot	SD/src/utility/SdFat.h	/^  uint8_t isRoot(void) const {$/;"	f	class:SdFile
isSpace	arduino/WCharacter.h	/^inline boolean isSpace(int c)$/;"	f
isSubDir	SD/src/utility/SdFat.h	/^  uint8_t isSubDir(void) const {return type_ == FAT_FILE_TYPE_SUBDIR;}$/;"	f	class:SdFile
isTimerActive	Servo/src/avr/Servo.cpp	/^static boolean isTimerActive(timer16_Sequence_t timer)$/;"	f	file:
isTimerActive	Servo/src/sam/Servo.cpp	/^static boolean isTimerActive(timer16_Sequence_t timer)$/;"	f	file:
isTimerActive	Servo/src/samd/Servo.cpp	/^static boolean isTimerActive(timer16_Sequence_t timer)$/;"	f	file:
isUpperCase	arduino/WCharacter.h	/^inline boolean isUpperCase(int c)$/;"	f
isValid	TFT/src/utility/PImage.h	/^  bool isValid() { return _valid; }$/;"	f	class:PImage
isWhitespace	arduino/WCharacter.h	/^inline boolean isWhitespace(int c)$/;"	f
ix_nextorder	Robot_Control/src/Squawk.cpp	/^static uint8_t  ix_nextorder;$/;"	v	file:
ix_nextrow	Robot_Control/src/Squawk.cpp	/^static uint8_t  ix_nextrow;$/;"	v	file:
ix_order	Robot_Control/src/Squawk.cpp	/^static uint8_t  ix_order;$/;"	v	file:
ix_row	Robot_Control/src/Squawk.cpp	/^static uint8_t  ix_row;$/;"	v	file:
ixp	Robot_Control/src/Squawk.cpp	/^  uint8_t fxc, fxp, ixp;$/;"	m	struct:__anon5	file:
jmpToBootCode	Robot_Control/src/FatStructs.h	/^  uint8_t  jmpToBootCode[3];$/;"	m	struct:fat32BootSector
jmpToBootCode	SD/src/utility/FatStructs.h	/^  uint8_t  jmpToBootCode[3];$/;"	m	struct:fat32BootSector
keepThisChar	GSM/src/GSM3SoftSerial.cpp	/^bool GSM3SoftSerial::keepThisChar(uint8_t* c)$/;"	f	class:GSM3SoftSerial
keyboardCalibrate	Robot_Control/src/keyboard.cpp	/^void RobotControl::keyboardCalibrate(int *vals){$/;"	f	class:RobotControl
keyboardRead	Robot_Control/src/keyboard.cpp	/^int8_t RobotControl::keyboardRead(void)$/;"	f	class:RobotControl
knobRead	Robot_Control/src/Sensors.cpp	/^int RobotControl::knobRead(){$/;"	f	class:RobotControl
lastAccessDate	Robot_Control/src/FatStructs.h	/^  uint16_t lastAccessDate;$/;"	m	struct:directoryEntry
lastAccessDate	SD/src/utility/FatStructs.h	/^  uint16_t lastAccessDate;$/;"	m	struct:directoryEntry
lastEp	arduino/PluggableUSB.h	/^  uint8_t lastEp;$/;"	m	class:PluggableUSB_
lastIf	arduino/PluggableUSB.h	/^  uint8_t lastIf;$/;"	m	class:PluggableUSB_
lastIndexOf	arduino/WString.cpp	/^int String::lastIndexOf( char theChar ) const$/;"	f	class:String
lastIndexOf	arduino/WString.cpp	/^int String::lastIndexOf(char ch, unsigned int fromIndex) const$/;"	f	class:String
lastIndexOf	arduino/WString.cpp	/^int String::lastIndexOf(const String &s2) const$/;"	f	class:String
lastIndexOf	arduino/WString.cpp	/^int String::lastIndexOf(const String &s2, unsigned int fromIndex) const$/;"	f	class:String
lastWriteDate	Robot_Control/src/FatStructs.h	/^  uint16_t lastWriteDate;$/;"	m	struct:directoryEntry
lastWriteDate	SD/src/utility/FatStructs.h	/^  uint16_t lastWriteDate;$/;"	m	struct:directoryEntry
lastWriteTime	Robot_Control/src/FatStructs.h	/^  uint16_t lastWriteTime;$/;"	m	struct:directoryEntry
lastWriteTime	SD/src/utility/FatStructs.h	/^  uint16_t lastWriteTime;$/;"	m	struct:directoryEntry
last_error	Robot_Motor/src/LineFollow.h	/^		int lectura_sensor[5], last_error, acu;$/;"	m	class:LineFollow
last_step_time	Stepper/src/Stepper.h	/^    unsigned long last_step_time; \/\/ time stamp in us of when the last step was taken$/;"	m	class:Stepper
lectura_sensor	Robot_Motor/src/LineFollow.h	/^		int lectura_sensor[5], last_error, acu;$/;"	m	class:LineFollow
leftToRight	LiquidCrystal/src/LiquidCrystal.cpp	/^void LiquidCrystal::leftToRight(void) {$/;"	f	class:LiquidCrystal
len	HID/src/HID.h	/^  uint8_t len;      \/\/ 9$/;"	m	struct:__anon8
len	arduino/Stream.h	/^    size_t len;       \/\/ length of string you're searching for$/;"	m	struct:Stream::MultiTarget
len	arduino/USBCore.h	/^	u8	len;			\/\/ 9$/;"	m	struct:__anon16
len	arduino/USBCore.h	/^	u8 len;				\/\/ 18$/;"	m	struct:__anon15
len	arduino/USBCore.h	/^	u8 len;				\/\/ 8$/;"	m	struct:__anon19
len	arduino/USBCore.h	/^	u8 len;		\/\/ 4$/;"	m	struct:__anon21
len	arduino/USBCore.h	/^	u8 len;		\/\/ 5$/;"	m	struct:__anon20
len	arduino/USBCore.h	/^	u8 len;		\/\/ 7$/;"	m	struct:__anon18
len	arduino/USBCore.h	/^	u8 len;		\/\/ 9$/;"	m	struct:__anon17
len	arduino/USBCore.h	/^    u8	len;$/;"	m	struct:__anon22
len	arduino/USBCore.h	/^    u8	len;$/;"	m	struct:__anon23
len	arduino/WString.h	/^	unsigned int len;       \/\/ the String length (not counting the '\\0')$/;"	m	class:String
length	EEPROM/src/EEPROM.h	/^    uint16_t length()                    { return E2END + 1; }$/;"	f	struct:EEPROMClass
length	HID/src/HID.h	/^  const uint16_t length;$/;"	m	class:HIDSubDescriptor
length	Robot_Control/src/Multiplexer.h	/^		uint8_t length;$/;"	m	class:Multiplexer
length	Robot_Motor/src/Multiplexer.h	/^		uint8_t length;$/;"	m	class:Multiplexer
length	arduino/WString.h	/^	inline unsigned int length(void) const {return len;}$/;"	f	class:String
line	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::line(int16_t x1, int16_t y1, int16_t x2, int16_t y2) {$/;"	f	class:Adafruit_GFX
line	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::line(int16_t x1, int16_t y1, int16_t x2, int16_t y2) $/;"	f	class:Adafruit_GFX
lineFollowConfig	Robot_Control/src/communication.cpp	/^void RobotControl::lineFollowConfig(uint8_t KP, uint8_t KD, uint8_t robotSpeed, uint8_t intergrationTime){$/;"	f	class:RobotControl
lineHeight	Robot_Control/src/utility/RobotTextManager.cpp	/^const int TextManager::lineHeight=10;$/;"	m	class:TextManager	file:
lineHeight	Robot_Control/src/utility/RobotTextManager.h	/^    static const int lineHeight;\/\/8+2=10$/;"	m	class:TextManager
lineState	arduino/CDC.cpp	/^	u8	lineState;$/;"	m	struct:__anon13	file:
lineStatus	GSM/src/GSM3MobileMockupProvider.h	/^		GSM3_modemlinest_e lineStatus;$/;"	m	class:GSM3MobileMockupProvider
listen	Ethernet/src/utility/socket.cpp	/^uint8_t listen(SOCKET s)$/;"	f
listen	SoftwareSerial/src/SoftwareSerial.cpp	/^bool SoftwareSerial::listen()$/;"	f	class:SoftwareSerial
loadImage	TFT/src/utility/Adafruit_GFX.h	/^  PImage loadImage(const char * fileName) { return PImage::loadImage(fileName); }$/;"	f	class:Adafruit_GFX
loadImage	TFT/src/utility/Adafruit_GFX.h	/^PImage PImage::loadImage(const char * fileName) {$/;"	f	class:PImage
local1Remote0	GSM/src/GSM3MobileServerService.h	/^		bool local1Remote0;$/;"	m	class:GSM3MobileServerService
localIP	Ethernet/src/Ethernet.cpp	/^IPAddress EthernetClass::localIP()$/;"	f	class:EthernetClass
local_IP	GSM/src/GSM3ShieldV1.h	/^		char* local_IP;				\/\/Local IP.$/;"	m	class:GSM3ShieldV1
local_IP_Length	GSM/src/GSM3ShieldV1.h	/^		int local_IP_Length;		\/\/Local IP length.$/;"	m	class:GSM3ShieldV1
local_Port	GSM/src/GSM3ShieldV1.h	/^		int local_Port;				\/\/Local Port.$/;"	m	class:GSM3ShieldV1
local_ip	Firmata/examples/StandardFirmataEthernet/ethernetConfig.h	63;"	d
local_port	Ethernet/src/utility/socket.cpp	/^static uint16_t local_port;$/;"	v	file:
localip	Firmata/utility/EthernetClientStream.h	/^    IPAddress localip;$/;"	m	class:EthernetClientStream
locate	GSM/src/GSM3CircularBuffer.cpp	/^bool GSM3CircularBuffer::locate(const char* reference)$/;"	f	class:GSM3CircularBuffer
locate	GSM/src/GSM3CircularBuffer.cpp	/^bool GSM3CircularBuffer::locate(const char* reference, byte thishead, byte thistail, byte* from, byte* to)$/;"	f	class:GSM3CircularBuffer
locationArea	GSM/src/GSM3ShieldV1CellManagement.h	/^		char *locationArea;$/;"	m	class:GSM3ShieldV1CellManagement
long	SoftwareSerial/src/SoftwareSerial.h	117;"	d
lowByte	arduino/Arduino.h	108;"	d
ls	Robot_Control/src/Fat16.cpp	/^void Fat16::ls(uint8_t flags) {$/;"	f	class:Fat16
ls	SD/src/utility/SdFile.cpp	/^void SdFile::ls(uint8_t flags, uint8_t indent) {$/;"	f	class:SdFile
mac	Firmata/examples/StandardFirmataEthernet/ethernetConfig.h	/^const byte mac[] = {0x90, 0xA2, 0xDA, 0x00, 0x53, 0xE5};$/;"	v
main	arduino/main.cpp	/^int main(void)$/;"	f
maintain	Ethernet/src/Ethernet.cpp	/^int EthernetClass::maintain(){$/;"	f	class:EthernetClass
maintain	Firmata/utility/EthernetClientStream.h	/^EthernetClientStream::maintain()$/;"	f	class:EthernetClientStream
maintain	Firmata/utility/EthernetClientStream.h	/^EthernetClientStream::maintain(IPAddress localip)$/;"	f	class:EthernetClientStream
maintain	Firmata/utility/WiFiClientStream.h	/^  virtual inline bool maintain()$/;"	f	class:WiFiClientStream
maintain	Firmata/utility/WiFiServerStream.h	/^  virtual inline bool maintain()$/;"	f	class:WiFiServerStream
make83Name	Robot_Control/src/Fat16.cpp	/^static uint8_t make83Name(const char* str, uint8_t* name) {$/;"	f	file:
make83Name	SD/src/utility/SdFile.cpp	/^uint8_t SdFile::make83Name(const char* str, uint8_t* name) {$/;"	f	class:SdFile
makeDir	SD/src/utility/SdFat.h	/^  uint8_t makeDir(SdFile& dir, const char* dirName) {  \/\/ NOLINT$/;"	f	class:SdFile
makeDir	SD/src/utility/SdFile.cpp	/^uint8_t SdFile::makeDir(SdFile* dir, const char* dirName) {$/;"	f	class:SdFile
makeWord	arduino/WMath.cpp	/^unsigned int makeWord(unsigned char h, unsigned char l) { return (h << 8) | l; }$/;"	f
makeWord	arduino/WMath.cpp	/^unsigned int makeWord(unsigned int w) { return w; }$/;"	f
manageMsg	GSM/src/GSM3ShieldV1ModemCore.cpp	/^void GSM3ShieldV1ModemCore::manageMsg(byte from, byte to)$/;"	f	class:GSM3ShieldV1ModemCore
manageMsg	GSM/src/GSM3SoftSerial.cpp	/^void GSM3SoftSerialMgr::manageMsg(byte from, byte to){};$/;"	f	class:GSM3SoftSerialMgr
manageMsgNow	GSM/src/GSM3ShieldV1ModemCore.cpp	/^void GSM3ShieldV1ModemCore::manageMsgNow(byte from, byte to)$/;"	f	class:GSM3ShieldV1ModemCore
manageReceivedData	GSM/src/GSM3ShieldV1ModemCore.cpp	/^void GSM3ShieldV1ModemCore::manageReceivedData()$/;"	f	class:GSM3ShieldV1ModemCore
manageResponse	GSM/src/GSM3ShieldV1.cpp	/^void GSM3ShieldV1::manageResponse(byte from, byte to)$/;"	f	class:GSM3ShieldV1
manageResponse	GSM/src/GSM3ShieldV1AccessProvider.cpp	/^void GSM3ShieldV1AccessProvider::manageResponse(byte from, byte to)$/;"	f	class:GSM3ShieldV1AccessProvider
manageResponse	GSM/src/GSM3ShieldV1CellManagement.cpp	/^void GSM3ShieldV1CellManagement::manageResponse(byte from, byte to)$/;"	f	class:GSM3ShieldV1CellManagement
manageResponse	GSM/src/GSM3ShieldV1ClientProvider.cpp	/^void GSM3ShieldV1ClientProvider::manageResponse(byte from, byte to)$/;"	f	class:GSM3ShieldV1ClientProvider
manageResponse	GSM/src/GSM3ShieldV1DataNetworkProvider.cpp	/^void GSM3ShieldV1DataNetworkProvider::manageResponse(byte from, byte to)$/;"	f	class:GSM3ShieldV1DataNetworkProvider
manageResponse	GSM/src/GSM3ShieldV1DirectModemProvider.h	/^			void manageResponse(byte from, byte to){};$/;"	f	class:GSM3ShieldV1DirectModemProvider
manageResponse	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^void GSM3ShieldV1MultiClientProvider::manageResponse(byte from, byte to)$/;"	f	class:GSM3ShieldV1MultiClientProvider
manageResponse	GSM/src/GSM3ShieldV1MultiServerProvider.cpp	/^void GSM3ShieldV1MultiServerProvider::manageResponse(byte from, byte to)$/;"	f	class:GSM3ShieldV1MultiServerProvider
manageResponse	GSM/src/GSM3ShieldV1SMSProvider.cpp	/^void GSM3ShieldV1SMSProvider::manageResponse(byte from, byte to)$/;"	f	class:GSM3ShieldV1SMSProvider
manageResponse	GSM/src/GSM3ShieldV1ServerProvider.cpp	/^void GSM3ShieldV1ServerProvider::manageResponse(byte from, byte to)$/;"	f	class:GSM3ShieldV1ServerProvider
manageResponse	GSM/src/GSM3ShieldV1VoiceProvider.cpp	/^void GSM3ShieldV1VoiceProvider::manageResponse(byte from, byte to)$/;"	f	class:GSM3ShieldV1VoiceProvider
map	arduino/WMath.cpp	/^long map(long x, long in_min, long in_max, long out_min, long out_max)$/;"	f
margin_left	Robot_Control/src/utility/RobotTextManager.h	/^    int margin_left,margin_top;$/;"	m	class:TextManager
margin_top	Robot_Control/src/utility/RobotTextManager.h	/^    int margin_left,margin_top;$/;"	m	class:TextManager
masterBootRecord	Robot_Control/src/FatStructs.h	/^struct masterBootRecord {$/;"	s
masterBootRecord	SD/src/utility/FatStructs.h	/^struct masterBootRecord {$/;"	s
max	Servo/src/Servo.h	/^   int8_t max;                       \/\/ maximum is this value times 4 added to MAX_PULSE_WIDTH   $/;"	m	class:Servo
max	arduino/Arduino.h	93;"	d
maxPower	arduino/USBCore.h	/^	u8	maxPower;$/;"	m	struct:__anon16
maxSocket	GSM/src/GSM3MobileMockupProvider.h	/^		inline int maxSocket(){return 8;};$/;"	f	class:GSM3MobileMockupProvider
maxSocket	GSM/src/GSM3ShieldV1ClientProvider.h	/^		int maxSocket(){return 0;};$/;"	f	class:GSM3ShieldV1ClientProvider
maxSocket	GSM/src/GSM3ShieldV1MultiClientProvider.h	/^		int maxSocket(){return 5;};$/;"	f	class:GSM3ShieldV1MultiClientProvider
maxSocketAsServer	GSM/src/GSM3MobileNetworkProvider.h	/^		virtual inline int maxSocketAsServer(){return 0;};$/;"	f	class:GSM3MobileNetworkProvider
maxSocketAsServer	GSM/src/GSM3ShieldV1MultiServerProvider.h	/^		int maxSocketAsServer(){return 4;};$/;"	f	class:GSM3ShieldV1MultiServerProvider
maxSocketAsServer	GSM/src/GSM3ShieldV1ServerProvider.h	/^		int maxSocketAsServer(){return 0;};$/;"	f	class:GSM3ShieldV1ServerProvider
mbr	Robot_Control/src/Fat16.h	/^  mbr_t   mbr;$/;"	m	union:cache16_t
mbr	SD/src/utility/SdFat.h	/^  mbr_t    mbr;$/;"	m	union:cache_t
mbrSig0	Robot_Control/src/FatStructs.h	/^  uint8_t  mbrSig0;$/;"	m	struct:masterBootRecord
mbrSig0	SD/src/utility/FatStructs.h	/^  uint8_t  mbrSig0;$/;"	m	struct:masterBootRecord
mbrSig1	Robot_Control/src/FatStructs.h	/^  uint8_t  mbrSig1;$/;"	m	struct:masterBootRecord
mbrSig1	SD/src/utility/FatStructs.h	/^  uint8_t  mbrSig1;$/;"	m	struct:masterBootRecord
mbr_t	Robot_Control/src/FatStructs.h	/^typedef struct masterBootRecord mbr_t;$/;"	t	typeref:struct:masterBootRecord
mbr_t	SD/src/utility/FatStructs.h	/^typedef struct masterBootRecord mbr_t;$/;"	t	typeref:struct:masterBootRecord
mdt_month	Robot_Control/src/SdInfo.h	/^  unsigned mdt_month : 4;$/;"	m	struct:CID
mdt_month	SD/src/utility/SdInfo.h	/^  unsigned mdt_month : 4;$/;"	m	struct:CID
mdt_year_high	Robot_Control/src/SdInfo.h	/^  unsigned mdt_year_high : 4;  \/\/ Manufacturing date$/;"	m	struct:CID
mdt_year_high	SD/src/utility/SdInfo.h	/^  unsigned mdt_year_high : 4;  \/\/ Manufacturing date$/;"	m	struct:CID
mdt_year_low	Robot_Control/src/SdInfo.h	/^  unsigned mdt_year_low :4;$/;"	m	struct:CID
mdt_year_low	SD/src/utility/SdInfo.h	/^  unsigned mdt_year_low :4;$/;"	m	struct:CID
mediaType	Robot_Control/src/FatStructs.h	/^  uint8_t  mediaType;$/;"	m	struct:biosParmBlock
mediaType	SD/src/utility/FatStructs.h	/^  uint8_t  mediaType;$/;"	m	struct:biosParmBlock
melody	Robot_Control/src/ArduinoRobot.h	/^		Fat16 melody;$/;"	m	class:RobotControl
messageIn	Robot_Control/src/ArduinoRobot.h	/^		EasyTransfer2 messageIn;$/;"	m	class:RobotControl
messageIn	Robot_Motor/src/ArduinoRobotMotorBoard.h	/^		EasyTransfer2 messageIn;$/;"	m	class:RobotMotorBoard
messageOut	Robot_Control/src/ArduinoRobot.h	/^		EasyTransfer2 messageOut;$/;"	m	class:RobotControl
messageOut	Robot_Motor/src/ArduinoRobotMotorBoard.h	/^		EasyTransfer2 messageOut;$/;"	m	class:RobotMotorBoard
mgr	GSM/src/GSM3SoftSerial.h	/^		GSM3SoftSerialMgr* mgr;$/;"	m	class:GSM3SoftSerial
micros	arduino/wiring.c	/^unsigned long micros() {$/;"	f
microsecondsToClockCycles	arduino/Arduino.h	106;"	d
mid	Robot_Control/src/SdInfo.h	/^  uint8_t mid;  \/\/ Manufacturer ID$/;"	m	struct:CID
mid	SD/src/utility/SdInfo.h	/^  uint8_t mid;  \/\/ Manufacturer ID$/;"	m	struct:CID
millis	arduino/wiring.c	/^unsigned long millis()$/;"	f
milliseconds	GSM/src/GSM3ShieldV1ModemCore.h	/^		unsigned long milliseconds;$/;"	m	class:GSM3ShieldV1ModemCore
min	Servo/src/Servo.h	/^   int8_t min;                       \/\/ minimum is this value times 4 added to MIN_PULSE_WIDTH    $/;"	m	class:Servo
min	arduino/Arduino.h	92;"	d
minSocket	GSM/src/GSM3MobileMockupProvider.h	/^		inline int minSocket(){return 1;};$/;"	f	class:GSM3MobileMockupProvider
minSocket	GSM/src/GSM3ShieldV1ClientProvider.h	/^		int minSocket(){return 0;};$/;"	f	class:GSM3ShieldV1ClientProvider
minSocket	GSM/src/GSM3ShieldV1MultiClientProvider.h	/^		int minSocket(){return 0;};$/;"	f	class:GSM3ShieldV1MultiClientProvider
minSocketAsServer	GSM/src/GSM3MobileNetworkProvider.h	/^		virtual inline int minSocketAsServer(){return 0;};$/;"	f	class:GSM3MobileNetworkProvider
minSocketAsServer	GSM/src/GSM3ShieldV1MultiServerProvider.h	/^		int minSocketAsServer(){return 0;};$/;"	f	class:GSM3ShieldV1MultiServerProvider
minSocketAsServer	GSM/src/GSM3ShieldV1ServerProvider.h	/^		int minSocketAsServer(){return 0;};$/;"	f	class:GSM3ShieldV1ServerProvider
mkdir	SD/src/SD.cpp	/^boolean SDClass::mkdir(const char *filepath) {$/;"	f	class:SDLib::SDClass
mkdir	SD/src/SD.h	/^  boolean mkdir(const String &filepath) { return mkdir(filepath.c_str()); }$/;"	f	class:SDLib::SDClass
mode	Robot_Control/src/Squawk.cpp	/^  uint8_t mode;$/;"	m	struct:__anon4	file:
mode	Robot_Motor/src/ArduinoRobotMotorBoard.h	/^		uint8_t mode;$/;"	m	class:RobotMotorBoard
modem	GSM/src/GSM3ShieldV1BandManagement.h	/^		GSM3ShieldV1DirectModemProvider modem; \/\/ Direct access to modem$/;"	m	class:GSM3ShieldV1BandManagement
modem	GSM/src/GSM3ShieldV1ScanNetworks.h	/^		GSM3ShieldV1DirectModemProvider modem;$/;"	m	class:GSM3ShieldV1ScanNetworks
modemAccess	GSM/src/GSM3ShieldV1ModemVerification.h	/^		GSM3ShieldV1DirectModemProvider modemAccess;$/;"	m	class:GSM3ShieldV1ModemVerification
modemAccess	GSM/src/GSM3ShieldV1PinManagement.h	/^		GSM3ShieldV1DirectModemProvider modemAccess; $/;"	m	class:GSM3ShieldV1PinManagement
motorAdjustment	Robot_Motor/src/ArduinoRobotMotorBoard.h	/^		float motorAdjustment;\/\/-1.0 ~ 1.0, whether left is lowered or right is lowered$/;"	m	class:RobotMotorBoard
motorBoardData	Robot_Control/src/ArduinoRobot.h	/^		MOTOR_BOARD_DATA motorBoardData;$/;"	m	class:RobotControl
motor_pin_1	Stepper/src/Stepper.h	/^    int motor_pin_1;$/;"	m	class:Stepper
motor_pin_2	Stepper/src/Stepper.h	/^    int motor_pin_2;$/;"	m	class:Stepper
motor_pin_3	Stepper/src/Stepper.h	/^    int motor_pin_3;$/;"	m	class:Stepper
motor_pin_4	Stepper/src/Stepper.h	/^    int motor_pin_4;$/;"	m	class:Stepper
motor_pin_5	Stepper/src/Stepper.h	/^    int motor_pin_5;          \/\/ Only 5 phase motor$/;"	m	class:Stepper
motorsStop	Robot_Control/src/Motors.cpp	/^void RobotControl::motorsStop(){$/;"	f	class:RobotControl
motorsStop	Robot_Motor/src/ArduinoRobotMotorBoard.cpp	/^void RobotMotorBoard::motorsStop(){$/;"	f	class:RobotMotorBoard
motorsWrite	Robot_Control/src/Motors.cpp	/^void RobotControl::motorsWrite(int speedLeft,int speedRight){$/;"	f	class:RobotControl
motorsWrite	Robot_Motor/src/ArduinoRobotMotorBoard.cpp	/^void RobotMotorBoard::motorsWrite(int speedL, int speedR){$/;"	f	class:RobotMotorBoard
motorsWritePct	Robot_Control/src/Motors.cpp	/^void RobotControl::motorsWritePct(int speedLeftPct, int speedRightPct){$/;"	f	class:RobotControl
motorsWritePct	Robot_Motor/src/ArduinoRobotMotorBoard.cpp	/^void RobotMotorBoard::motorsWritePct(int speedLpct, int speedRpct){$/;"	f	class:RobotMotorBoard
move	arduino/WString.cpp	/^void String::move(String &rhs)$/;"	f	class:String
moveBackward	Robot_Control/src/Motors.cpp	/^void RobotControl::moveBackward(int speed){$/;"	f	class:RobotControl
moveForward	Robot_Control/src/Motors.cpp	/^void RobotControl::moveForward(int speed){$/;"	f	class:RobotControl
msc	arduino/USBCore.h	/^	InterfaceDescriptor			msc;$/;"	m	struct:__anon25
msgExample	GSM/src/GSM3MobileMockupProvider.h	/^		char* msgExample;$/;"	m	class:GSM3MobileMockupProvider
msgIndex	GSM/src/GSM3MobileMockupProvider.h	/^		int msgIndex;$/;"	m	class:GSM3MobileMockupProvider
multiByteChannel	Firmata/Firmata.h	/^    byte multiByteChannel; \/\/ channel data for multiByteCommands$/;"	m	class:FirmataClass
mvInput	Robot_Control/src/utility/RobotTextManager.cpp	/^void TextManager::mvInput(int dire){$/;"	f	class:TextManager
mySocket	GSM/src/GSM3MobileClientService.h	/^		uint8_t mySocket;$/;"	m	class:GSM3MobileClientService
mySocket	GSM/src/GSM3MobileServerService.h	/^		uint8_t mySocket; \/\/ Actual socket$/;"	m	class:GSM3MobileServerService
name	Robot_Control/src/ArduinoRobot.h	/^	char name[8];$/;"	m	struct:EEPROM_BMP
name	Robot_Control/src/FatStructs.h	/^  uint8_t  name[11];$/;"	m	struct:directoryEntry
name	SD/src/File.cpp	/^char *File::name(void) {$/;"	f	class:File
name	SD/src/utility/FatStructs.h	/^  uint8_t  name[11];$/;"	m	struct:directoryEntry
nbr	Servo/src/Servo.h	/^  uint8_t nbr        :6 ;             \/\/ a pin number from 0 to 63$/;"	m	struct:__anon33
networkAttach	GSM/src/GSM3ShieldV1DataNetworkProvider.h	/^		GSM3_NetworkStatus_t networkAttach(char* networkId, char* user, char* pass)$/;"	f	class:GSM3ShieldV1DataNetworkProvider
networkCode	GSM/src/GSM3ShieldV1CellManagement.h	/^		char *networkCode;$/;"	m	class:GSM3ShieldV1CellManagement
networkDetach	GSM/src/GSM3ShieldV1DataNetworkProvider.h	/^		GSM3_NetworkStatus_t networkDetach(){ return detachGPRS();};$/;"	f	class:GSM3ShieldV1DataNetworkProvider
newColor	Robot_Control/src/utility/Adafruit_GFX.cpp	/^uint16_t Adafruit_GFX::newColor(uint8_t r, uint8_t g, uint8_t b) {$/;"	f	class:Adafruit_GFX
newColor	TFT/src/utility/Adafruit_GFX.cpp	/^uint16_t Adafruit_GFX::newColor(uint8_t r, uint8_t g, uint8_t b) $/;"	f	class:Adafruit_GFX
next	HID/src/HID.h	/^  HIDSubDescriptor *next = NULL;$/;"	m	class:HIDSubDescriptor
next	arduino/PluggableUSB.h	/^  PluggableUSBModule *next = NULL;$/;"	m	class:PluggableUSBModule
nextString	GSM/src/GSM3CircularBuffer.cpp	/^char* GSM3CircularBuffer::nextString()$/;"	f	class:GSM3CircularBuffer
noAutoscroll	LiquidCrystal/src/LiquidCrystal.cpp	/^void LiquidCrystal::noAutoscroll(void) {$/;"	f	class:LiquidCrystal
noBlink	LiquidCrystal/src/LiquidCrystal.cpp	/^void LiquidCrystal::noBlink() {$/;"	f	class:LiquidCrystal
noCursor	LiquidCrystal/src/LiquidCrystal.cpp	/^void LiquidCrystal::noCursor() {$/;"	f	class:LiquidCrystal
noDisplay	LiquidCrystal/src/LiquidCrystal.cpp	/^void LiquidCrystal::noDisplay() {$/;"	f	class:LiquidCrystal
noFill	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::noFill() {$/;"	f	class:Adafruit_GFX
noFill	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::noFill() {$/;"	f	class:Adafruit_GFX
noInterrupts	arduino/Arduino.h	102;"	d
noStroke	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::noStroke() {$/;"	f	class:Adafruit_GFX
noStroke	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::noStroke() $/;"	f	class:Adafruit_GFX
noTone	arduino/Tone.cpp	/^void noTone(uint8_t _pin)$/;"	f
nop	SD/src/utility/Sd2Card.cpp	57;"	d	file:
notUsingInterrupt	SPI/src/SPI.cpp	/^void SPIClass::notUsingInterrupt(uint8_t interruptNumber)$/;"	f	class:SPIClass
nothing	arduino/WInterrupts.c	/^static void nothing(void) {$/;"	f	file:
nsac	Robot_Control/src/SdInfo.h	/^  uint8_t nsac;$/;"	m	struct:CSD
nsac	SD/src/utility/SdInfo.h	/^  uint8_t nsac;$/;"	m	struct:CSDV1
nsac	SD/src/utility/SdInfo.h	/^  uint8_t nsac;$/;"	m	struct:CSDV2
ntohl	Ethernet/src/utility/util.h	12;"	d
ntohs	Ethernet/src/utility/util.h	6;"	d
numEndpoints	arduino/PluggableUSB.h	/^  const uint8_t numEndpoints;$/;"	m	class:PluggableUSBModule
numEndpoints	arduino/USBCore.h	/^	u8 numEndpoints;$/;"	m	struct:__anon17
numInterfaces	arduino/PluggableUSB.h	/^  const uint8_t numInterfaces;$/;"	m	class:PluggableUSBModule
numInterfaces	arduino/USBCore.h	/^	u8	numInterfaces;$/;"	m	struct:__anon16
number	arduino/USBCore.h	/^	u8 number;$/;"	m	struct:__anon17
number_of_steps	Stepper/src/Stepper.h	/^    int number_of_steps;      \/\/ total number of steps this motor can take$/;"	m	class:Stepper
numbits	arduino/CDC.cpp	/^uint8_t Serial_::numbits() {$/;"	f	class:Serial_
oemName	Robot_Control/src/FatStructs.h	/^  char     oemName[8];$/;"	m	struct:fat32BootSector
oemName	SD/src/utility/FatStructs.h	/^  char     oemName[8];$/;"	m	struct:fat32BootSector
offset	Robot_Control/src/Squawk.cpp	/^  uint8_t offset;$/;"	m	struct:__anon4	file:
offset_	SD/src/utility/Sd2Card.h	/^  uint16_t offset_;$/;"	m	class:Sd2Card
oid	Robot_Control/src/SdInfo.h	/^  char oid[2];  \/\/ OEM\/Application ID$/;"	m	struct:CID
oid	SD/src/utility/SdInfo.h	/^  char oid[2];  \/\/ OEM\/Application ID$/;"	m	struct:CID
oldDateTime_	Robot_Control/src/Fat16.cpp	/^void (*Fat16::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  \/\/ NOLINT$/;"	v
oldDateTime_	Robot_Control/src/Fat16.h	/^  static void (*oldDateTime_)(uint16_t& date, uint16_t& time);  \/\/ NOLINT$/;"	m	class:Fat16
oldDateTime_	SD/src/utility/SdFat.h	/^  static void (*oldDateTime_)(uint16_t& date, uint16_t& time);  \/\/ NOLINT$/;"	m	class:SdFile
oldDateTime_	SD/src/utility/SdFile.cpp	/^void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  \/\/ NOLINT$/;"	v
oldToNew	Robot_Control/src/Fat16.h	/^  static void oldToNew(uint16_t *date, uint16_t *time) {$/;"	f	class:Fat16
oldToNew	SD/src/utility/SdFat.h	/^  static void oldToNew(uint16_t* date, uint16_t* time) {$/;"	f	class:SdFile
onOff	Robot_Control/src/utility/VirtualKeyboard.h	/^		bool onOff;$/;"	m	class:VirtualKeyboard
onReceive	Wire/src/Wire.cpp	/^void TwoWire::onReceive( void (*function)(int) )$/;"	f	class:TwoWire
onReceiveService	Wire/src/Wire.cpp	/^void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)$/;"	f	class:TwoWire
onRequest	Wire/src/Wire.cpp	/^void TwoWire::onRequest( void (*function)(void) )$/;"	f	class:TwoWire
onRequestService	Wire/src/Wire.cpp	/^void TwoWire::onRequestService(void)$/;"	f	class:TwoWire
ongoingCommand	GSM/src/GSM3ShieldV1ModemCore.h	/^		GSM3_commandType_e ongoingCommand;$/;"	m	class:GSM3ShieldV1ModemCore
op	Ethernet/src/Dhcp.h	/^	uint8_t  op; $/;"	m	struct:_RIP_MSG_FIXED
open	Robot_Control/src/Fat16.cpp	/^uint8_t Fat16::open(const char* fileName, uint8_t oflag) {$/;"	f	class:Fat16
open	Robot_Control/src/Fat16.cpp	/^uint8_t Fat16::open(uint16_t index, uint8_t oflag) {$/;"	f	class:Fat16
open	SD/src/SD.cpp	/^File SDClass::open(const char *filepath, uint8_t mode) {$/;"	f	class:SDLib::SDClass
open	SD/src/SD.h	/^  File open(const String &filename, uint8_t mode = FILE_READ) { return open( filename.c_str(), mode ); }$/;"	f	class:SDLib::SDClass
open	SD/src/utility/SdFat.h	/^  uint8_t open(SdFile& dirFile, \/\/ NOLINT$/;"	f	class:SdFile
open	SD/src/utility/SdFat.h	/^  uint8_t open(SdFile& dirFile, const char* fileName) {  \/\/ NOLINT$/;"	f	class:SdFile
open	SD/src/utility/SdFat.h	/^  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  \/\/ NOLINT$/;"	f	class:SdFile
open	SD/src/utility/SdFile.cpp	/^uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {$/;"	f	class:SdFile
open	SD/src/utility/SdFile.cpp	/^uint8_t SdFile::open(SdFile* dirFile, uint16_t index, uint8_t oflag) {$/;"	f	class:SdFile
openCachedEntry	SD/src/utility/SdFile.cpp	/^uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {$/;"	f	class:SdFile
openCommand	GSM/src/GSM3ShieldV1ModemCore.cpp	/^void GSM3ShieldV1ModemCore::openCommand(GSM3ShieldV1BaseProvider* provider, GSM3_commandType_e c)$/;"	f	class:GSM3ShieldV1ModemCore
openNextFile	SD/src/SD.cpp	/^File File::openNextFile(uint8_t mode) {$/;"	f	class:SDLib::File
openRoot	SD/src/utility/SdFat.h	/^  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  \/\/ NOLINT$/;"	f	class:SdFile
openRoot	SD/src/utility/SdFile.cpp	/^uint8_t SdFile::openRoot(SdVolume* vol) {$/;"	f	class:SdFile
operator !=	EEPROM/src/EEPROM.h	/^    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }$/;"	f	struct:EEPtr
operator !=	Ethernet/src/EthernetClient.h	/^  virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); };$/;"	f	class:EthernetClient
operator !=	Ethernet/src/EthernetClient.h	/^  virtual bool operator!=(const bool value) { return bool() != value; }$/;"	f	class:EthernetClient
operator !=	arduino/WString.h	/^	unsigned char operator != (const String &rhs) const {return !equals(rhs);}$/;"	f	class:String
operator !=	arduino/WString.h	/^	unsigned char operator != (const char *cstr) const {return !equals(cstr);}$/;"	f	class:String
operator %=	EEPROM/src/EEPROM.h	/^    EERef &operator %=( uint8_t in )     { return *this = **this % in; }$/;"	f	struct:EERef
operator &=	EEPROM/src/EEPROM.h	/^    EERef &operator &=( uint8_t in )     { return *this = **this & in; }$/;"	f	struct:EERef
operator *	EEPROM/src/EEPROM.h	/^    EERef operator*()                   { return index; }$/;"	f	struct:EEPtr
operator *	EEPROM/src/EEPROM.h	/^    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }$/;"	f	struct:EERef
operator *=	EEPROM/src/EEPROM.h	/^    EERef &operator *=( uint8_t in )     { return *this = **this * in; }$/;"	f	struct:EERef
operator +	arduino/WString.cpp	/^StringSumHelper & operator + (const StringSumHelper &lhs, char c)$/;"	f
operator +	arduino/WString.cpp	/^StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)$/;"	f
operator +	arduino/WString.cpp	/^StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs)$/;"	f
operator +	arduino/WString.cpp	/^StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)$/;"	f
operator +	arduino/WString.cpp	/^StringSumHelper & operator + (const StringSumHelper &lhs, double num)$/;"	f
operator +	arduino/WString.cpp	/^StringSumHelper & operator + (const StringSumHelper &lhs, float num)$/;"	f
operator +	arduino/WString.cpp	/^StringSumHelper & operator + (const StringSumHelper &lhs, int num)$/;"	f
operator +	arduino/WString.cpp	/^StringSumHelper & operator + (const StringSumHelper &lhs, long num)$/;"	f
operator +	arduino/WString.cpp	/^StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)$/;"	f
operator +	arduino/WString.cpp	/^StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)$/;"	f
operator +	arduino/WString.cpp	/^StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)$/;"	f
operator ++	EEPROM/src/EEPROM.h	/^    EEPtr operator++ (int)              { return index++; }$/;"	f	struct:EEPtr
operator ++	EEPROM/src/EEPROM.h	/^    EEPtr& operator++()                 { return ++index, *this; }$/;"	f	struct:EEPtr
operator ++	EEPROM/src/EEPROM.h	/^    EERef& operator++()                  { return *this += 1; }$/;"	f	struct:EERef
operator ++	EEPROM/src/EEPROM.h	/^    uint8_t operator++ (int){ $/;"	f	struct:EERef
operator +=	EEPROM/src/EEPROM.h	/^    EERef &operator +=( uint8_t in )     { return *this = **this + in; }$/;"	f	struct:EERef
operator +=	arduino/WString.h	/^	String & operator += (char c)			{concat(c); return (*this);}$/;"	f	class:String
operator +=	arduino/WString.h	/^	String & operator += (const String &rhs)	{concat(rhs); return (*this);}$/;"	f	class:String
operator +=	arduino/WString.h	/^	String & operator += (const __FlashStringHelper *str){concat(str); return (*this);}$/;"	f	class:String
operator +=	arduino/WString.h	/^	String & operator += (const char *cstr)		{concat(cstr); return (*this);}$/;"	f	class:String
operator +=	arduino/WString.h	/^	String & operator += (double num)		{concat(num); return (*this);}$/;"	f	class:String
operator +=	arduino/WString.h	/^	String & operator += (float num)		{concat(num); return (*this);}$/;"	f	class:String
operator +=	arduino/WString.h	/^	String & operator += (int num)			{concat(num); return (*this);}$/;"	f	class:String
operator +=	arduino/WString.h	/^	String & operator += (long num)			{concat(num); return (*this);}$/;"	f	class:String
operator +=	arduino/WString.h	/^	String & operator += (unsigned char num)		{concat(num); return (*this);}$/;"	f	class:String
operator +=	arduino/WString.h	/^	String & operator += (unsigned int num)		{concat(num); return (*this);}$/;"	f	class:String
operator +=	arduino/WString.h	/^	String & operator += (unsigned long num)	{concat(num); return (*this);}$/;"	f	class:String
operator --	EEPROM/src/EEPROM.h	/^    EEPtr operator-- (int)              { return index--; }$/;"	f	struct:EEPtr
operator --	EEPROM/src/EEPROM.h	/^    EEPtr& operator--()                 { return --index, *this; }$/;"	f	struct:EEPtr
operator --	EEPROM/src/EEPROM.h	/^    EERef& operator--()                  { return *this -= 1; }$/;"	f	struct:EERef
operator --	EEPROM/src/EEPROM.h	/^    uint8_t operator-- (int){ $/;"	f	struct:EERef
operator -=	EEPROM/src/EEPROM.h	/^    EERef &operator -=( uint8_t in )     { return *this = **this - in; }$/;"	f	struct:EERef
operator /=	EEPROM/src/EEPROM.h	/^    EERef &operator \/=( uint8_t in )     { return *this = **this \/ in; }$/;"	f	struct:EERef
operator <	arduino/WString.cpp	/^unsigned char String::operator<(const String &rhs) const$/;"	f	class:String
operator <<=	EEPROM/src/EEPROM.h	/^    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }$/;"	f	struct:EERef
operator <=	arduino/WString.cpp	/^unsigned char String::operator<=(const String &rhs) const$/;"	f	class:String
operator =	EEPROM/src/EEPROM.h	/^    EEPtr &operator=( int in )          { return index = in, *this; }$/;"	f	struct:EEPtr
operator =	EEPROM/src/EEPROM.h	/^    EERef &operator=( const EERef &ref ) { return *this = *ref; }$/;"	f	struct:EERef
operator =	EEPROM/src/EEPROM.h	/^    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }$/;"	f	struct:EERef
operator =	arduino/IPAddress.cpp	/^IPAddress& IPAddress::operator=(const uint8_t *address)$/;"	f	class:IPAddress
operator =	arduino/IPAddress.cpp	/^IPAddress& IPAddress::operator=(uint32_t address)$/;"	f	class:IPAddress
operator =	arduino/WString.cpp	/^String & String::operator = (String &&rval)$/;"	f	class:String
operator =	arduino/WString.cpp	/^String & String::operator = (StringSumHelper &&rval)$/;"	f	class:String
operator =	arduino/WString.cpp	/^String & String::operator = (const String &rhs)$/;"	f	class:String
operator =	arduino/WString.cpp	/^String & String::operator = (const __FlashStringHelper *pstr)$/;"	f	class:String
operator =	arduino/WString.cpp	/^String & String::operator = (const char *cstr)$/;"	f	class:String
operator ==	Ethernet/src/EthernetClient.cpp	/^bool EthernetClient::operator==(const EthernetClient& rhs) {$/;"	f	class:EthernetClient
operator ==	Ethernet/src/EthernetClient.h	/^  virtual bool operator==(const bool value) { return bool() == value; }$/;"	f	class:EthernetClient
operator ==	arduino/IPAddress.cpp	/^bool IPAddress::operator==(const uint8_t* addr) const$/;"	f	class:IPAddress
operator ==	arduino/IPAddress.h	/^    bool operator==(const IPAddress& addr) const { return _address.dword == addr._address.dword; };$/;"	f	class:IPAddress
operator ==	arduino/WString.h	/^	unsigned char operator == (const String &rhs) const {return equals(rhs);}$/;"	f	class:String
operator ==	arduino/WString.h	/^	unsigned char operator == (const char *cstr) const {return equals(cstr);}$/;"	f	class:String
operator >	arduino/WString.cpp	/^unsigned char String::operator>(const String &rhs) const$/;"	f	class:String
operator >=	arduino/WString.cpp	/^unsigned char String::operator>=(const String &rhs) const$/;"	f	class:String
operator >>=	EEPROM/src/EEPROM.h	/^    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }$/;"	f	struct:EERef
operator StringIfHelperType	arduino/WString.h	/^	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }$/;"	f	class:String
operator []	EEPROM/src/EEPROM.h	/^    EERef operator[]( const int idx )    { return idx; }$/;"	f	struct:EEPROMClass
operator []	arduino/IPAddress.h	/^    uint8_t operator[](int index) const { return _address.bytes[index]; };$/;"	f	class:IPAddress
operator []	arduino/IPAddress.h	/^    uint8_t& operator[](int index) { return _address.bytes[index]; };$/;"	f	class:IPAddress
operator []	arduino/WString.cpp	/^char & String::operator[](unsigned int index)$/;"	f	class:String
operator []	arduino/WString.cpp	/^char String::operator[]( unsigned int index ) const$/;"	f	class:String
operator ^=	EEPROM/src/EEPROM.h	/^    EERef &operator ^=( uint8_t in )     { return *this = **this ^ in; }$/;"	f	struct:EERef
operator bool	Ethernet/src/EthernetClient.cpp	/^EthernetClient::operator bool() {$/;"	f	class:EthernetClient
operator bool	Firmata/utility/BLEStream.h	/^BLEStream::operator bool()$/;"	f	class:BLEStream
operator bool	GSM/src/GSM3MobileClientService.cpp	/^GSM3MobileClientService::operator bool()$/;"	f	class:GSM3MobileClientService
operator bool	SD/src/File.cpp	/^File::operator bool() {$/;"	f	class:File
operator bool	SoftwareSerial/src/SoftwareSerial.h	/^  operator bool() { return true; }$/;"	f	class:SoftwareSerial
operator bool	arduino/CDC.cpp	/^Serial_::operator bool() {$/;"	f	class:Serial_
operator bool	arduino/HardwareSerial.h	/^    operator bool() { return true; }$/;"	f	class:HardwareSerial
operator const int	EEPROM/src/EEPROM.h	/^    operator const int() const          { return index; }$/;"	f	struct:EEPtr
operator const uint8_t	EEPROM/src/EEPROM.h	/^    operator const uint8_t() const       { return **this; }$/;"	f	struct:EERef
operator delete	arduino/new.cpp	/^void operator delete(void * ptr) {$/;"	f
operator delete[]	arduino/new.cpp	/^void operator delete[](void * ptr) {$/;"	f
operator new	arduino/new.cpp	/^void *operator new(size_t size) {$/;"	f
operator new[]	arduino/new.cpp	/^void *operator new[](size_t size) {$/;"	f
operator uint32_t	arduino/IPAddress.h	/^    operator uint32_t() const { return _address.dword; };$/;"	f	class:IPAddress
operator |=	EEPROM/src/EEPROM.h	/^    EERef &operator |=( uint8_t in )     { return *this = **this | in; }$/;"	f	struct:EERef
order	Robot_Control/src/Squawk.cpp	/^static uint8_t  order[64];$/;"	v	file:
order_count	Robot_Control/src/Squawk.cpp	/^static uint8_t  order_count;$/;"	v	file:
osc	Robot_Control/src/Squawk.cpp	/^__attribute__((used)) osc_t osc[4];$/;"	v
osc_t	Robot_Control/src/Squawk.h	/^} osc_t;$/;"	t	typeref:struct:__anon7
out	arduino/USBCore.h	/^	EndpointDescriptor			out;$/;"	m	struct:__anon24
out	arduino/USBCore.h	/^	EndpointDescriptor			out;$/;"	m	struct:__anon25
overflow	SoftwareSerial/src/SoftwareSerial.h	/^  bool overflow() { bool ret = _buffer_overflow; if (ret) _buffer_overflow = false; return ret; }$/;"	f	class:SoftwareSerial
p_cursor	Robot_Control/src/Squawk.cpp	/^    uint8_t *p_cursor;$/;"	m	class:StreamROM	file:
p_start	Robot_Control/src/Squawk.cpp	/^    uint8_t *p_start;$/;"	m	class:StreamROM	file:
packetSize	arduino/USBCore.h	/^	u16 packetSize;$/;"	m	struct:__anon18
packetSize0	arduino/USBCore.h	/^	u8	packetSize0;	\/\/ Packet 0$/;"	m	struct:__anon15
padOption	Ethernet/src/Dhcp.h	/^	padOption		=	0,$/;"	e	enum:__anon1
panasonicAddress	Robot_IR_Remote/src/IRremote.h	/^  unsigned int panasonicAddress; \/\/ This is only used for decoding Panasonic data$/;"	m	class:decode_results
param	Robot_Control/src/Squawk.cpp	/^  uint8_t   param;$/;"	m	struct:__anon6	file:
paritytype	arduino/CDC.cpp	/^uint8_t Serial_::paritytype() {$/;"	f	class:Serial_
parse	Firmata/Firmata.cpp	/^void FirmataClass::parse(byte inputData)$/;"	f	class:FirmataClass
parseCLCC	GSM/src/GSM3ShieldV1VoiceProvider.cpp	/^bool GSM3ShieldV1VoiceProvider::parseCLCC(char* number, int nlength)$/;"	f	class:GSM3ShieldV1VoiceProvider
parseCMGL_available	GSM/src/GSM3ShieldV1SMSProvider.cpp	/^bool GSM3ShieldV1SMSProvider::parseCMGL_available(bool& rsp)$/;"	f	class:GSM3ShieldV1SMSProvider
parseCodename	Robot_Motor/src/ArduinoRobotMotorBoard.cpp	/^uint8_t RobotMotorBoard::parseCodename(uint8_t codename){$/;"	f	class:RobotMotorBoard
parseCommand	Robot_Motor/src/ArduinoRobotMotorBoard.cpp	/^void RobotMotorBoard::parseCommand(){$/;"	f	class:RobotMotorBoard
parseDHCPResponse	Ethernet/src/Dhcp.cpp	/^uint8_t DhcpClass::parseDHCPResponse(unsigned long responseTimeout, uint32_t& transactionId)$/;"	f	class:DhcpClass
parseFloat	arduino/Stream.cpp	/^float Stream::parseFloat(LookaheadMode lookahead, char ignore)$/;"	f	class:Stream
parseFloat	arduino/Stream.h	/^  float parseFloat(char ignore) { return parseFloat(SKIP_ALL, ignore); }$/;"	f	class:Stream
parseInt	arduino/Stream.cpp	/^long Stream::parseInt(LookaheadMode lookahead, char ignore)$/;"	f	class:Stream
parseInt	arduino/Stream.h	/^  long parseInt(char ignore) { return parseInt(SKIP_ALL, ignore); }$/;"	f	class:Stream
parseMBDPort	Robot_Control/src/Sensors.cpp	/^int* RobotControl::parseMBDPort(uint8_t port){$/;"	f	class:RobotControl
parsePacket	Ethernet/src/EthernetUdp.cpp	/^int EthernetUDP::parsePacket()$/;"	f	class:EthernetUDP
parseQCCID_available	GSM/src/GSM3ShieldV1CellManagement.cpp	/^bool GSM3ShieldV1CellManagement::parseQCCID_available(bool& rsp)$/;"	f	class:GSM3ShieldV1CellManagement
parseQENG_available	GSM/src/GSM3ShieldV1CellManagement.cpp	/^bool GSM3ShieldV1CellManagement::parseQENG_available(bool& rsp)$/;"	f	class:GSM3ShieldV1CellManagement
parseQILOCIP_rsp	GSM/src/GSM3ShieldV1DataNetworkProvider.cpp	/^bool GSM3ShieldV1DataNetworkProvider::parseQILOCIP_rsp(char* LocalIP, int LocalIPlength, bool& rsp)$/;"	f	class:GSM3ShieldV1DataNetworkProvider
parseQILOCIP_rsp	GSM/src/GSM3ShieldV1MultiServerProvider.cpp	/^bool GSM3ShieldV1MultiServerProvider::parseQILOCIP_rsp(char* LocalIP, int LocalIPlength, bool& rsp)$/;"	f	class:GSM3ShieldV1MultiServerProvider
parseQIRD_head	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^bool GSM3ShieldV1MultiClientProvider::parseQIRD_head(bool& rsp)$/;"	f	class:GSM3ShieldV1MultiClientProvider
parsingSysex	Firmata/Firmata.h	/^    boolean parsingSysex;$/;"	m	class:FirmataClass
part	Robot_Control/src/FatStructs.h	/^  part_t   part[4];$/;"	m	struct:masterBootRecord
part	SD/src/utility/FatStructs.h	/^  part_t   part[4];$/;"	m	struct:masterBootRecord
part_t	Robot_Control/src/FatStructs.h	/^typedef struct partitionTable part_t;$/;"	t	typeref:struct:partitionTable
part_t	SD/src/utility/FatStructs.h	/^typedef struct partitionTable part_t;$/;"	t	typeref:struct:partitionTable
partialBlockRead	SD/src/utility/Sd2Card.cpp	/^void Sd2Card::partialBlockRead(uint8_t value) {$/;"	f	class:Sd2Card
partialBlockRead	SD/src/utility/Sd2Card.h	/^  uint8_t partialBlockRead(void) const {return partialBlockRead_;}$/;"	f	class:Sd2Card
partialBlockRead_	SD/src/utility/Sd2Card.h	/^  uint8_t partialBlockRead_;$/;"	m	class:Sd2Card
partitionTable	Robot_Control/src/FatStructs.h	/^struct partitionTable {$/;"	s
partitionTable	SD/src/utility/FatStructs.h	/^struct partitionTable {$/;"	s
passw	GSM/src/GSM3ShieldV1.h	/^		char* passw;				\/\/Password.$/;"	m	class:GSM3ShieldV1
passwd	GSM/src/GSM3ShieldV1DataNetworkProvider.h	/^		char* passwd; \/\/ Password for GPRS$/;"	m	class:GSM3ShieldV1DataNetworkProvider
pause	Robot_Control/src/Squawk.cpp	/^void SquawkSynth::pause() {$/;"	f	class:SquawkSynth
pauseMode	Robot_Control/src/communication.cpp	/^void RobotControl::pauseMode(uint8_t onOff){$/;"	f	class:RobotControl
pauseMode	Robot_Motor/src/ArduinoRobotMotorBoard.cpp	/^void RobotMotorBoard::pauseMode(bool onOff){$/;"	f	class:RobotMotorBoard
pcm	Robot_Control/src/Squawk.cpp	/^__attribute__((used)) uint8_t pcm = 128;$/;"	v
peek	Ethernet/src/EthernetClient.cpp	/^int EthernetClient::peek() {$/;"	f	class:EthernetClient
peek	Ethernet/src/EthernetUdp.cpp	/^int EthernetUDP::peek()$/;"	f	class:EthernetUDP
peek	Ethernet/src/utility/socket.cpp	/^uint16_t peek(SOCKET s, uint8_t *buf)$/;"	f
peek	Firmata/utility/BLEStream.h	/^int BLEStream::peek(void)$/;"	f	class:BLEStream
peek	Firmata/utility/EthernetClientStream.h	/^EthernetClientStream::peek()$/;"	f	class:EthernetClientStream
peek	Firmata/utility/WiFiStream.h	/^  inline int peek()$/;"	f	class:WiFiStream
peek	GSM/src/GSM3CircularBuffer.cpp	/^char GSM3CircularBuffer::peek(int increment)$/;"	f	class:GSM3CircularBuffer
peek	GSM/src/GSM3MobileClientService.cpp	/^int GSM3MobileClientService::peek()$/;"	f	class:GSM3MobileClientService
peek	GSM/src/GSM3MobileMockupProvider.cpp	/^int GSM3MobileMockupProvider::peek()$/;"	f	class:GSM3MobileMockupProvider
peek	GSM/src/GSM3SMSService.cpp	/^int GSM3SMSService::peek()$/;"	f	class:GSM3SMSService
peek	GSM/src/GSM3ShieldV1DirectModemProvider.cpp	/^int\/*char*\/ GSM3ShieldV1DirectModemProvider::peek()$/;"	f	class:GSM3ShieldV1DirectModemProvider
peek	SD/src/File.cpp	/^int File::peek() {$/;"	f	class:File
peek	SoftwareSerial/src/SoftwareSerial.cpp	/^int SoftwareSerial::peek()$/;"	f	class:SoftwareSerial
peek	Wire/src/Wire.cpp	/^int TwoWire::peek(void)$/;"	f	class:TwoWire
peek	arduino/CDC.cpp	/^int Serial_::peek(void)$/;"	f	class:Serial_
peek	arduino/HardwareSerial.cpp	/^int HardwareSerial::peek(void)$/;"	f	class:HardwareSerial
peekNextDigit	arduino/Stream.cpp	/^int Stream::peekNextDigit(LookaheadMode lookahead, bool detectDecimal)$/;"	f	class:Stream
peekSMS	GSM/src/GSM3MobileSMSProvider.h	/^		virtual inline int peekSMS(){return 0;};$/;"	f	class:GSM3MobileSMSProvider
peekSMS	GSM/src/GSM3ShieldV1SMSProvider.cpp	/^int GSM3ShieldV1SMSProvider::peekSMS()$/;"	f	class:GSM3ShieldV1SMSProvider
peekSocket	GSM/src/GSM3ShieldV1ClientProvider.cpp	/^int GSM3ShieldV1ClientProvider::peekSocket()$/;"	f	class:GSM3ShieldV1ClientProvider
peekSocket	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^int GSM3ShieldV1MultiClientProvider::peekSocket()$/;"	f	class:GSM3ShieldV1MultiClientProvider
peek_buffer	arduino/USBAPI.h	/^	int peek_buffer;$/;"	m	class:Serial_
period	Robot_Control/src/Squawk.cpp	/^  uint16_t  period;$/;"	m	struct:__anon6	file:
perm_write_protect	Robot_Control/src/SdInfo.h	/^  unsigned perm_write_protect : 1;$/;"	m	struct:CSD
perm_write_protect	SD/src/utility/SdInfo.h	/^  unsigned perm_write_protect : 1;$/;"	m	struct:CSDV1
perm_write_protect	SD/src/utility/SdInfo.h	/^  unsigned perm_write_protect : 1;$/;"	m	struct:CSDV2
pgm_read_byte	Robot_Control/src/utility/Adafruit_GFX.cpp	39;"	d	file:
pgm_read_byte	TFT/src/utility/Adafruit_GFX.cpp	39;"	d	file:
phase	Robot_Control/src/Squawk.h	/^  uint16_t phase;$/;"	m	struct:__anon7
phoneNumber	GSM/src/GSM3ShieldV1ModemCore.h	/^		char* phoneNumber;	$/;"	m	class:GSM3ShieldV1ModemCore
phonelength	GSM/src/GSM3ShieldV1VoiceProvider.h	/^		int phonelength; \/\/ Phone number length$/;"	m	class:GSM3ShieldV1VoiceProvider
pin	SD/src/utility/Sd2PinMap.h	/^  volatile uint8_t* pin;$/;"	m	struct:pin_map_t
pinConfig	Firmata/Firmata.h	/^    byte pinConfig[TOTAL_PINS];$/;"	m	class:FirmataClass
pinConfig	GSM/src/GSM3ShieldV1.h	/^		const char* pinConfig;		\/\/PIN.$/;"	m	class:GSM3ShieldV1
pinMode	arduino/wiring_digital.c	/^void pinMode(uint8_t pin, uint8_t mode)$/;"	f
pinState	Firmata/Firmata.h	/^    int pinState[TOTAL_PINS];$/;"	m	class:FirmataClass
pin_Z	Robot_Control/src/Multiplexer.h	/^		uint8_t pin_Z;$/;"	m	class:Multiplexer
pin_Z	Robot_Motor/src/Multiplexer.h	/^		uint8_t pin_Z;$/;"	m	class:Multiplexer
pin_count	Stepper/src/Stepper.h	/^    int pin_count;            \/\/ how many pins are in use.$/;"	m	class:Stepper
pin_map_t	SD/src/utility/Sd2PinMap.h	/^struct pin_map_t {$/;"	s
pin_used	GSM/src/GSM3ShieldV1PinManagement.h	/^		bool pin_used; \/\/ determines if pin lock is activated $/;"	m	class:GSM3ShieldV1PinManagement
play	Robot_Control/src/Squawk.cpp	/^void SquawkSynth::play() {$/;"	f	class:SquawkSynth
play	Robot_Control/src/Squawk.cpp	/^void SquawkSynth::play(SquawkStream *melody) {$/;"	f	class:SquawkSynth
play	Robot_Control/src/Squawk.cpp	/^void SquawkSynth::play(const uint8_t *melody) {$/;"	f	class:SquawkSynth
play	Robot_Control/src/SquawkSD.cpp	/^void SquawkSynthSD::play(Fat16 melody) {$/;"	f	class:SquawkSynthSD
play	Robot_Control/src/SquawkSD.h	/^	  inline void play() { Squawk.play(); };$/;"	f	class:SquawkSynthSD
playFile	Robot_Control/src/Melody.cpp	/^void RobotControl::playFile(char* filename){$/;"	f	class:RobotControl
playMelody	Robot_Control/src/Melody.cpp	/^void RobotControl::playMelody(char* script){$/;"	f	class:RobotControl
playNote	Robot_Control/src/Melody.cpp	/^void RobotControl::playNote(byte period, word length, char modifier) {$/;"	f	class:RobotControl
playroutine_reset	Robot_Control/src/Squawk.cpp	/^static void playroutine_reset() {$/;"	f	file:
plug	arduino/PluggableUSB.cpp	/^bool PluggableUSB_::plug(PluggableUSBModule *node)$/;"	f	class:PluggableUSB_
pluggedEndpoint	arduino/PluggableUSB.h	/^  uint8_t pluggedEndpoint;$/;"	m	class:PluggableUSBModule
pluggedInterface	arduino/PluggableUSB.h	/^  uint8_t pluggedInterface;$/;"	m	class:PluggableUSBModule
pnm	Robot_Control/src/SdInfo.h	/^  char pnm[5];  \/\/ Product name$/;"	m	struct:CID
pnm	SD/src/utility/SdInfo.h	/^  char pnm[5];  \/\/ Product name$/;"	m	struct:CID
point	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::point(int16_t x, int16_t y) {$/;"	f	class:Adafruit_GFX
point	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::point(int16_t x, int16_t y) $/;"	f	class:Adafruit_GFX
pointTo	Robot_Control/src/Motors.cpp	/^void RobotControl::pointTo(int angle){$/;"	f	class:RobotControl
poll	Firmata/utility/BLEStream.h	/^bool BLEStream::poll()$/;"	f	class:BLEStream
poll	arduino/USBCore.cpp	/^void USBDevice_::poll()$/;"	f	class:USBDevice_
port	Firmata/utility/EthernetClientStream.h	/^    uint16_t port;$/;"	m	class:EthernetClientStream
port	GSM/src/GSM3ShieldV1ModemCore.h	/^		int port;$/;"	m	class:GSM3ShieldV1ModemCore
port	SD/src/utility/Sd2PinMap.h	/^  volatile uint8_t* port;$/;"	m	struct:pin_map_t
portInputRegister	arduino/Arduino.h	182;"	d
portModeRegister	arduino/Arduino.h	183;"	d
portOutputRegister	arduino/Arduino.h	181;"	d
port_speed	Robot_Control/src/Squawk.cpp	/^  uint8_t   port_speed;$/;"	m	struct:__anon6	file:
port_target	Robot_Control/src/Squawk.cpp	/^  uint16_t  port_target;$/;"	m	struct:__anon6	file:
position	Robot_Control/src/EasyTransfer2.h	/^uint8_t position;$/;"	m	class:EasyTransfer2
position	Robot_Motor/src/EasyTransfer2.h	/^uint8_t position;$/;"	m	class:EasyTransfer2
position	SD/src/File.cpp	/^uint32_t File::position() {$/;"	f	class:File
prepareAuxLocate	GSM/src/GSM3ShieldV1BaseProvider.cpp	/^void GSM3ShieldV1BaseProvider::prepareAuxLocate(PGM_P str, char auxLocate[])$/;"	f	class:GSM3ShieldV1BaseProvider
presend_DHCP	Ethernet/src/Dhcp.cpp	/^void DhcpClass::presend_DHCP()$/;"	f	class:DhcpClass
print	arduino/Print.cpp	/^size_t Print::print(char c)$/;"	f	class:Print
print	arduino/Print.cpp	/^size_t Print::print(const Printable& x)$/;"	f	class:Print
print	arduino/Print.cpp	/^size_t Print::print(const String &s)$/;"	f	class:Print
print	arduino/Print.cpp	/^size_t Print::print(const __FlashStringHelper *ifsh)$/;"	f	class:Print
print	arduino/Print.cpp	/^size_t Print::print(const char str[])$/;"	f	class:Print
print	arduino/Print.cpp	/^size_t Print::print(double n, int digits)$/;"	f	class:Print
print	arduino/Print.cpp	/^size_t Print::print(int n, int base)$/;"	f	class:Print
print	arduino/Print.cpp	/^size_t Print::print(long n, int base)$/;"	f	class:Print
print	arduino/Print.cpp	/^size_t Print::print(unsigned char b, int base)$/;"	f	class:Print
print	arduino/Print.cpp	/^size_t Print::print(unsigned int n, int base)$/;"	f	class:Print
print	arduino/Print.cpp	/^size_t Print::print(unsigned long n, int base)$/;"	f	class:Print
printByte	Ethernet/src/Dhcp.cpp	/^void DhcpClass::printByte(char * buf, uint8_t n ) {$/;"	f	class:DhcpClass
printCharDebug	GSM/src/GSM3CircularBuffer.cpp	/^void GSM3CircularBuffer::printCharDebug(uint8_t c)$/;"	f	class:GSM3CircularBuffer
printDirName	Robot_Control/src/Fat16.cpp	/^void Fat16::printDirName(const dir_t& dir, uint8_t width) {$/;"	f	class:Fat16
printDirName	SD/src/utility/SdFile.cpp	/^void SdFile::printDirName(const dir_t& dir, uint8_t width) {$/;"	f	class:SdFile
printFatDate	Robot_Control/src/Fat16.cpp	/^void Fat16::printFatDate(uint16_t fatDate) {$/;"	f	class:Fat16
printFatDate	SD/src/utility/SdFile.cpp	/^void SdFile::printFatDate(uint16_t fatDate) {$/;"	f	class:SdFile
printFatTime	Robot_Control/src/Fat16.cpp	/^void Fat16::printFatTime(uint16_t fatTime) {$/;"	f	class:Fat16
printFatTime	SD/src/utility/SdFile.cpp	/^void SdFile::printFatTime(uint16_t fatTime) {$/;"	f	class:SdFile
printFirmwareVersion	Firmata/Firmata.cpp	/^void FirmataClass::printFirmwareVersion(void)$/;"	f	class:FirmataClass
printFloat	arduino/Print.cpp	/^size_t Print::printFloat(double number, uint8_t digits) $/;"	f	class:Print
printNumber	arduino/Print.cpp	/^size_t Print::printNumber(unsigned long n, uint8_t base)$/;"	f	class:Print
printTo	arduino/IPAddress.cpp	/^size_t IPAddress::printTo(Print& p) const$/;"	f	class:IPAddress
printTwoDigits	Robot_Control/src/Fat16.cpp	/^void Fat16::printTwoDigits(uint8_t v) {$/;"	f	class:Fat16
printTwoDigits	SD/src/utility/SdFile.cpp	/^void SdFile::printTwoDigits(uint8_t v) {$/;"	f	class:SdFile
printVersion	Firmata/Firmata.cpp	/^void FirmataClass::printVersion(void)$/;"	f	class:FirmataClass
println	arduino/Print.cpp	/^size_t Print::println(char c)$/;"	f	class:Print
println	arduino/Print.cpp	/^size_t Print::println(const Printable& x)$/;"	f	class:Print
println	arduino/Print.cpp	/^size_t Print::println(const String &s)$/;"	f	class:Print
println	arduino/Print.cpp	/^size_t Print::println(const __FlashStringHelper *ifsh)$/;"	f	class:Print
println	arduino/Print.cpp	/^size_t Print::println(const char c[])$/;"	f	class:Print
println	arduino/Print.cpp	/^size_t Print::println(double num, int digits)$/;"	f	class:Print
println	arduino/Print.cpp	/^size_t Print::println(int num, int base)$/;"	f	class:Print
println	arduino/Print.cpp	/^size_t Print::println(long num, int base)$/;"	f	class:Print
println	arduino/Print.cpp	/^size_t Print::println(unsigned char b, int base)$/;"	f	class:Print
println	arduino/Print.cpp	/^size_t Print::println(unsigned int num, int base)$/;"	f	class:Print
println	arduino/Print.cpp	/^size_t Print::println(unsigned long num, int base)$/;"	f	class:Print
println	arduino/Print.cpp	/^size_t Print::println(void)$/;"	f	class:Print
process	Robot_Motor/src/ArduinoRobotMotorBoard.cpp	/^void RobotMotorBoard::process(){$/;"	f	class:RobotMotorBoard
processInput	Firmata/Firmata.cpp	/^void FirmataClass::processInput(void)$/;"	f	class:FirmataClass
processSysexMessage	Firmata/Firmata.cpp	/^void FirmataClass::processSysexMessage(void)$/;"	f	class:FirmataClass
protocol	HID/src/HID.h	/^  uint8_t protocol;$/;"	m	class:HID_
protocol	arduino/USBCore.h	/^	u8 protocol;$/;"	m	struct:__anon17
prv_m	Robot_Control/src/SdInfo.h	/^  unsigned prv_m : 4;  \/\/ Product revision n.m$/;"	m	struct:CID
prv_m	SD/src/utility/SdInfo.h	/^  unsigned prv_m : 4;  \/\/ Product revision n.m$/;"	m	struct:CID
prv_n	Robot_Control/src/SdInfo.h	/^  unsigned prv_n : 4;$/;"	m	struct:CID
prv_n	SD/src/utility/SdInfo.h	/^  unsigned prv_n : 4;$/;"	m	struct:CID
psn	Robot_Control/src/SdInfo.h	/^  uint32_t psn;  \/\/ Product serial number$/;"	m	struct:CID
psn	SD/src/utility/SdInfo.h	/^  uint32_t psn;  \/\/ Product serial number$/;"	m	struct:CID
pto_t	Robot_Control/src/Squawk.cpp	/^} pto_t;$/;"	t	typeref:struct:__anon4	file:
pul_max	Robot_Control/src/keyboard.cpp	/^int pul_max[]={10,153,339,514,752};$/;"	v
pul_min	Robot_Control/src/keyboard.cpp	/^int pul_min[]={0,133,319,494,732};$/;"	v
pulseEnable	LiquidCrystal/src/LiquidCrystal.cpp	/^void LiquidCrystal::pulseEnable(void) {$/;"	f	class:LiquidCrystal
pulseIn	arduino/wiring_pulse.c	/^unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)$/;"	f
pulseInLong	arduino/wiring_pulse.c	/^unsigned long pulseInLong(uint8_t pin, uint8_t state, unsigned long timeout)$/;"	f
pushColor	Robot_Control/src/Arduino_LCD.cpp	/^void Arduino_LCD::pushColor(uint16_t color) {$/;"	f	class:Arduino_LCD
pushColor	TFT/src/utility/Adafruit_ST7735.cpp	/^void Adafruit_ST7735::pushColor(uint16_t color) {$/;"	f	class:Adafruit_ST7735
pushInput	Robot_Control/src/utility/RobotTextManager.cpp	/^void TextManager::pushInput(int code){$/;"	f	class:TextManager
put	EEPROM/src/EEPROM.h	/^    template< typename T > const T &put( int idx, const T &t ){$/;"	f	struct:EEPROMClass
quectelStrings	GSM/src/GSM3ShieldV1BandManagement.h	/^		char* quectelStrings[NUMBEROFBANDS];\/\/ = {"\\"EGSM_MODE\\"", "\\"DCS_MODE\\"", "\\"PCS_MODE\\"",$/;"	m	class:GSM3ShieldV1BandManagement
r2w_factor	Robot_Control/src/SdInfo.h	/^  unsigned r2w_factor : 3;$/;"	m	struct:CSD
r2w_factor	SD/src/utility/SdInfo.h	/^  unsigned r2w_factor : 3;$/;"	m	struct:CSDV1
r2w_factor	SD/src/utility/SdInfo.h	/^  unsigned r2w_factor : 3;$/;"	m	struct:CSDV2
radians	arduino/Arduino.h	97;"	d
random	arduino/WMath.cpp	/^long random(long howbig)$/;"	f
random	arduino/WMath.cpp	/^long random(long howsmall, long howbig)$/;"	f
randomSeed	arduino/WMath.cpp	/^void randomSeed(unsigned long seed)$/;"	f
rawDev_	Robot_Control/src/Fat16.cpp	/^SdCard *Fat16::rawDev_ = 0;             \/\/ class for block read and write$/;"	m	class:Fat16	file:
rawDev_	Robot_Control/src/Fat16.h	/^  static SdCard *rawDev_;             \/\/ Device$/;"	m	class:Fat16
rawIPAddress	arduino/Client.h	/^  uint8_t* rawIPAddress(IPAddress& addr) { return addr.raw_address(); };$/;"	f	class:Client
rawIPAddress	arduino/Udp.h	/^  uint8_t* rawIPAddress(IPAddress& addr) { return addr.raw_address(); };$/;"	f	class:UDP
raw_address	arduino/IPAddress.h	/^    uint8_t* raw_address() { return _address.bytes; };$/;"	f	class:IPAddress
rawbuf	Robot_IR_Remote/src/IRremote.h	/^  volatile unsigned int *rawbuf; \/\/ Raw intervals in .5 us ticks$/;"	m	class:decode_results
rawbuf	Robot_IR_Remote/src/IRremoteInt.h	/^  unsigned int rawbuf[RAWBUF]; \/\/ raw data$/;"	m	struct:__anon2
rawlen	Robot_IR_Remote/src/IRremote.h	/^  int rawlen; \/\/ Number of records in rawbuf.$/;"	m	class:decode_results
rawlen	Robot_IR_Remote/src/IRremoteInt.h	/^  uint8_t rawlen;         \/\/ counter of entries in rawbuf$/;"	m	struct:__anon2
rcvstate	Robot_IR_Remote/src/IRremoteInt.h	/^  uint8_t rcvstate;          \/\/ state machine$/;"	m	struct:__anon2
read	EEPROM/src/EEPROM.h	/^    uint8_t read( int idx )              { return EERef( idx ); }$/;"	f	struct:EEPROMClass
read	Ethernet/src/EthernetClient.cpp	/^int EthernetClient::read() {$/;"	f	class:EthernetClient
read	Ethernet/src/EthernetClient.cpp	/^int EthernetClient::read(uint8_t *buf, size_t size) {$/;"	f	class:EthernetClient
read	Ethernet/src/EthernetUdp.cpp	/^int EthernetUDP::read()$/;"	f	class:EthernetUDP
read	Ethernet/src/EthernetUdp.cpp	/^int EthernetUDP::read(unsigned char* buffer, size_t len)$/;"	f	class:EthernetUDP
read	Ethernet/src/EthernetUdp.h	/^  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };$/;"	f	class:EthernetUDP
read	Ethernet/src/utility/w5100.cpp	/^uint16_t W5100Class::read(uint16_t _addr, uint8_t *_buf, uint16_t _len)$/;"	f	class:W5100Class
read	Ethernet/src/utility/w5100.cpp	/^uint8_t W5100Class::read(uint16_t _addr)$/;"	f	class:W5100Class
read	Firmata/utility/BLEStream.h	/^int BLEStream::read(void)$/;"	f	class:BLEStream
read	Firmata/utility/EthernetClientStream.h	/^EthernetClientStream::read()$/;"	f	class:EthernetClientStream
read	Firmata/utility/WiFiStream.h	/^  inline int read()$/;"	f	class:WiFiStream
read	GSM/src/GSM3CircularBuffer.cpp	/^char GSM3CircularBuffer::read()$/;"	f	class:GSM3CircularBuffer
read	GSM/src/GSM3MobileClientService.cpp	/^int GSM3MobileClientService::read()$/;"	f	class:GSM3MobileClientService
read	GSM/src/GSM3MobileClientService.cpp	/^int GSM3MobileClientService::read(uint8_t *buf, size_t size)$/;"	f	class:GSM3MobileClientService
read	GSM/src/GSM3SMSService.cpp	/^int GSM3SMSService::read()$/;"	f	class:GSM3SMSService
read	GSM/src/GSM3ShieldV1DirectModemProvider.cpp	/^int\/*char*\/ GSM3ShieldV1DirectModemProvider::read()$/;"	f	class:GSM3ShieldV1DirectModemProvider
read	Robot_Control/src/Fat16.cpp	/^int16_t Fat16::read(void) {$/;"	f	class:Fat16
read	Robot_Control/src/Fat16.cpp	/^int16_t Fat16::read(void* buf, uint16_t nbyte) {$/;"	f	class:Fat16
read	Robot_Control/src/Squawk.cpp	/^    uint8_t read() { return pgm_read_byte(p_cursor++); }$/;"	f	class:StreamROM
read	Robot_Control/src/SquawkSD.cpp	/^    uint8_t read() { return f.read(); }$/;"	f	class:StreamFile
read	SD/src/File.cpp	/^int File::read() {$/;"	f	class:File
read	SD/src/File.cpp	/^int File::read(void *buf, uint16_t nbyte) {$/;"	f	class:File
read	SD/src/utility/SdFat.h	/^  int16_t read(void) {$/;"	f	class:SdFile
read	SD/src/utility/SdFile.cpp	/^int16_t SdFile::read(void* buf, uint16_t nbyte) {$/;"	f	class:SdFile
read	Servo/src/avr/Servo.cpp	/^int Servo::read() \/\/ return the value as degrees$/;"	f	class:Servo
read	Servo/src/sam/Servo.cpp	/^int Servo::read() \/\/ return the value as degrees$/;"	f	class:Servo
read	Servo/src/samd/Servo.cpp	/^int Servo::read() \/\/ return the value as degrees$/;"	f	class:Servo
read	SoftwareSerial/src/SoftwareSerial.cpp	/^int SoftwareSerial::read()$/;"	f	class:SoftwareSerial
read	Wire/src/Wire.cpp	/^int TwoWire::read(void)$/;"	f	class:TwoWire
read	arduino/CDC.cpp	/^int Serial_::read(void)$/;"	f	class:Serial_
read	arduino/HardwareSerial.cpp	/^int HardwareSerial::read(void)$/;"	f	class:HardwareSerial
read16	Robot_Control/src/lcd.cpp	/^uint16_t read16(Fat16& f) {$/;"	f
read16	TFT/src/utility/Adafruit_GFX.h	/^uint16_t PImage::read16(File f) {$/;"	f	class:PImage
read32	Robot_Control/src/lcd.cpp	/^uint32_t read32(Fat16& f) {$/;"	f
read32	TFT/src/utility/Adafruit_GFX.h	/^uint32_t PImage::read32(File f) {$/;"	f	class:PImage
readBlock	Robot_Control/src/SdCard.cpp	/^uint8_t SdCard::readBlock(uint32_t blockNumber, uint8_t* dst) {$/;"	f	class:SdCard
readBlock	SD/src/utility/Sd2Card.cpp	/^uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {$/;"	f	class:Sd2Card
readBlock	SD/src/utility/SdFat.h	/^  uint8_t readBlock(uint32_t block, uint8_t* dst) {$/;"	f	class:SdVolume
readBreak	arduino/CDC.cpp	/^int32_t Serial_::readBreak() {$/;"	f	class:Serial_
readBuffer	Robot_Control/src/EEPROM_I2C.cpp	/^void EEPROM_I2C::readBuffer(unsigned int eeaddress, byte *buffer, int length ){$/;"	f	class:EEPROM_I2C
readByte	Robot_Control/src/EEPROM_I2C.cpp	/^byte EEPROM_I2C::readByte(unsigned int eeaddress){$/;"	f	class:EEPROM_I2C
readByte	Robot_Control/src/EasyTransfer2.cpp	/^uint8_t EasyTransfer2::readByte(){$/;"	f	class:EasyTransfer2
readByte	Robot_Motor/src/EasyTransfer2.cpp	/^uint8_t EasyTransfer2::readByte(){$/;"	f	class:EasyTransfer2
readBytes	arduino/Stream.cpp	/^size_t Stream::readBytes(char *buffer, size_t length)$/;"	f	class:Stream
readBytes	arduino/Stream.h	/^  size_t readBytes( uint8_t *buffer, size_t length) { return readBytes((char *)buffer, length); }$/;"	f	class:Stream
readBytesUntil	arduino/Stream.cpp	/^size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)$/;"	f	class:Stream
readBytesUntil	arduino/Stream.h	/^  size_t readBytesUntil( char terminator, uint8_t *buffer, size_t length) { return readBytesUntil(terminator, (char *)buffer, length); }$/;"	f	class:Stream
readCID	Robot_Control/src/SdCard.h	/^  uint8_t readCID(cid_t* cid) {$/;"	f	class:SdCard
readCID	SD/src/utility/Sd2Card.h	/^  uint8_t readCID(cid_t* cid) {$/;"	f	class:Sd2Card
readCSD	SD/src/utility/Sd2Card.h	/^  uint8_t readCSD(csd_t* csd) {$/;"	f	class:Sd2Card
readData	SD/src/utility/Sd2Card.cpp	/^uint8_t Sd2Card::readData(uint32_t block,$/;"	f	class:Sd2Card
readData	SD/src/utility/SdFat.h	/^  uint8_t readData(uint32_t block, uint16_t offset,$/;"	f	class:SdVolume
readDir	Robot_Control/src/Fat16.cpp	/^uint8_t Fat16::readDir(dir_t* dir, uint16_t* index, uint8_t skip) {$/;"	f	class:Fat16
readDir	Robot_Control/src/Fat16.h	/^  static uint8_t readDir(dir_t& dir, uint16_t& index,  \/\/ NOLINT$/;"	f	class:Fat16
readDir	SD/src/utility/SdFat.h	/^  int8_t readDir(dir_t& dir) {return readDir(&dir);}  \/\/ NOLINT$/;"	f	class:SdFile
readDir	SD/src/utility/SdFile.cpp	/^int8_t SdFile::readDir(dir_t* dir) {$/;"	f	class:SdFile
readDirCache	SD/src/utility/SdFile.cpp	/^dir_t* SdFile::readDirCache(void) {$/;"	f	class:SdFile
readEnd	SD/src/utility/Sd2Card.cpp	/^void Sd2Card::readEnd(void) {$/;"	f	class:Sd2Card
readInt	GSM/src/GSM3CircularBuffer.cpp	/^int GSM3CircularBuffer::readInt()$/;"	f	class:GSM3CircularBuffer
readInt	Robot_Control/src/EasyTransfer2.cpp	/^int EasyTransfer2::readInt(){$/;"	f	class:EasyTransfer2
readInt	Robot_Motor/src/EasyTransfer2.cpp	/^int EasyTransfer2::readInt(){$/;"	f	class:EasyTransfer2
readMicroseconds	Servo/src/avr/Servo.cpp	/^int Servo::readMicroseconds()$/;"	f	class:Servo
readMicroseconds	Servo/src/sam/Servo.cpp	/^int Servo::readMicroseconds()$/;"	f	class:Servo
readMicroseconds	Servo/src/samd/Servo.cpp	/^int Servo::readMicroseconds()$/;"	f	class:Servo
readNetworks	GSM/src/GSM3ShieldV1ScanNetworks.cpp	/^String GSM3ShieldV1ScanNetworks::readNetworks()$/;"	f	class:GSM3ShieldV1ScanNetworks
readPort	Firmata/Boards.h	/^static inline unsigned char readPort(byte port, byte bitmask)$/;"	f
readReg	Robot_Control/src/SdCard.cpp	/^uint8_t SdCard::readReg(uint8_t cmd, void* buf) {$/;"	f	class:SdCard
readRegister	SD/src/utility/Sd2Card.cpp	/^uint8_t Sd2Card::readRegister(uint8_t cmd, void* buf) {$/;"	f	class:Sd2Card
readSMS	GSM/src/GSM3MobileMockupProvider.cpp	/^int GSM3MobileMockupProvider::readSMS()$/;"	f	class:GSM3MobileMockupProvider
readSMS	GSM/src/GSM3MobileSMSProvider.h	/^		virtual inline int readSMS(){return 0;};$/;"	f	class:GSM3MobileSMSProvider
readSMS	GSM/src/GSM3ShieldV1SMSProvider.cpp	/^int GSM3ShieldV1SMSProvider::readSMS()$/;"	f	class:GSM3ShieldV1SMSProvider
readSn	Ethernet/src/utility/w5100.h	/^uint16_t W5100Class::readSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {$/;"	f	class:W5100Class
readSn	Ethernet/src/utility/w5100.h	/^uint8_t W5100Class::readSn(SOCKET _s, uint16_t _addr) {$/;"	f	class:W5100Class
readSocket	GSM/src/GSM3MobileMockupProvider.cpp	/^int GSM3MobileMockupProvider::readSocket(int idsocket, bool advance)$/;"	f	class:GSM3MobileMockupProvider
readSocket	GSM/src/GSM3MobileMockupProvider.cpp	/^int GSM3MobileMockupProvider::readSocket(uint8_t *buf, size_t size, int idsocket)$/;"	f	class:GSM3MobileMockupProvider
readSocket	GSM/src/GSM3ShieldV1ClientProvider.cpp	/^int GSM3ShieldV1ClientProvider::readSocket()$/;"	f	class:GSM3ShieldV1ClientProvider
readSocket	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^int GSM3ShieldV1MultiClientProvider::readSocket()$/;"	f	class:GSM3ShieldV1MultiClientProvider
readString	arduino/Stream.cpp	/^String Stream::readString()$/;"	f	class:Stream
readStringUntil	arduino/Stream.cpp	/^String Stream::readStringUntil(char terminator)$/;"	f	class:Stream
readTransfer	Robot_Control/src/SdCard.cpp	/^uint8_t SdCard::readTransfer(uint8_t* dst, uint16_t count) {$/;"	f	class:SdCard
read_bl_len	Robot_Control/src/SdInfo.h	/^  unsigned read_bl_len : 4;$/;"	m	struct:CSD
read_bl_len	SD/src/utility/SdInfo.h	/^  unsigned read_bl_len : 4;$/;"	m	struct:CSDV1
read_bl_len	SD/src/utility/SdInfo.h	/^  unsigned read_bl_len : 4;$/;"	m	struct:CSDV2
read_bl_partial	Robot_Control/src/SdInfo.h	/^  unsigned read_bl_partial : 1;$/;"	m	struct:CSD
read_bl_partial	SD/src/utility/SdInfo.h	/^  unsigned read_bl_partial : 1;$/;"	m	struct:CSDV1
read_bl_partial	SD/src/utility/SdInfo.h	/^  unsigned read_bl_partial : 1;$/;"	m	struct:CSDV2
read_blk_misalign	Robot_Control/src/SdInfo.h	/^  unsigned read_blk_misalign :1;$/;"	m	struct:CSD
read_blk_misalign	SD/src/utility/SdInfo.h	/^  unsigned read_blk_misalign :1;$/;"	m	struct:CSDV1
read_blk_misalign	SD/src/utility/SdInfo.h	/^  unsigned read_blk_misalign :1;$/;"	m	struct:CSDV2
read_data	Ethernet/src/utility/w5100.cpp	/^void W5100Class::read_data(SOCKET s, volatile uint16_t src, volatile uint8_t *dst, uint16_t len)$/;"	f	class:W5100Class
ready	GSM/src/GSM3MobileClientService.cpp	/^int GSM3MobileClientService::ready()$/;"	f	class:GSM3MobileClientService
ready	GSM/src/GSM3MobileMockupProvider.cpp	/^int GSM3MobileMockupProvider::ready()$/;"	f	class:GSM3MobileMockupProvider
ready	GSM/src/GSM3MobileServerService.cpp	/^int GSM3MobileServerService::ready()$/;"	f	class:GSM3MobileServerService
ready	GSM/src/GSM3SMSService.cpp	/^int GSM3SMSService::ready()$/;"	f	class:GSM3SMSService
ready	GSM/src/GSM3ShieldV1.h	/^		int ready(){return GSM3ShieldV1BaseProvider::ready();};$/;"	f	class:GSM3ShieldV1
ready	GSM/src/GSM3ShieldV1AccessProvider.h	/^		int ready(){return GSM3ShieldV1BaseProvider::ready();};$/;"	f	class:GSM3ShieldV1AccessProvider
ready	GSM/src/GSM3ShieldV1BaseProvider.cpp	/^int GSM3ShieldV1BaseProvider::ready() $/;"	f	class:GSM3ShieldV1BaseProvider
ready	GSM/src/GSM3ShieldV1CellManagement.h	/^		int ready(){return GSM3ShieldV1BaseProvider::ready();};$/;"	f	class:GSM3ShieldV1CellManagement
ready	GSM/src/GSM3ShieldV1ClientProvider.h	/^		int ready(){return GSM3ShieldV1BaseProvider::ready();};$/;"	f	class:GSM3ShieldV1ClientProvider
ready	GSM/src/GSM3ShieldV1DataNetworkProvider.h	/^		int ready(){return GSM3ShieldV1BaseProvider::ready();};$/;"	f	class:GSM3ShieldV1DataNetworkProvider
ready	GSM/src/GSM3ShieldV1MultiClientProvider.h	/^		int ready(){return GSM3ShieldV1BaseProvider::ready();};$/;"	f	class:GSM3ShieldV1MultiClientProvider
ready	GSM/src/GSM3ShieldV1MultiServerProvider.h	/^		int ready(){return GSM3ShieldV1BaseProvider::ready();};$/;"	f	class:GSM3ShieldV1MultiServerProvider
ready	GSM/src/GSM3ShieldV1SMSProvider.h	/^		int ready(){return GSM3ShieldV1BaseProvider::ready();};$/;"	f	class:GSM3ShieldV1SMSProvider
ready	GSM/src/GSM3ShieldV1ServerProvider.h	/^		int ready(){return GSM3ShieldV1BaseProvider::ready();};$/;"	f	class:GSM3ShieldV1ServerProvider
ready	GSM/src/GSM3ShieldV1VoiceProvider.h	/^		int ready(){return GSM3ShieldV1BaseProvider::ready();};$/;"	f	class:GSM3ShieldV1VoiceProvider
ready	GSM/src/GSM3VoiceCallService.cpp	/^int GSM3VoiceCallService::ready()$/;"	f	class:GSM3VoiceCallService
receiveData	Robot_Control/src/EasyTransfer2.cpp	/^boolean EasyTransfer2::receiveData(){$/;"	f	class:EasyTransfer2
receiveData	Robot_Motor/src/EasyTransfer2.cpp	/^boolean EasyTransfer2::receiveData(){$/;"	f	class:EasyTransfer2
recognizeUnsolicitedEvent	GSM/src/GSM3ShieldV1.cpp	/^bool GSM3ShieldV1::recognizeUnsolicitedEvent(byte oldTail)$/;"	f	class:GSM3ShieldV1
recognizeUnsolicitedEvent	GSM/src/GSM3ShieldV1BaseProvider.h	/^	virtual bool recognizeUnsolicitedEvent(byte from){return false;};$/;"	f	class:GSM3ShieldV1BaseProvider
recognizeUnsolicitedEvent	GSM/src/GSM3ShieldV1ClientProvider.cpp	/^bool GSM3ShieldV1ClientProvider::recognizeUnsolicitedEvent(byte oldTail)$/;"	f	class:GSM3ShieldV1ClientProvider
recognizeUnsolicitedEvent	GSM/src/GSM3ShieldV1DirectModemProvider.h	/^			bool recognizeUnsolicitedEvent(byte from){return false;};$/;"	f	class:GSM3ShieldV1DirectModemProvider
recognizeUnsolicitedEvent	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^bool GSM3ShieldV1MultiClientProvider::recognizeUnsolicitedEvent(byte oldTail)$/;"	f	class:GSM3ShieldV1MultiClientProvider
recognizeUnsolicitedEvent	GSM/src/GSM3ShieldV1MultiServerProvider.cpp	/^bool GSM3ShieldV1MultiServerProvider::recognizeUnsolicitedEvent(byte oldTail)$/;"	f	class:GSM3ShieldV1MultiServerProvider
recognizeUnsolicitedEvent	GSM/src/GSM3ShieldV1ServerProvider.cpp	/^bool GSM3ShieldV1ServerProvider::recognizeUnsolicitedEvent(byte oldTail)$/;"	f	class:GSM3ShieldV1ServerProvider
recognizeUnsolicitedEvent	GSM/src/GSM3ShieldV1VoiceProvider.cpp	/^bool GSM3ShieldV1VoiceProvider::recognizeUnsolicitedEvent(byte oldTail)$/;"	f	class:GSM3ShieldV1VoiceProvider
rect	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::rect(int16_t x, int16_t y, int16_t width, int16_t height) {$/;"	f	class:Adafruit_GFX
rect	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::rect(int16_t x, int16_t y, int16_t width, int16_t height, int16_t radius) {$/;"	f	class:Adafruit_GFX
rect	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::rect(int16_t x, int16_t y, int16_t width, int16_t height) $/;"	f	class:Adafruit_GFX
rect	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::rect(int16_t x, int16_t y, int16_t width, int16_t height, int16_t radius) $/;"	f	class:Adafruit_GFX
recv	Ethernet/src/utility/socket.cpp	/^int16_t recv(SOCKET s, uint8_t *buf, int16_t len)$/;"	f
recv	GSM/src/GSM3SoftSerial.cpp	/^void GSM3SoftSerial::recv()$/;"	f	class:GSM3SoftSerial
recv	SoftwareSerial/src/SoftwareSerial.cpp	/^void SoftwareSerial::recv()$/;"	f	class:SoftwareSerial
recvAvailable	Ethernet/src/utility/socket.cpp	/^int16_t recvAvailable(SOCKET s)$/;"	f
recv_data_processing	Ethernet/src/utility/w5100.cpp	/^void W5100Class::recv_data_processing(SOCKET s, uint8_t *data, uint16_t len, uint8_t peek)$/;"	f	class:W5100Class
recvfrom	Ethernet/src/utility/socket.cpp	/^uint16_t recvfrom(SOCKET s, uint8_t *buf, uint16_t len, uint8_t *addr, uint16_t *port)$/;"	f
recvpin	Robot_IR_Remote/src/IRremoteInt.h	/^  uint8_t recvpin;           \/\/ pin for IR data from detector$/;"	m	struct:__anon2
refreshCurrentLetter	Robot_Control/src/utility/RobotTextManager.cpp	/^void TextManager::refreshCurrentLetter(char letter){$/;"	f	class:TextManager
registerActiveProvider	GSM/src/GSM3ShieldV1ModemCore.h	/^		void registerActiveProvider(GSM3ShieldV1BaseProvider* provider){activeProvider=provider;};$/;"	f	class:GSM3ShieldV1ModemCore
registerMgr	GSM/src/GSM3SoftSerial.h	/^		inline void registerMgr(GSM3SoftSerialMgr* manager){mgr=manager;};$/;"	f	class:GSM3SoftSerial
registerMobileNetworkProvider	GSM/src/GSM3MobileNetworkRegistry.cpp	/^void GSM3MobileNetworkRegistry::registerMobileNetworkProvider(GSM3MobileNetworkProvider* provider)$/;"	f	class:GSM3MobileNetworkRegistry
registerUMProvider	GSM/src/GSM3ShieldV1ModemCore.cpp	/^void GSM3ShieldV1ModemCore::registerUMProvider(GSM3ShieldV1BaseProvider* provider)$/;"	f	class:GSM3ShieldV1ModemCore
releaseSocket	GSM/src/GSM3MobileNetworkProvider.h	/^		void releaseSocket(int socket){};$/;"	f	class:GSM3MobileNetworkProvider
releaseSocket	GSM/src/GSM3ShieldV1ClientProvider.cpp	/^void GSM3ShieldV1ClientProvider::releaseSocket(int socket)$/;"	f	class:GSM3ShieldV1ClientProvider
releaseSocket	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^void GSM3ShieldV1MultiClientProvider::releaseSocket(int socket)$/;"	f	class:GSM3ShieldV1MultiClientProvider
releaseSocket	GSM/src/GSM3ShieldV1MultiServerProvider.cpp	/^void GSM3ShieldV1MultiServerProvider::releaseSocket(int socket)$/;"	f	class:GSM3ShieldV1MultiServerProvider
releaseSocket	GSM/src/GSM3ShieldV1ServerProvider.cpp	/^void GSM3ShieldV1ServerProvider::releaseSocket(int socket)$/;"	f	class:GSM3ShieldV1ServerProvider
remoteID	GSM/src/GSM3ShieldV1.h	/^		const char* remoteID;		\/\/Server.$/;"	m	class:GSM3ShieldV1
remoteIP	Ethernet/src/EthernetUdp.h	/^  virtual IPAddress remoteIP() { return _remoteIP; };$/;"	f	class:EthernetUDP
remoteIP	GSM/src/GSM3ShieldV1ClientProvider.h	/^		IPAddress remoteIP;        	\/\/ Remote IP address$/;"	m	class:GSM3ShieldV1ClientProvider
remoteIP	GSM/src/GSM3ShieldV1MultiClientProvider.h	/^		IPAddress remoteIP; \/\/ Remote IP address$/;"	m	class:GSM3ShieldV1MultiClientProvider
remoteNumber	GSM/src/GSM3SMSService.cpp	/^int GSM3SMSService::remoteNumber(char* number, int nlength)$/;"	f	class:GSM3SMSService
remotePort	Ethernet/src/EthernetUdp.h	/^  virtual uint16_t remotePort() { return _remotePort; };$/;"	f	class:EthernetUDP
remotePort	GSM/src/GSM3ShieldV1ClientProvider.h	/^		int remotePort;				\/\/Current operation remote port.$/;"	m	class:GSM3ShieldV1ClientProvider
remotePort	GSM/src/GSM3ShieldV1MultiClientProvider.h	/^		int remotePort;		\/\/ Current operation remote port$/;"	m	class:GSM3ShieldV1MultiClientProvider
remoteSMSNumber	GSM/src/GSM3MobileMockupProvider.cpp	/^int GSM3MobileMockupProvider::remoteSMSNumber(char* number, int nlength)$/;"	f	class:GSM3MobileMockupProvider
remoteSMSNumber	GSM/src/GSM3MobileSMSProvider.h	/^		virtual inline int remoteSMSNumber(char* number, int nlength){return 0;}; $/;"	f	class:GSM3MobileSMSProvider
remoteSMSNumber	GSM/src/GSM3ShieldV1SMSProvider.cpp	/^int GSM3ShieldV1SMSProvider::remoteSMSNumber(char* number, int nlength)$/;"	f	class:GSM3ShieldV1SMSProvider
remote_ip	Firmata/examples/StandardFirmataEthernet/ethernetConfig.h	51;"	d
remote_port	Firmata/examples/StandardFirmataEthernet/ethernetConfig.h	58;"	d
remove	Robot_Control/src/Fat16.cpp	/^uint8_t Fat16::remove(const char* fileName) {$/;"	f	class:Fat16
remove	Robot_Control/src/Fat16.cpp	/^uint8_t Fat16::remove(void) {$/;"	f	class:Fat16
remove	SD/src/SD.cpp	/^boolean SDClass::remove(const char *filepath) {$/;"	f	class:SDLib::SDClass
remove	SD/src/SD.h	/^  boolean remove(const String &filepath) { return remove(filepath.c_str()); }$/;"	f	class:SDLib::SDClass
remove	SD/src/utility/SdFat.h	/^  static uint8_t remove(SdFile& dirFile, const char* fileName) {  \/\/ NOLINT$/;"	f	class:SdFile
remove	SD/src/utility/SdFile.cpp	/^uint8_t SdFile::remove(SdFile* dirFile, const char* fileName) {$/;"	f	class:SdFile
remove	SD/src/utility/SdFile.cpp	/^uint8_t SdFile::remove(void) {$/;"	f	class:SdFile
remove	arduino/WString.cpp	/^void String::remove(unsigned int index){$/;"	f	class:String
remove	arduino/WString.cpp	/^void String::remove(unsigned int index, unsigned int count){$/;"	f	class:String
replace	arduino/WString.cpp	/^void String::replace(char find, char replace)$/;"	f	class:String
replace	arduino/WString.cpp	/^void String::replace(const String& find, const String& replace)$/;"	f	class:String
reportActionDone	Robot_Motor/src/ArduinoRobotMotorBoard.cpp	/^void RobotMotorBoard::reportActionDone(){$/;"	f	class:RobotMotorBoard
reportSerial	Firmata/utility/SerialFirmata.h	/^    byte reportSerial[MAX_SERIAL_PORTS];$/;"	m	class:SerialFirmata
requestFrom	Wire/src/Wire.cpp	/^uint8_t TwoWire::requestFrom(int address, int quantity)$/;"	f	class:TwoWire
requestFrom	Wire/src/Wire.cpp	/^uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)$/;"	f	class:TwoWire
requestFrom	Wire/src/Wire.cpp	/^uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)$/;"	f	class:TwoWire
requestFrom	Wire/src/Wire.cpp	/^uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint32_t iaddress, uint8_t isize, uint8_t sendStop)$/;"	f	class:TwoWire
requestFrom	Wire/src/Wire.cpp	/^uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {$/;"	f	class:TwoWire
request_DHCP_lease	Ethernet/src/Dhcp.cpp	/^int DhcpClass::request_DHCP_lease(){$/;"	f	class:DhcpClass
reserve	arduino/WString.cpp	/^unsigned char String::reserve(unsigned int size)$/;"	f	class:String
reserved	Robot_Control/src/SdInfo.h	/^  unsigned reserved : 4;$/;"	m	struct:CID
reserved	SD/src/utility/SdInfo.h	/^  unsigned reserved : 4;$/;"	m	struct:CID
reserved1	Robot_Control/src/FatStructs.h	/^  uint8_t  reserved1;$/;"	m	struct:fat32BootSector
reserved1	Robot_Control/src/SdInfo.h	/^  unsigned reserved1 : 6;$/;"	m	struct:CSD
reserved1	SD/src/utility/FatStructs.h	/^  uint8_t  reserved1;$/;"	m	struct:fat32BootSector
reserved1	SD/src/utility/SdInfo.h	/^  unsigned reserved1 : 6;$/;"	m	struct:CSDV1
reserved1	SD/src/utility/SdInfo.h	/^  unsigned reserved1 : 6;$/;"	m	struct:CSDV2
reserved2	Robot_Control/src/SdInfo.h	/^  unsigned reserved2 : 2;$/;"	m	struct:CSD
reserved2	SD/src/utility/SdInfo.h	/^  unsigned reserved2 : 2;$/;"	m	struct:CSDV1
reserved2	SD/src/utility/SdInfo.h	/^  unsigned reserved2 : 4;$/;"	m	struct:CSDV2
reserved3	Robot_Control/src/SdInfo.h	/^  unsigned reserved3 : 2;$/;"	m	struct:CSD
reserved3	SD/src/utility/SdInfo.h	/^  unsigned reserved3 : 2;$/;"	m	struct:CSDV1
reserved3	SD/src/utility/SdInfo.h	/^  unsigned reserved3 : 2;$/;"	m	struct:CSDV2
reserved4	Robot_Control/src/SdInfo.h	/^  unsigned reserved4 : 5;$/;"	m	struct:CSD
reserved4	SD/src/utility/SdInfo.h	/^  unsigned reserved4 : 1;$/;"	m	struct:CSDV2
reserved4	SD/src/utility/SdInfo.h	/^  unsigned reserved4 : 5;$/;"	m	struct:CSDV1
reserved5	Robot_Control/src/SdInfo.h	/^  unsigned reserved5: 2;$/;"	m	struct:CSD
reserved5	SD/src/utility/SdInfo.h	/^  unsigned reserved5 : 2;$/;"	m	struct:CSDV2
reserved5	SD/src/utility/SdInfo.h	/^  unsigned reserved5: 2;$/;"	m	struct:CSDV1
reserved6	SD/src/utility/SdInfo.h	/^  unsigned reserved6 : 5;$/;"	m	struct:CSDV2
reserved7	SD/src/utility/SdInfo.h	/^  unsigned reserved7: 2;$/;"	m	struct:CSDV2
reservedNT	Robot_Control/src/FatStructs.h	/^  uint8_t  reservedNT;$/;"	m	struct:directoryEntry
reservedNT	SD/src/utility/FatStructs.h	/^  uint8_t  reservedNT;$/;"	m	struct:directoryEntry
reservedSectorCount	Robot_Control/src/FatStructs.h	/^  uint16_t reservedSectorCount;$/;"	m	struct:biosParmBlock
reservedSectorCount	SD/src/utility/FatStructs.h	/^  uint16_t reservedSectorCount;$/;"	m	struct:biosParmBlock
reset	Firmata/utility/SerialFirmata.cpp	/^void SerialFirmata::reset()$/;"	f	class:SerialFirmata
resetData	Robot_Control/src/EasyTransfer2.cpp	/^void EasyTransfer2::resetData(){$/;"	f	class:EasyTransfer2
resetData	Robot_Motor/src/EasyTransfer2.cpp	/^void EasyTransfer2::resetData(){$/;"	f	class:EasyTransfer2
resetSS	Ethernet/src/utility/w5100.h	/^	inline static void resetSS() { digitalWrite(10, HIGH); };$/;"	f	class:W5100Class
resetSS	Ethernet/src/utility/w5100.h	/^      inline static void resetSS()   { PORTB |=  _BV(0); };$/;"	f	class:W5100Class
resetSS	Ethernet/src/utility/w5100.h	/^      inline static void resetSS()   { PORTB |=  _BV(2); };$/;"	f	class:W5100Class
resetSS	Ethernet/src/utility/w5100.h	/^      inline static void resetSS()   { PORTB |=  _BV(4); };$/;"	f	class:W5100Class
resetSS	Ethernet/src/utility/w5100.h	/^      inline static void resetSS()   { PORTB |=  _BV(6); };$/;"	f	class:W5100Class
resetSS	Ethernet/src/utility/w5100.h	/^    inline static void resetSS() {$/;"	f	class:W5100Class
resetTC	Servo/src/samd/Servo.cpp	/^static inline void resetTC (Tc* TCx)$/;"	f	file:
reset_DHCP_lease	Ethernet/src/Dhcp.cpp	/^void DhcpClass::reset_DHCP_lease(){$/;"	f	class:DhcpClass
restartModem	GSM/src/GSM3ShieldV1DirectModemProvider.cpp	/^void GSM3ShieldV1DirectModemProvider::restartModem()$/;"	f	class:GSM3ShieldV1DirectModemProvider
results	Robot_IR_Remote/src/IRremoteTools.cpp	/^decode_results results; \/\/ container for received IR codes$/;"	v
resume	Robot_IR_Remote/src/IRremote.cpp	/^void IRrecv::resume() {$/;"	f	class:IRrecv
resumeIRremote	Robot_IR_Remote/src/IRremoteTools.cpp	/^void resumeIRremote(){$/;"	f
retrieveBuffer	GSM/src/GSM3CircularBuffer.cpp	/^bool GSM3CircularBuffer::retrieveBuffer(char* buffer, int bufsize, int& SizeWritten)$/;"	f	class:GSM3CircularBuffer
retrieveCallingNumber	GSM/src/GSM3MobileMockupProvider.h	/^		inline int retrieveCallingNumber(char* buffer, int*& bufsize){return 0;};$/;"	f	class:GSM3MobileMockupProvider
retrieveCallingNumber	GSM/src/GSM3ShieldV1VoiceProvider.cpp	/^int GSM3ShieldV1VoiceProvider::retrieveCallingNumber (char* buffer, int bufsize)$/;"	f	class:GSM3ShieldV1VoiceProvider
retrieveCallingNumber	GSM/src/GSM3VoiceCallService.cpp	/^int GSM3VoiceCallService::retrieveCallingNumber(char* buffer, int bufsize)$/;"	f	class:GSM3VoiceCallService
retrieveCallingNumberContinue	GSM/src/GSM3ShieldV1VoiceProvider.cpp	/^void GSM3ShieldV1VoiceProvider::retrieveCallingNumberContinue()$/;"	f	class:GSM3ShieldV1VoiceProvider
rewind	Robot_Control/src/Fat16.h	/^  void rewind(void) {curPosition_ = curCluster_ = 0;}$/;"	f	class:Fat16
rewind	SD/src/utility/SdFat.h	/^  void rewind(void) {$/;"	f	class:SdFile
rewindDirectory	SD/src/SD.cpp	/^void File::rewindDirectory(void) {  $/;"	f	class:SDLib::File
rightToLeft	LiquidCrystal/src/LiquidCrystal.cpp	/^void LiquidCrystal::rightToLeft(void) {$/;"	f	class:LiquidCrystal
rmDir	SD/src/utility/SdFile.cpp	/^uint8_t SdFile::rmDir(void) {$/;"	f	class:SdFile
rmRfStar	SD/src/utility/SdFile.cpp	/^uint8_t SdFile::rmRfStar(void) {$/;"	f	class:SdFile
rmdir	SD/src/SD.cpp	/^boolean SDClass::rmdir(const char *filepath) {$/;"	f	class:SDLib::SDClass
rmdir	SD/src/SD.h	/^  boolean rmdir(const String &filepath) { return rmdir(filepath.c_str()); }$/;"	f	class:SDLib::SDClass
robotNameRead	Robot_Control/src/ArduinoRobot.h	/^inline void RobotControl::robotNameRead(char* container){$/;"	f	class:RobotControl
robotNameWrite	Robot_Control/src/ArduinoRobot.h	/^inline void RobotControl::robotNameWrite(char* text){$/;"	f	class:RobotControl
robotSpeed	Robot_Motor/src/LineFollow.h	/^		uint8_t robotSpeed; \/\/percentage$/;"	m	class:LineFollow
rom	Robot_Control/src/Squawk.cpp	/^static StreamROM rom;$/;"	v	file:
root	SD/src/SD.h	/^  SdFile root;$/;"	m	class:SDLib::SDClass
rootDirEntryCount	Robot_Control/src/Fat16.h	/^  static uint16_t rootDirEntryCount(void) {return rootDirEntryCount_;}$/;"	f	class:Fat16
rootDirEntryCount	Robot_Control/src/FatStructs.h	/^  uint16_t rootDirEntryCount;$/;"	m	struct:biosParmBlock
rootDirEntryCount	SD/src/utility/FatStructs.h	/^  uint16_t rootDirEntryCount;$/;"	m	struct:biosParmBlock
rootDirEntryCount	SD/src/utility/SdFat.h	/^  uint32_t rootDirEntryCount(void) const {return rootDirEntryCount_;}$/;"	f	class:SdVolume
rootDirEntryCount_	Robot_Control/src/Fat16.cpp	/^uint16_t Fat16::rootDirEntryCount_;      \/\/ should be 512 for FAT16$/;"	m	class:Fat16	file:
rootDirEntryCount_	Robot_Control/src/Fat16.h	/^  static uint16_t rootDirEntryCount_;  \/\/ should be 512 for FAT16$/;"	m	class:Fat16
rootDirEntryCount_	SD/src/utility/SdFat.h	/^  uint16_t rootDirEntryCount_;  \/\/ number of entries in FAT16 root dir$/;"	m	class:SdVolume
rootDirStart	SD/src/utility/SdFat.h	/^  uint32_t rootDirStart(void) const {return rootDirStart_;}$/;"	f	class:SdVolume
rootDirStartBlock_	Robot_Control/src/Fat16.cpp	/^uint32_t Fat16::rootDirStartBlock_;      \/\/ start of root dir$/;"	m	class:Fat16	file:
rootDirStartBlock_	Robot_Control/src/Fat16.h	/^  static uint32_t rootDirStartBlock_;  \/\/ start of root dir$/;"	m	class:Fat16
rootDirStart_	SD/src/utility/SdFat.h	/^  uint32_t rootDirStart_;       \/\/ root start block for FAT16, cluster for FAT32$/;"	m	class:SdVolume
rootNode	HID/src/HID.h	/^  HIDSubDescriptor* rootNode;$/;"	m	class:HID_
rootNode	arduino/PluggableUSB.h	/^  PluggableUSBModule* rootNode;$/;"	m	class:PluggableUSB_
rotation	Robot_Control/src/utility/Adafruit_GFX.h	/^    rotation;$/;"	m	class:Adafruit_GFX
rotation	TFT/src/utility/Adafruit_GFX.h	/^	rotation;$/;"	m	class:Adafruit_GFX
round	SoftwareSerial/src/SoftwareSerial.h	121;"	d
round	arduino/Arduino.h	96;"	d
routersOnSubnet	Ethernet/src/Dhcp.h	/^	routersOnSubnet		=	3,$/;"	e	enum:__anon1
row_delay	Robot_Control/src/Squawk.cpp	/^static uint8_t  row_delay;$/;"	v	file:
rowstart	Robot_Control/src/Arduino_LCD.h	/^           colstart, rowstart; \/\/ some displays need this changed$/;"	m	class:Arduino_LCD
rowstart	TFT/src/utility/Adafruit_ST7735.h	/^           colstart, rowstart; \/\/ some displays need this changed$/;"	m	class:Adafruit_ST7735
rspinmask	Robot_Control/src/Arduino_LCD.h	/^           datapinmask, clkpinmask, cspinmask, rspinmask,$/;"	m	class:Arduino_LCD
rspinmask	TFT/src/utility/Adafruit_ST7735.h	/^           datapinmask, clkpinmask, cspinmask, rspinmask,$/;"	m	class:Adafruit_ST7735
rsport	Robot_Control/src/Arduino_LCD.h	/^  volatile uint8_t *dataport, *clkport, *csport, *rsport;$/;"	m	class:Arduino_LCD
rsport	TFT/src/utility/Adafruit_ST7735.h	/^  volatile uint32_t *dataport, *clkport, *csport, *rsport;$/;"	m	class:Adafruit_ST7735
rsport	TFT/src/utility/Adafruit_ST7735.h	/^  volatile uint8_t *dataport, *clkport, *csport, *rsport;$/;"	m	class:Adafruit_ST7735
rts	arduino/CDC.cpp	/^bool Serial_::rts() {$/;"	f	class:Serial_
run	Robot_Control/src/utility/VirtualKeyboard.cpp	/^void VirtualKeyboard::run(){$/;"	f	class:VirtualKeyboard
runLineFollow	Robot_Motor/src/lineFollow.cpp	/^void LineFollow::runLineFollow(){$/;"	f	class:LineFollow
rx	Firmata/utility/SerialFirmata.h	/^    uint8_t rx;$/;"	m	struct:__anon3::serial_pins
rxBuffer	Wire/src/Wire.cpp	/^uint8_t TwoWire::rxBuffer[BUFFER_LENGTH];$/;"	m	class:TwoWire	file:
rxBuffer	Wire/src/Wire.h	/^    static uint8_t rxBuffer[];$/;"	m	class:TwoWire
rxBufferIndex	Wire/src/Wire.cpp	/^uint8_t TwoWire::rxBufferIndex = 0;$/;"	m	class:TwoWire	file:
rxBufferIndex	Wire/src/Wire.h	/^    static uint8_t rxBufferIndex;$/;"	m	class:TwoWire
rxBufferLength	Wire/src/Wire.cpp	/^uint8_t TwoWire::rxBufferLength = 0;$/;"	m	class:TwoWire	file:
rxBufferLength	Wire/src/Wire.h	/^    static uint8_t rxBufferLength;$/;"	m	class:TwoWire
rx_array_inx	Robot_Control/src/EasyTransfer2.h	/^uint8_t rx_array_inx;  \/\/index for RX parsing buffer$/;"	m	class:EasyTransfer2
rx_array_inx	Robot_Motor/src/EasyTransfer2.h	/^uint8_t rx_array_inx;  \/\/index for RX parsing buffer$/;"	m	class:EasyTransfer2
rx_buffer_index_t	arduino/HardwareSerial.h	/^typedef uint16_t rx_buffer_index_t;$/;"	t
rx_buffer_index_t	arduino/HardwareSerial.h	/^typedef uint8_t rx_buffer_index_t;$/;"	t
rx_delay_centering	GSM/src/GSM3SoftSerial.cpp	/^  unsigned short rx_delay_centering;$/;"	m	struct:_DELAY_TABLE	file:
rx_delay_intrabit	GSM/src/GSM3SoftSerial.cpp	/^  unsigned short rx_delay_intrabit;$/;"	m	struct:_DELAY_TABLE	file:
rx_delay_stopbit	GSM/src/GSM3SoftSerial.cpp	/^  unsigned short rx_delay_stopbit;$/;"	m	struct:_DELAY_TABLE	file:
rx_len	Robot_Control/src/EasyTransfer2.h	/^uint8_t rx_len;		\/\/RX packet length according to the packet$/;"	m	class:EasyTransfer2
rx_len	Robot_Motor/src/EasyTransfer2.h	/^uint8_t rx_len;		\/\/RX packet length according to the packet$/;"	m	class:EasyTransfer2
rx_pin_read	GSM/src/GSM3SoftSerial.cpp	/^uint8_t GSM3SoftSerial::rx_pin_read()$/;"	f	class:GSM3SoftSerial
rx_pin_read	SoftwareSerial/src/SoftwareSerial.cpp	/^uint8_t SoftwareSerial::rx_pin_read()$/;"	f	class:SoftwareSerial
sample_rate	Robot_Control/src/Squawk.cpp	/^static uint16_t sample_rate;$/;"	v	file:
sbi	Robot_IR_Remote/src/IRremoteInt.h	87;"	d
sbi	Wire/src/utility/twi.c	35;"	d	file:
sbi	arduino/wiring_private.h	41;"	d
scrollDisplayLeft	LiquidCrystal/src/LiquidCrystal.cpp	/^void LiquidCrystal::scrollDisplayLeft(void) {$/;"	f	class:LiquidCrystal
scrollDisplayRight	LiquidCrystal/src/LiquidCrystal.cpp	/^void LiquidCrystal::scrollDisplayRight(void) {$/;"	f	class:LiquidCrystal
sdCard	SD/src/utility/SdFat.h	/^  static Sd2Card* sdCard(void) {return sdCard_;}$/;"	f	class:SdVolume
sdCard_	SD/src/utility/SdFat.h	/^  static Sd2Card* sdCard_;            \/\/ Sd2Card object for cache$/;"	m	class:SdVolume
sdCard_	SD/src/utility/SdVolume.cpp	/^Sd2Card* SdVolume::sdCard_;          \/\/ pointer to SD card object$/;"	m	class:SdVolume	file:
secs	Ethernet/src/Dhcp.h	/^	uint16_t secs;$/;"	m	struct:_RIP_MSG_FIXED
sector_size_high	Robot_Control/src/SdInfo.h	/^  unsigned sector_size_high : 6;$/;"	m	struct:CSD
sector_size_high	SD/src/utility/SdInfo.h	/^  unsigned sector_size_high : 6;$/;"	m	struct:CSDV1
sector_size_high	SD/src/utility/SdInfo.h	/^  unsigned sector_size_high : 6;$/;"	m	struct:CSDV2
sector_size_low	Robot_Control/src/SdInfo.h	/^  unsigned sector_size_low : 1;$/;"	m	struct:CSD
sector_size_low	SD/src/utility/SdInfo.h	/^  unsigned sector_size_low : 1;$/;"	m	struct:CSDV1
sector_size_low	SD/src/utility/SdInfo.h	/^  unsigned sector_size_low : 1;$/;"	m	struct:CSDV2
sectorsPerCluster	Robot_Control/src/FatStructs.h	/^  uint8_t  sectorsPerCluster;$/;"	m	struct:biosParmBlock
sectorsPerCluster	SD/src/utility/FatStructs.h	/^  uint8_t  sectorsPerCluster;$/;"	m	struct:biosParmBlock
sectorsPerFat16	Robot_Control/src/FatStructs.h	/^  uint16_t sectorsPerFat16;$/;"	m	struct:biosParmBlock
sectorsPerFat16	SD/src/utility/FatStructs.h	/^  uint16_t sectorsPerFat16;$/;"	m	struct:biosParmBlock
sectorsPerFat32	Robot_Control/src/FatStructs.h	/^  uint32_t sectorsPerFat32;$/;"	m	struct:biosParmBlock
sectorsPerFat32	SD/src/utility/FatStructs.h	/^  uint32_t sectorsPerFat32;$/;"	m	struct:biosParmBlock
sectorsPerTrtack	Robot_Control/src/FatStructs.h	/^  uint16_t sectorsPerTrtack;$/;"	m	struct:biosParmBlock
sectorsPerTrtack	SD/src/utility/FatStructs.h	/^  uint16_t sectorsPerTrtack;$/;"	m	struct:biosParmBlock
secureShutdown	GSM/src/GSM3ShieldV1AccessProvider.cpp	/^bool GSM3ShieldV1AccessProvider::secureShutdown()$/;"	f	class:GSM3ShieldV1AccessProvider
seek	Robot_Control/src/Squawk.cpp	/^    void seek(size_t offset) { p_cursor = p_start + offset; }$/;"	f	class:StreamROM
seek	Robot_Control/src/SquawkSD.cpp	/^    void seek(size_t offset) { f.seekSet(offset); }$/;"	f	class:StreamFile
seek	SD/src/File.cpp	/^boolean File::seek(uint32_t pos) {$/;"	f	class:File
seekCur	Robot_Control/src/Fat16.h	/^  uint8_t seekCur(uint32_t pos) {return seekSet(curPosition_ + pos);}$/;"	f	class:Fat16
seekCur	SD/src/utility/SdFat.h	/^  uint8_t seekCur(uint32_t pos) {$/;"	f	class:SdFile
seekEnd	Robot_Control/src/Fat16.h	/^  uint8_t seekEnd(void) {return seekSet(fileSize_);}$/;"	f	class:Fat16
seekEnd	SD/src/utility/SdFat.h	/^  uint8_t seekEnd(void) {return seekSet(fileSize_);}$/;"	f	class:SdFile
seekSet	Robot_Control/src/Fat16.cpp	/^uint8_t Fat16::seekSet(uint32_t pos) {$/;"	f	class:Fat16
seekSet	SD/src/utility/SdFile.cpp	/^uint8_t SdFile::seekSet(uint32_t pos) {$/;"	f	class:SdFile
selectLetter	Robot_Control/src/utility/RobotTextManager.cpp	/^char TextManager::selectLetter(){$/;"	f	class:TextManager
selectPin	Robot_Control/src/Multiplexer.cpp	/^void Multiplexer::selectPin(uint8_t num){$/;"	f	class:Multiplexer
selectPin	Robot_Motor/src/Multiplexer.cpp	/^void Multiplexer::selectPin(uint8_t num){$/;"	f	class:Multiplexer
selectors	Robot_Control/src/Multiplexer.h	/^		uint8_t selectors[4];$/;"	m	class:Multiplexer
selectors	Robot_Motor/src/Multiplexer.h	/^		uint8_t selectors[4];$/;"	m	class:Multiplexer
send	Ethernet/src/utility/socket.cpp	/^uint16_t send(SOCKET s, const uint8_t * buf, uint16_t len)$/;"	f
send	LiquidCrystal/src/LiquidCrystal.cpp	/^void LiquidCrystal::send(uint8_t value, uint8_t mode) {$/;"	f	class:LiquidCrystal
sendAnalog	Firmata/Firmata.cpp	/^void FirmataClass::sendAnalog(byte pin, int value)$/;"	f	class:FirmataClass
sendData	Robot_Control/src/EasyTransfer2.cpp	/^void EasyTransfer2::sendData(){$/;"	f	class:EasyTransfer2
sendData	Robot_Motor/src/EasyTransfer2.cpp	/^void EasyTransfer2::sendData(){$/;"	f	class:EasyTransfer2
sendDigital	Firmata/Firmata.cpp	/^void FirmataClass::sendDigital(byte pin, int value)$/;"	f	class:FirmataClass
sendDigitalPort	Firmata/Firmata.cpp	/^void FirmataClass::sendDigitalPort(byte portNumber, int portData)$/;"	f	class:FirmataClass
sendString	Firmata/Firmata.cpp	/^void FirmataClass::sendString(byte command, const char *string)$/;"	f	class:FirmataClass
sendString	Firmata/Firmata.cpp	/^void FirmataClass::sendString(const char *string)$/;"	f	class:FirmataClass
sendSysex	Firmata/Firmata.cpp	/^void FirmataClass::sendSysex(byte command, byte bytec, byte *bytev)$/;"	f	class:FirmataClass
sendUDP	Ethernet/src/utility/socket.cpp	/^int sendUDP(SOCKET s)$/;"	f
sendValueAsTwo7bitBytes	Firmata/Firmata.cpp	/^void FirmataClass::sendValueAsTwo7bitBytes(int value)$/;"	f	class:FirmataClass
send_DHCP_MESSAGE	Ethernet/src/Dhcp.cpp	/^void DhcpClass::send_DHCP_MESSAGE(uint8_t messageType, uint16_t secondsElapsed)$/;"	f	class:DhcpClass
send_data_processing	Ethernet/src/utility/w5100.cpp	/^void W5100Class::send_data_processing(SOCKET s, const uint8_t *data, uint16_t len)$/;"	f	class:W5100Class
send_data_processing_offset	Ethernet/src/utility/w5100.cpp	/^void W5100Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)$/;"	f	class:W5100Class
sendto	Ethernet/src/utility/socket.cpp	/^uint16_t sendto(SOCKET s, const uint8_t *buf, uint16_t len, uint8_t *addr, uint16_t port)$/;"	f
sensor_blanco	Robot_Motor/src/LineFollow.h	/^		int sensor_blanco[5];$/;"	m	class:LineFollow
sensor_negro	Robot_Motor/src/LineFollow.h	/^		int sensor_negro[5];$/;"	m	class:LineFollow
serialBytesToRead	Firmata/utility/SerialFirmata.h	/^    int serialBytesToRead[SERIAL_READ_ARR_LEN];$/;"	m	class:SerialFirmata
serialEventRun	arduino/HardwareSerial.cpp	/^void serialEventRun(void)$/;"	f
serialIndex	Firmata/utility/SerialFirmata.h	/^    signed char serialIndex;$/;"	m	class:SerialFirmata
serial_pins	Firmata/utility/SerialFirmata.h	/^  struct serial_pins {$/;"	s	namespace:__anon3
server_h	arduino/Server.h	21;"	d
servoIndex	Servo/src/Servo.h	/^   uint8_t servoIndex;               \/\/ index into the channel data for this servo$/;"	m	class:Servo
servo_t	Servo/src/Servo.h	/^} servo_t;$/;"	t	typeref:struct:__anon34
servos	Servo/src/avr/Servo.cpp	/^static servo_t servos[MAX_SERVOS];                          \/\/ static array of servo structures$/;"	v	file:
servos	Servo/src/sam/Servo.cpp	/^static servo_t servos[MAX_SERVOS];                          \/\/ static array of servo structures$/;"	v	file:
servos	Servo/src/samd/Servo.cpp	/^static servo_t servos[MAX_SERVOS];                         \/\/ static array of servo structures$/;"	v	file:
setAddrWindow	Robot_Control/src/Arduino_LCD.cpp	/^void Arduino_LCD::setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1,$/;"	f	class:Arduino_LCD
setAddrWindow	TFT/src/utility/Adafruit_ST7735.cpp	/^void Adafruit_ST7735::setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1,$/;"	f	class:Adafruit_ST7735
setBand	GSM/src/GSM3ShieldV1BandManagement.cpp	/^bool GSM3ShieldV1BandManagement::setBand(String band)$/;"	f	class:GSM3ShieldV1BandManagement
setBitOrder	SPI/src/SPI.h	/^  inline static void setBitOrder(uint8_t bitOrder) {$/;"	f	class:SPIClass
setCharAt	arduino/WString.cpp	/^void String::setCharAt(unsigned int loc, char c) $/;"	f	class:String
setClock	Wire/src/Wire.cpp	/^void TwoWire::setClock(uint32_t clock)$/;"	f	class:TwoWire
setClockDivider	SPI/src/SPI.h	/^  inline static void setClockDivider(uint8_t clockDiv) {$/;"	f	class:SPIClass
setCommandCounter	GSM/src/GSM3ShieldV1ModemCore.h	/^		void setCommandCounter(uint8_t c){commandCounter=c;};$/;"	f	class:GSM3ShieldV1ModemCore
setCommandError	GSM/src/GSM3ShieldV1ModemCore.h	/^		void setCommandError(uint8_t n){commandError=n;};$/;"	f	class:GSM3ShieldV1ModemCore
setCursor	LiquidCrystal/src/LiquidCrystal.cpp	/^void LiquidCrystal::setCursor(uint8_t col, uint8_t row)$/;"	f	class:LiquidCrystal
setCursor	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::setCursor(int16_t x, int16_t y) {$/;"	f	class:Adafruit_GFX
setCursor	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::setCursor(int16_t x, int16_t y) $/;"	f	class:Adafruit_GFX
setDataMode	SPI/src/SPI.h	/^  inline static void setDataMode(uint8_t dataMode) {$/;"	f	class:SPIClass
setDebug	GSM/src/GSM3ShieldV1ModemCore.h	/^		void setDebug(bool db){_debug=db;};$/;"	f	class:GSM3ShieldV1ModemCore
setFirmwareNameAndVersion	Firmata/Firmata.cpp	/^void FirmataClass::setFirmwareNameAndVersion(const char *name, byte major, byte minor)$/;"	f	class:FirmataClass
setFirmwareVersion	Firmata/Firmata.h	222;"	d
setFlushInterval	Firmata/utility/BLEStream.h	/^void BLEStream::setFlushInterval(int interval)$/;"	f	class:BLEStream
setGatewayIp	Ethernet/src/utility/w5100.h	/^void W5100Class::setGatewayIp(uint8_t *_addr) {$/;"	f	class:W5100Class
setIPAddress	Ethernet/src/utility/w5100.h	/^void W5100Class::setIPAddress(uint8_t *_addr) {$/;"	f	class:W5100Class
setInputPool	Robot_Control/src/utility/RobotTextManager.cpp	/^void TextManager::setInputPool(int code){$/;"	f	class:TextManager
setMACAddress	Ethernet/src/utility/w5100.h	/^void W5100Class::setMACAddress(uint8_t *_addr) {$/;"	f	class:W5100Class
setMargin	Robot_Control/src/utility/RobotTextManager.cpp	/^void TextManager::setMargin(int margin_left,int margin_top){$/;"	f	class:TextManager
setMode	Robot_Control/src/ArduinoRobot.cpp	/^void RobotControl::setMode(uint8_t mode){$/;"	f	class:RobotControl
setMode	Robot_Motor/src/ArduinoRobotMotorBoard.cpp	/^void RobotMotorBoard::setMode(uint8_t mode){$/;"	f	class:RobotMotorBoard
setOngoingCommand	GSM/src/GSM3ShieldV1ModemCore.h	/^		void setOngoingCommand(GSM3_commandType_e c){ongoingCommand=c;};$/;"	f	class:GSM3ShieldV1ModemCore
setPINUsed	GSM/src/GSM3ShieldV1PinManagement.cpp	/^void GSM3ShieldV1PinManagement::setPINUsed(bool used)$/;"	f	class:GSM3ShieldV1PinManagement
setPhoneNumber	GSM/src/GSM3ShieldV1ModemCore.h	/^		void setPhoneNumber(char *n){phoneNumber=n;};$/;"	f	class:GSM3ShieldV1ModemCore
setPinMode	Firmata/Firmata.cpp	/^void FirmataClass::setPinMode(byte pin, byte config)$/;"	f	class:FirmataClass
setPinMode	SD/src/utility/Sd2PinMap.h	/^  void setPinMode(uint8_t pin, uint8_t mode) {$/;"	f
setPinState	Firmata/Firmata.cpp	/^void FirmataClass::setPinState(byte pin, int state)$/;"	f	class:FirmataClass
setPort	GSM/src/GSM3ShieldV1ModemCore.h	/^		void setPort(int p){port=p;};$/;"	f	class:GSM3ShieldV1ModemCore
setRX	GSM/src/GSM3SoftSerial.cpp	/^void GSM3SoftSerial::setRX()$/;"	f	class:GSM3SoftSerial
setRX	SoftwareSerial/src/SoftwareSerial.cpp	/^void SoftwareSerial::setRX(uint8_t rx)$/;"	f	class:SoftwareSerial
setRetransmissionCount	Ethernet/src/utility/w5100.h	/^void W5100Class::setRetransmissionCount(uint8_t _retry) {$/;"	f	class:W5100Class
setRetransmissionTime	Ethernet/src/utility/w5100.h	/^void W5100Class::setRetransmissionTime(uint16_t _timeout) {$/;"	f	class:W5100Class
setRotation	Robot_Control/src/Arduino_LCD.cpp	/^void Arduino_LCD::setRotation(uint8_t m) {$/;"	f	class:Arduino_LCD
setRotation	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::setRotation(uint8_t x) {$/;"	f	class:Adafruit_GFX
setRotation	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::setRotation(uint8_t x) $/;"	f	class:Adafruit_GFX
setRotation	TFT/src/utility/Adafruit_ST7735.cpp	/^void Adafruit_ST7735::setRotation(uint8_t m) {$/;"	f	class:Adafruit_ST7735
setRowOffsets	LiquidCrystal/src/LiquidCrystal.cpp	/^void LiquidCrystal::setRowOffsets(int row0, int row1, int row2, int row3)$/;"	f	class:LiquidCrystal
setRxIntMsk	SoftwareSerial/src/SoftwareSerial.cpp	/^void SoftwareSerial::setRxIntMsk(bool enable)$/;"	f	class:SoftwareSerial
setSS	Ethernet/src/utility/w5100.h	/^	inline static void setSS() { digitalWrite(10, LOW); };$/;"	f	class:W5100Class
setSS	Ethernet/src/utility/w5100.h	/^      inline static void setSS()     { PORTB &= ~_BV(0); };$/;"	f	class:W5100Class
setSS	Ethernet/src/utility/w5100.h	/^      inline static void setSS()     { PORTB &= ~_BV(2); };$/;"	f	class:W5100Class
setSS	Ethernet/src/utility/w5100.h	/^      inline static void setSS()     { PORTB &= ~_BV(4); };$/;"	f	class:W5100Class
setSS	Ethernet/src/utility/w5100.h	/^      inline static void setSS()     { PORTB &= ~_BV(6); };$/;"	f	class:W5100Class
setSS	Ethernet/src/utility/w5100.h	/^    inline static void setSS()   {$/;"	f	class:W5100Class
setSckRate	SD/src/utility/Sd2Card.cpp	/^uint8_t Sd2Card::setSckRate(uint8_t sckRateID) {$/;"	f	class:Sd2Card
setSpeed	Stepper/src/Stepper.cpp	/^void Stepper::setSpeed(long whatSpeed)$/;"	f	class:Stepper
setSpiClock	SD/src/utility/Sd2Card.cpp	/^uint8_t Sd2Card::setSpiClock(uint32_t clock)$/;"	f	class:Sd2Card
setStatus	GSM/src/GSM3ShieldV1ModemCore.h	/^		inline void setStatus(GSM3_NetworkStatus_t status) { _status = status; };$/;"	f	class:GSM3ShieldV1ModemCore
setSubnetMask	Ethernet/src/utility/w5100.h	/^void W5100Class::setSubnetMask(uint8_t *_addr) {$/;"	f	class:W5100Class
setTX	GSM/src/GSM3SoftSerial.cpp	/^void GSM3SoftSerial::setTX()$/;"	f	class:GSM3SoftSerial
setTX	SoftwareSerial/src/SoftwareSerial.cpp	/^void SoftwareSerial::setTX(uint8_t tx)$/;"	f	class:SoftwareSerial
setTextColor	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::setTextColor(uint16_t c) {$/;"	f	class:Adafruit_GFX
setTextColor	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::setTextColor(uint16_t c, uint16_t b) {$/;"	f	class:Adafruit_GFX
setTextColor	TFT/src/utility/Adafruit_GFX.cpp	/^ void Adafruit_GFX::setTextColor(uint16_t c, uint16_t b) $/;"	f	class:Adafruit_GFX
setTextColor	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::setTextColor(uint16_t c) {$/;"	f	class:Adafruit_GFX
setTextSize	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::setTextSize(uint8_t s) {$/;"	f	class:Adafruit_GFX
setTextSize	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::setTextSize(uint8_t s) $/;"	f	class:Adafruit_GFX
setTextWrap	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::setTextWrap(boolean w) {$/;"	f	class:Adafruit_GFX
setTextWrap	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::setTextWrap(boolean w) $/;"	f	class:Adafruit_GFX
setTimeout	arduino/Stream.cpp	/^void Stream::setTimeout(unsigned long timeout)  \/\/ sets the maximum number of milliseconds to wait$/;"	f	class:Stream
setUnbufferedRead	SD/src/utility/SdFat.h	/^  void setUnbufferedRead(void) {$/;"	f	class:SdFile
setWriteError	arduino/Print.h	/^    void setWriteError(int err = 1) { write_error = err; }$/;"	f	class:Print
set_motorBoardData	Robot_Control/src/Sensors.cpp	/^void RobotControl::set_motorBoardData(uint8_t port, int data){$/;"	f	class:RobotControl
settings	SD/src/utility/Sd2Card.cpp	/^static SPISettings settings;$/;"	v	file:
setup	HID/src/HID.cpp	/^bool HID_::setup(USBSetup& setup)$/;"	f	class:HID_
setup	arduino/PluggableUSB.cpp	/^bool PluggableUSB_::setup(USBSetup& setup)$/;"	f	class:PluggableUSB_
setupUSB	arduino/main.cpp	/^void setupUSB() { }$/;"	f
setvoiceCallStatus	GSM/src/GSM3ShieldV1VoiceProvider.h	/^		void setvoiceCallStatus(GSM3_voiceCall_st status) { _voiceCallstatus = status; };$/;"	f	class:GSM3ShieldV1VoiceProvider
shiftIn	arduino/wiring_shift.c	/^uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {$/;"	f
shiftOut	arduino/wiring_shift.c	/^void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)$/;"	f
showColor	Robot_Control/src/utility/VirtualKeyboard.h	/^		uint16_t showColor;$/;"	m	class:VirtualKeyboard
showPicture	Robot_Control/src/utility/RobotTextManager.cpp	/^void TextManager::showPicture(char * filename, int posX, int posY){$/;"	f	class:TextManager
shutdown	GSM/src/GSM3MobileMockupProvider.h	/^		inline bool shutdown(){return false;};$/;"	f	class:GSM3MobileMockupProvider
shutdown	GSM/src/GSM3ShieldV1AccessProvider.cpp	/^bool GSM3ShieldV1AccessProvider::shutdown()$/;"	f	class:GSM3ShieldV1AccessProvider
siaddr	Ethernet/src/Dhcp.h	/^	uint8_t  siaddr[4];$/;"	m	struct:_RIP_MSG_FIXED
size	Robot_Control/src/EasyTransfer2.h	/^uint8_t size; \/\/size of data in bytes. Both for read and send$/;"	m	class:EasyTransfer2
size	Robot_Motor/src/EasyTransfer2.h	/^uint8_t size; \/\/size of data in bytes. Both for read and send$/;"	m	class:EasyTransfer2
size	SD/src/File.cpp	/^uint32_t File::size() {$/;"	f	class:File
socket	Ethernet/src/utility/socket.cpp	/^uint8_t socket(SOCKET s, uint8_t protocol, uint16_t port, uint8_t flag)$/;"	f
socketDataSize	GSM/src/GSM3ShieldV1.h	/^		int socketDataSize; 		\/\/Size of socket data to be read.$/;"	m	class:GSM3ShieldV1
socketDataSizeWritten	GSM/src/GSM3ShieldV1.h	/^		int socketDataSizeWritten;  \/\/Number of socket data written in buffer not to overflow the buffer$/;"	m	class:GSM3ShieldV1
socketStatus	Ethernet/src/utility/socket.cpp	/^uint8_t socketStatus(SOCKET s)$/;"	f
sockets	GSM/src/GSM3MobileClientProvider.h	/^		uint8_t sockets;$/;"	m	class:GSM3MobileClientProvider
sockets	GSM/src/GSM3ShieldV1MultiClientProvider.h	/^		uint16_t sockets;$/;"	m	class:GSM3ShieldV1MultiClientProvider
socketsAccepted	GSM/src/GSM3ShieldV1.h	/^		int socketsAccepted;		\/\/Status for remote clients accepted of closed.$/;"	m	class:GSM3ShieldV1
socketsAccepted	GSM/src/GSM3ShieldV1MultiServerProvider.h	/^		uint8_t socketsAccepted;$/;"	m	class:GSM3ShieldV1MultiServerProvider
socketsAsServer	GSM/src/GSM3MobileNetworkProvider.h	/^		uint16_t socketsAsServer; \/\/ Server socket$/;"	m	class:GSM3MobileNetworkProvider
socketsAsServer	GSM/src/GSM3ShieldV1MultiServerProvider.h	/^		uint8_t socketsAsServer;$/;"	m	class:GSM3ShieldV1MultiServerProvider
sort	Robot_Control/src/keyboard.cpp	/^void sort(int* v){$/;"	f
spaceAvailable	GSM/src/GSM3CircularBuffer.cpp	/^void GSM3CircularBufferManager::spaceAvailable(){return;};$/;"	f	class:GSM3CircularBufferManager
spaceAvailable	GSM/src/GSM3SoftSerial.cpp	/^void GSM3SoftSerial::spaceAvailable()$/;"	f	class:GSM3SoftSerial
spcr	SPI/src/SPI.h	/^  uint8_t spcr;$/;"	m	class:SPISettings
speed	Robot_Control/src/Squawk.cpp	/^static uint8_t  speed;$/;"	v	file:
speed_	Robot_Control/src/SdCard.h	/^  uint8_t speed_;$/;"	m	class:SdCard
spiRec	Robot_Control/src/SdCard.cpp	/^STATIC_NOINLINE uint8_t spiRec(void) {$/;"	f
spiRec	SD/src/utility/Sd2Card.cpp	/^static  uint8_t spiRec(void) {$/;"	f	file:
spiRec	SD/src/utility/Sd2Card.cpp	/^uint8_t spiRec(void) {$/;"	f
spiSend	Robot_Control/src/SdCard.cpp	/^STATIC_NOINLINE void spiSend(uint8_t b) {$/;"	f
spiSend	SD/src/utility/Sd2Card.cpp	/^static void spiSend(uint8_t b) {$/;"	f	file:
spiSend	SD/src/utility/Sd2Card.cpp	/^void spiSend(uint8_t data) {$/;"	f
spisettings	TFT/src/utility/Adafruit_ST7735.h	/^  SPISettings spisettings;$/;"	m	class:Adafruit_ST7735
spiwrite	Robot_Control/src/Arduino_LCD.cpp	/^inline void Arduino_LCD::spiwrite(uint8_t c) {$/;"	f	class:Arduino_LCD
spiwrite	TFT/src/utility/Adafruit_ST7735.cpp	/^inline void Adafruit_ST7735::spiwrite(uint8_t c) {$/;"	f	class:Adafruit_ST7735
spsr	SPI/src/SPI.h	/^  uint8_t spsr;$/;"	m	class:SPISettings
sq	arduino/Arduino.h	99;"	d
squawk_playroutine	Robot_Control/src/Squawk.cpp	/^__attribute__((used)) void squawk_playroutine() {$/;"	f
ssid	Firmata/examples/StandardFirmataWiFi/wifiConfig.h	/^char ssid[] = "your_network_name";$/;"	v
startSysex	Firmata/Firmata.cpp	/^void FirmataClass::startSysex(void)$/;"	f	class:FirmataClass
startUDP	Ethernet/src/utility/socket.cpp	/^int startUDP(SOCKET s, uint8_t* addr, uint16_t port)$/;"	f
startsWith	arduino/WString.cpp	/^unsigned char String::startsWith( const String &s2 ) const$/;"	f	class:String
startsWith	arduino/WString.cpp	/^unsigned char String::startsWith( const String &s2, unsigned int offset ) const$/;"	f	class:String
status	Ethernet/src/EthernetClient.cpp	/^uint8_t EthernetClient::status() {$/;"	f	class:EthernetClient
status	Firmata/utility/WiFiStream.h	/^  inline uint8_t status()$/;"	f	class:WiFiStream
status_	SD/src/utility/Sd2Card.h	/^  uint8_t status_;$/;"	m	class:Sd2Card
step	Stepper/src/Stepper.cpp	/^void Stepper::step(int steps_to_move)$/;"	f	class:Stepper
stepMotor	Stepper/src/Stepper.cpp	/^void Stepper::stepMotor(int thisStep)$/;"	f	class:Stepper
step_delay	Stepper/src/Stepper.h	/^    unsigned long step_delay; \/\/ delay between steps, in ms, based on speed$/;"	m	class:Stepper
step_number	Stepper/src/Stepper.h	/^    int step_number;          \/\/ which step the motor is on$/;"	m	class:Stepper
stop	Ethernet/src/EthernetClient.cpp	/^void EthernetClient::stop() {$/;"	f	class:EthernetClient
stop	Ethernet/src/EthernetUdp.cpp	/^void EthernetUDP::stop()$/;"	f	class:EthernetUDP
stop	Firmata/utility/EthernetClientStream.h	/^EthernetClientStream::stop()$/;"	f	class:EthernetClientStream
stop	Firmata/utility/WiFiClientStream.h	/^  virtual inline void stop()$/;"	f	class:WiFiClientStream
stop	Firmata/utility/WiFiServerStream.h	/^  virtual inline void stop()$/;"	f	class:WiFiServerStream
stop	GSM/src/GSM3MobileClientService.cpp	/^void GSM3MobileClientService::stop()$/;"	f	class:GSM3MobileClientService
stop	GSM/src/GSM3MobileServerService.cpp	/^void GSM3MobileServerService::stop()$/;"	f	class:GSM3MobileServerService
stop	Robot_Control/src/Squawk.cpp	/^void SquawkSynth::stop() {$/;"	f	class:SquawkSynth
stopCurrentActions	Robot_Motor/src/ArduinoRobotMotorBoard.cpp	/^void RobotMotorBoard::stopCurrentActions(){$/;"	f	class:RobotMotorBoard
stopListening	SoftwareSerial/src/SoftwareSerial.cpp	/^bool SoftwareSerial::stopListening()$/;"	f	class:SoftwareSerial
stopPlayFile	Robot_Control/src/Melody.cpp	/^void RobotControl::stopPlayFile(){$/;"	f	class:RobotControl
stopbits	arduino/CDC.cpp	/^uint8_t Serial_::stopbits() {$/;"	f	class:Serial_
storedBytes	GSM/src/GSM3CircularBuffer.h	/^		inline byte storedBytes(){ return ((tail-head)&__BUFFERMASK__);};$/;"	f	class:GSM3CircularBuffer
storedInputData	Firmata/Firmata.h	/^    byte storedInputData[MAX_DATA_BYTES]; \/\/ multi-byte data$/;"	m	class:FirmataClass
str	arduino/Stream.h	/^    const char *str;  \/\/ string you're searching for$/;"	m	struct:Stream::MultiTarget
stream	Firmata/examples/StandardFirmataBLE/bleConfig.h	/^BLEStream stream;$/;"	v
stream	Robot_Control/src/Squawk.cpp	/^static SquawkStream *stream;$/;"	v	file:
stream_base	Robot_Control/src/Squawk.cpp	/^static uint16_t stream_base;$/;"	v	file:
stringCallbackFunction	Firmata/Firmata.h	/^  typedef void (*stringCallbackFunction)(char *);$/;"	t
strobeBlinkPin	Firmata/Firmata.cpp	/^void FirmataClass::strobeBlinkPin(byte pin, int count, int onInterval, int offInterval)$/;"	f	class:FirmataClass
stroke	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::stroke(color c) {$/;"	f	class:Adafruit_GFX
stroke	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::stroke(uint8_t red, uint8_t green, uint8_t blue) {$/;"	f	class:Adafruit_GFX
stroke	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::stroke(color c) $/;"	f	class:Adafruit_GFX
stroke	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::stroke(uint8_t red, uint8_t green, uint8_t blue) $/;"	f	class:Adafruit_GFX
strokeColor	Robot_Control/src/utility/Adafruit_GFX.h	/^  color strokeColor;$/;"	m	class:Adafruit_GFX
strokeColor	TFT/src/utility/Adafruit_GFX.h	/^  color strokeColor;$/;"	m	class:Adafruit_GFX
subnetMask	Ethernet/src/Dhcp.h	/^	subnetMask		=	1,$/;"	e	enum:__anon1
subnetMask	Ethernet/src/Ethernet.cpp	/^IPAddress EthernetClass::subnetMask()$/;"	f	class:EthernetClass
substring	arduino/WString.cpp	/^String String::substring(unsigned int left, unsigned int right) const$/;"	f	class:String
substring	arduino/WString.h	/^	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };$/;"	f	class:String
subtract_cap	SoftwareSerial/src/SoftwareSerial.cpp	/^uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {$/;"	f	class:SoftwareSerial
subtype	arduino/USBCore.h	/^	u8 subtype;$/;"	m	struct:__anon20
subtype	arduino/USBCore.h	/^	u8 subtype;$/;"	m	struct:__anon21
subtype	arduino/USBCore.h	/^    u8 	subtype;	\/\/ 1$/;"	m	struct:__anon22
subtype	arduino/USBCore.h	/^    u8 	subtype;	\/\/ 1$/;"	m	struct:__anon23
swSerial0	Firmata/utility/SerialFirmata.h	/^    Stream *swSerial0;$/;"	m	class:SerialFirmata
swSerial1	Firmata/utility/SerialFirmata.h	/^    Stream *swSerial1;$/;"	m	class:SerialFirmata
swSerial2	Firmata/utility/SerialFirmata.h	/^    Stream *swSerial2;$/;"	m	class:SerialFirmata
swSerial3	Firmata/utility/SerialFirmata.h	/^    Stream *swSerial3;$/;"	m	class:SerialFirmata
swap	Robot_Control/src/utility/Adafruit_GFX.h	28;"	d
swap	TFT/src/utility/Adafruit_GFX.h	63;"	d
swapcolor	TFT/src/utility/Adafruit_ST7735.cpp	/^inline uint16_t swapcolor(uint16_t x) { $/;"	f
switchPIN	GSM/src/GSM3ShieldV1PinManagement.cpp	/^void GSM3ShieldV1PinManagement::switchPIN(String pin)$/;"	f	class:GSM3ShieldV1PinManagement
sync	Robot_Control/src/Fat16.cpp	/^uint8_t Fat16::sync(void) {$/;"	f	class:Fat16
sync	SD/src/utility/SdFile.cpp	/^uint8_t SdFile::sync(void) {$/;"	f	class:SdFile
sysexBytesRead	Firmata/Firmata.h	/^    int sysexBytesRead;$/;"	m	class:FirmataClass
sysexCallbackFunction	Firmata/Firmata.h	/^  typedef void (*sysexCallbackFunction)(byte command, byte argc, byte *argv);$/;"	t
systemReset	Firmata/Firmata.cpp	/^void FirmataClass::systemReset(void)$/;"	f	class:FirmataClass
systemResetCallbackFunction	Firmata/Firmata.h	/^  typedef void (*systemResetCallbackFunction)(void);$/;"	t
taac	Robot_Control/src/SdInfo.h	/^  uint8_t taac;$/;"	m	struct:CSD
taac	SD/src/utility/SdInfo.h	/^  uint8_t taac;$/;"	m	struct:CSDV1
taac	SD/src/utility/SdInfo.h	/^  uint8_t taac;$/;"	m	struct:CSDV2
tabcolor	TFT/src/utility/Adafruit_ST7735.h	/^  uint8_t  tabcolor;$/;"	m	class:Adafruit_ST7735
table	GSM/src/GSM3SoftSerial.cpp	/^static const DELAY_TABLE PROGMEM table[] = $/;"	v	file:
table	GSM/src/GSM3SoftSerial.cpp	/^static const DELAY_TABLE PROGMEM table[] =$/;"	v	file:
tail	GSM/src/GSM3CircularBuffer.h	/^		volatile byte tail; \/\/ Last written one. $/;"	m	class:GSM3CircularBuffer
takeMilliseconds	GSM/src/GSM3ShieldV1ModemCore.cpp	/^unsigned long GSM3ShieldV1ModemCore::takeMilliseconds()$/;"	f	class:GSM3ShieldV1ModemCore
tempo	Robot_Control/src/Squawk.cpp	/^void SquawkSynth::tempo(uint16_t new_tempo) {$/;"	f	class:SquawkSynth
tempoWrite	Robot_Control/src/Melody.cpp	/^void RobotControl::tempoWrite(int tempo){$/;"	f	class:RobotControl
text	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::text(char value, uint8_t x, uint8_t y){$/;"	f	class:Adafruit_GFX
text	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::text(const char * text, int16_t x, int16_t y) {$/;"	f	class:Adafruit_GFX
text	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::text(int value, uint8_t x, uint8_t y){$/;"	f	class:Adafruit_GFX
text	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::text(long value, uint8_t x, uint8_t y){$/;"	f	class:Adafruit_GFX
text	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::text(const char * text, int16_t x, int16_t y) $/;"	f	class:Adafruit_GFX
textManager	Robot_Control/src/utility/RobotTextManager.cpp	/^TextManager textManager=TextManager();$/;"	v
textSize	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::textSize(uint8_t size) {$/;"	f	class:Adafruit_GFX
textSize	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::textSize(uint8_t size) $/;"	f	class:Adafruit_GFX
textWrap	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::textWrap(const char * text, int16_t x, int16_t y) {$/;"	f	class:Adafruit_GFX
textWrap	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::textWrap(const char * text, int16_t x, int16_t y) $/;"	f	class:Adafruit_GFX
textbgcolor	Robot_Control/src/utility/Adafruit_GFX.h	/^    textcolor, textbgcolor;$/;"	m	class:Adafruit_GFX
textbgcolor	TFT/src/utility/Adafruit_GFX.h	/^	textcolor, textbgcolor;$/;"	m	class:Adafruit_GFX
textcolor	Robot_Control/src/utility/Adafruit_GFX.h	/^    textcolor, textbgcolor;$/;"	m	class:Adafruit_GFX
textcolor	TFT/src/utility/Adafruit_GFX.h	/^	textcolor, textbgcolor;$/;"	m	class:Adafruit_GFX
textsize	Robot_Control/src/utility/Adafruit_GFX.h	/^    textsize,$/;"	m	class:Adafruit_GFX
textsize	TFT/src/utility/Adafruit_GFX.h	/^	textsize,$/;"	m	class:Adafruit_GFX
theBuffer	GSM/src/GSM3CircularBuffer.h	/^		volatile byte theBuffer[__BUFFERSIZE__];$/;"	m	class:GSM3CircularBuffer
theBuffer	GSM/src/GSM3ShieldV1ModemCore.h	/^		inline GSM3CircularBuffer& theBuffer(){return gss.cb;};$/;"	f	class:GSM3ShieldV1ModemCore
theGSM3MobileAccessProvider	GSM/src/GSM3MobileAccessProvider.cpp	/^GSM3MobileAccessProvider* theGSM3MobileAccessProvider;$/;"	v
theGSM3MobileClientProvider	GSM/src/GSM3MobileClientProvider.cpp	/^GSM3MobileClientProvider* theGSM3MobileClientProvider;$/;"	v
theGSM3MobileServerProvider	GSM/src/GSM3MobileServerProvider.cpp	/^GSM3MobileServerProvider* theGSM3MobileServerProvider;$/;"	v
theGSM3MobileVoiceProvider	GSM/src/GSM3MobileVoiceProvider.cpp	/^GSM3MobileVoiceProvider* theGSM3MobileVoiceProvider;$/;"	v
theGSM3SMSProvider	GSM/src/GSM3MobileSMSProvider.cpp	/^GSM3MobileSMSProvider* theGSM3SMSProvider;$/;"	v
theGSM3ShieldV1ModemCore	GSM/src/GSM3ShieldV1ModemCore.cpp	/^GSM3ShieldV1ModemCore theGSM3ShieldV1ModemCore;$/;"	v
theMobileNetworkRegistry	GSM/src/GSM3MobileNetworkRegistry.cpp	/^GSM3MobileNetworkRegistry theMobileNetworkRegistry;$/;"	v
theProvider	GSM/src/GSM3MobileNetworkProvider.cpp	/^GSM3MobileNetworkProvider* theProvider;$/;"	v
theProvider	GSM/src/GSM3MobileNetworkRegistry.h	/^		GSM3MobileNetworkProvider* theProvider; \/\/ Network provider$/;"	m	class:GSM3MobileNetworkRegistry
theShieldV1ClientProvider	GSM/src/GSM3MobileClientService.cpp	/^GSM3ShieldV1ClientProvider theShieldV1ClientProvider;$/;"	v
theShieldV1SMSProvider	GSM/src/GSM3SMSService.cpp	/^GSM3ShieldV1SMSProvider theShieldV1SMSProvider;$/;"	v
theShieldV1ServerProvider	GSM/src/GSM3MobileServerService.cpp	/^GSM3ShieldV1ServerProvider theShieldV1ServerProvider;$/;"	v
theShieldV1VoiceProvider	GSM/src/GSM3VoiceCallService.cpp	/^GSM3ShieldV1VoiceProvider theShieldV1VoiceProvider;$/;"	v
tick	Robot_Control/src/Squawk.cpp	/^static uint8_t  tick;$/;"	v	file:
tick_rate	Robot_Control/src/Squawk.cpp	/^static uint16_t tick_rate = 50;$/;"	v	file:
ticks	Servo/src/Servo.h	/^  volatile unsigned int ticks;$/;"	m	struct:__anon34
ticksToUs	Servo/src/avr/Servo.cpp	28;"	d	file:
ticksToUs	Servo/src/sam/Servo.cpp	25;"	d	file:
ticksToUs	Servo/src/samd/Servo.cpp	25;"	d	file:
time_connect	Firmata/utility/EthernetClientStream.h	/^    uint32_t time_connect;$/;"	m	class:EthernetClientStream
timedPeek	arduino/Stream.cpp	/^int Stream::timedPeek()$/;"	f	class:Stream
timedRead	arduino/Stream.cpp	/^int Stream::timedRead()$/;"	f	class:Stream
timer	Robot_IR_Remote/src/IRremoteInt.h	/^  unsigned int timer;     \/\/ state timer, counts 50uS ticks.$/;"	m	struct:__anon2
timer0_fract	arduino/wiring.c	/^static unsigned char timer0_fract = 0;$/;"	v	file:
timer0_millis	arduino/wiring.c	/^volatile unsigned long timer0_millis = 0;$/;"	v
timer0_overflow_count	arduino/wiring.c	/^volatile unsigned long timer0_overflow_count = 0;$/;"	v
timer0_pin_mask	arduino/Tone.cpp	/^volatile uint8_t timer0_pin_mask;$/;"	v
timer0_pin_port	arduino/Tone.cpp	/^volatile uint8_t *timer0_pin_port;$/;"	v
timer0_toggle_count	arduino/Tone.cpp	/^volatile long timer0_toggle_count;$/;"	v
timer16_Sequence_t	Servo/src/avr/ServoTimers.h	/^typedef enum { _timer1, _Nbr_16timers } timer16_Sequence_t;$/;"	t	typeref:enum:__anon27
timer16_Sequence_t	Servo/src/avr/ServoTimers.h	/^typedef enum { _timer1, _Nbr_16timers } timer16_Sequence_t;$/;"	t	typeref:enum:__anon30
timer16_Sequence_t	Servo/src/avr/ServoTimers.h	/^typedef enum { _timer3, _timer1, _Nbr_16timers } timer16_Sequence_t;$/;"	t	typeref:enum:__anon28
timer16_Sequence_t	Servo/src/avr/ServoTimers.h	/^typedef enum { _timer3, _timer1, _Nbr_16timers } timer16_Sequence_t;$/;"	t	typeref:enum:__anon29
timer16_Sequence_t	Servo/src/avr/ServoTimers.h	/^typedef enum { _timer5, _timer1, _timer3, _timer4, _Nbr_16timers } timer16_Sequence_t;$/;"	t	typeref:enum:__anon26
timer16_Sequence_t	Servo/src/sam/ServoTimers.h	/^typedef enum { _timer1, _timer2, _timer3, _timer4, _timer5, _Nbr_16timers } timer16_Sequence_t ;$/;"	t	typeref:enum:__anon31
timer16_Sequence_t	Servo/src/samd/ServoTimers.h	/^    _Nbr_16timers } timer16_Sequence_t;$/;"	t	typeref:enum:__anon32
timer1_pin_mask	arduino/Tone.cpp	/^volatile uint8_t timer1_pin_mask;$/;"	v
timer1_pin_port	arduino/Tone.cpp	/^volatile uint8_t *timer1_pin_port;$/;"	v
timer1_toggle_count	arduino/Tone.cpp	/^volatile long timer1_toggle_count;$/;"	v
timer2_pin_mask	arduino/Tone.cpp	/^volatile uint8_t timer2_pin_mask;$/;"	v
timer2_pin_port	arduino/Tone.cpp	/^volatile uint8_t *timer2_pin_port;$/;"	v
timer2_toggle_count	arduino/Tone.cpp	/^volatile long timer2_toggle_count;$/;"	v
timer3_pin_mask	arduino/Tone.cpp	/^volatile uint8_t timer3_pin_mask;$/;"	v
timer3_pin_port	arduino/Tone.cpp	/^volatile uint8_t *timer3_pin_port;$/;"	v
timer3_toggle_count	arduino/Tone.cpp	/^volatile long timer3_toggle_count;$/;"	v
timer4_pin_mask	arduino/Tone.cpp	/^volatile uint8_t timer4_pin_mask;$/;"	v
timer4_pin_port	arduino/Tone.cpp	/^volatile uint8_t *timer4_pin_port;$/;"	v
timer4_toggle_count	arduino/Tone.cpp	/^volatile long timer4_toggle_count;$/;"	v
timer5_pin_mask	arduino/Tone.cpp	/^volatile uint8_t timer5_pin_mask;$/;"	v
timer5_pin_port	arduino/Tone.cpp	/^volatile uint8_t *timer5_pin_port;$/;"	v
timer5_toggle_count	arduino/Tone.cpp	/^volatile long timer5_toggle_count;$/;"	v
timerOffset	Ethernet/src/Dhcp.h	/^	timerOffset		=	2,$/;"	e	enum:__anon1
timestamp	Robot_Control/src/Fat16.cpp	/^uint8_t Fat16::timestamp(uint8_t flags, uint16_t year, uint8_t month,$/;"	f	class:Fat16
timestamp	SD/src/utility/SdFile.cpp	/^uint8_t SdFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,$/;"	f	class:SdFile
tmp_write_protect	Robot_Control/src/SdInfo.h	/^  unsigned tmp_write_protect : 1;$/;"	m	struct:CSD
tmp_write_protect	SD/src/utility/SdInfo.h	/^  unsigned tmp_write_protect : 1;$/;"	m	struct:CSDV1
tmp_write_protect	SD/src/utility/SdInfo.h	/^  unsigned tmp_write_protect : 1;$/;"	m	struct:CSDV2
toAscii	arduino/WCharacter.h	/^inline int toAscii(int c)$/;"	f
toCharArray	arduino/WString.h	/^	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const$/;"	f	class:String
toDouble	arduino/WString.cpp	/^double String::toDouble(void) const$/;"	f	class:String
toFloat	arduino/WString.cpp	/^float String::toFloat(void) const$/;"	f	class:String
toInt	arduino/WString.cpp	/^long String::toInt(void) const$/;"	f	class:String
toLowerCase	arduino/WCharacter.h	/^inline int toLowerCase(int c)$/;"	f
toLowerCase	arduino/WString.cpp	/^void String::toLowerCase(void)$/;"	f	class:String
toUpperCase	arduino/WCharacter.h	/^inline int toUpperCase(int c)$/;"	f
toUpperCase	arduino/WString.cpp	/^void String::toUpperCase(void)$/;"	f	class:String
tone	arduino/Tone.cpp	/^void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)$/;"	f
toneBegin	arduino/Tone.cpp	/^static int8_t toneBegin(uint8_t _pin)$/;"	f	file:
tone_pin_to_timer_PGM	arduino/Tone.cpp	/^const uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 \/*, 1 *\/ };$/;"	v
tone_pin_to_timer_PGM	arduino/Tone.cpp	/^const uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 \/*, 1, 0 *\/ };$/;"	v
tone_pin_to_timer_PGM	arduino/Tone.cpp	/^const uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 2 \/*, 3, 4, 5, 1, 0 *\/ };$/;"	v
tone_pin_to_timer_PGM	arduino/Tone.cpp	/^const uint8_t PROGMEM tone_pin_to_timer_PGM[] = { 3 \/*, 1 *\/ };$/;"	v
tone_pins	arduino/Tone.cpp	/^static uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 \/*, 255 *\/ };$/;"	v	file:
tone_pins	arduino/Tone.cpp	/^static uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 \/*, 255, 255 *\/ };$/;"	v	file:
tone_pins	arduino/Tone.cpp	/^static uint8_t tone_pins[AVAILABLE_TONE_PINS] = { 255 \/*, 255, 255, 255, 255, 255 *\/ };$/;"	v	file:
top	Robot_Control/src/utility/VirtualKeyboard.h	/^		uint8_t top;$/;"	m	class:VirtualKeyboard
totalSectors	Robot_Control/src/FatStructs.h	/^  uint32_t totalSectors;$/;"	m	struct:partitionTable
totalSectors	SD/src/utility/FatStructs.h	/^  uint32_t totalSectors;$/;"	m	struct:partitionTable
totalSectors16	Robot_Control/src/FatStructs.h	/^  uint16_t totalSectors16;$/;"	m	struct:biosParmBlock
totalSectors16	SD/src/utility/FatStructs.h	/^  uint16_t totalSectors16;$/;"	m	struct:biosParmBlock
totalSectors32	Robot_Control/src/FatStructs.h	/^  uint32_t totalSectors32;$/;"	m	struct:biosParmBlock
totalSectors32	SD/src/utility/FatStructs.h	/^  uint32_t totalSectors32;$/;"	m	struct:biosParmBlock
trace	GSM/src/GSM3ShieldV1DirectModemProvider.h	/^			bool trace;$/;"	m	class:GSM3ShieldV1DirectModemProvider
tran_speed	Robot_Control/src/SdInfo.h	/^  uint8_t tran_speed;$/;"	m	struct:CSD
tran_speed	SD/src/utility/SdInfo.h	/^  uint8_t tran_speed;$/;"	m	struct:CSDV1
tran_speed	SD/src/utility/SdInfo.h	/^  uint8_t tran_speed;$/;"	m	struct:CSDV2
transfer	SPI/src/SPI.h	/^  inline static uint8_t transfer(uint8_t data) {$/;"	f	class:SPIClass
transfer	SPI/src/SPI.h	/^  inline static void transfer(void *buf, size_t count) {$/;"	f	class:SPIClass
transfer16	SPI/src/SPI.h	/^  inline static uint16_t transfer16(uint16_t data) {$/;"	f	class:SPIClass
transmitting	Wire/src/Wire.cpp	/^uint8_t TwoWire::transmitting = 0;$/;"	m	class:TwoWire	file:
transmitting	Wire/src/Wire.h	/^    static uint8_t transmitting;$/;"	m	class:TwoWire
trem	Robot_Control/src/Squawk.cpp	/^  pto_t     trem;$/;"	m	struct:__anon6	file:
triangle	Robot_Control/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::triangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t x3, int16_t y3) {$/;"	f	class:Adafruit_GFX
triangle	TFT/src/utility/Adafruit_GFX.cpp	/^void Adafruit_GFX::triangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t x3, int16_t y3) $/;"	f	class:Adafruit_GFX
trim	arduino/WString.cpp	/^void String::trim(void)$/;"	f	class:String
trimRead	Robot_Control/src/Sensors.cpp	/^int RobotControl::trimRead(){$/;"	f	class:RobotControl
truncate	Robot_Control/src/Fat16.cpp	/^uint8_t Fat16::truncate(uint32_t length) {$/;"	f	class:Fat16
truncate	SD/src/utility/SdFile.cpp	/^uint8_t SdFile::truncate(uint32_t length) {$/;"	f	class:SdFile
tune	Robot_Control/src/Squawk.cpp	/^void SquawkSynth::tune(float new_tuning) {$/;"	f	class:SquawkSynth
tuneWrite	Robot_Control/src/Melody.cpp	/^void RobotControl::tuneWrite(float tune){$/;"	f	class:RobotControl
tunedDelay	GSM/src/GSM3SoftSerial.cpp	/^\/*inline*\/ void GSM3SoftSerial::tunedDelay(uint16_t delay) { $/;"	f	class:GSM3SoftSerial
tunedDelay	SoftwareSerial/src/SoftwareSerial.cpp	/^inline void SoftwareSerial::tunedDelay(uint16_t delay) { $/;"	f	class:SoftwareSerial
tuning	Robot_Control/src/Squawk.cpp	/^static float    tuning = 1.0;$/;"	v	file:
tuning_long	Robot_Control/src/Squawk.cpp	/^static uint32_t tuning_long;$/;"	v	file:
turn	Robot_Control/src/Motors.cpp	/^void RobotControl::turn(int angle){$/;"	f	class:RobotControl
turnLeft	Robot_Control/src/Motors.cpp	/^void RobotControl::turnLeft(int speed){$/;"	f	class:RobotControl
turnOffPWM	arduino/wiring_digital.c	/^static void turnOffPWM(uint8_t timer)$/;"	f	file:
turnRight	Robot_Control/src/Motors.cpp	/^void RobotControl::turnRight(int speed){$/;"	f	class:RobotControl
twi_attachSlaveRxEvent	Wire/src/utility/twi.c	/^void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )$/;"	f
twi_attachSlaveTxEvent	Wire/src/utility/twi.c	/^void twi_attachSlaveTxEvent( void (*function)(void) )$/;"	f
twi_disable	Wire/src/utility/twi.c	/^void twi_disable(void)$/;"	f
twi_error	Wire/src/utility/twi.c	/^static volatile uint8_t twi_error;$/;"	v	file:
twi_h	Wire/src/utility/twi.h	21;"	d
twi_inRepStart	Wire/src/utility/twi.c	/^static volatile uint8_t twi_inRepStart;			\/\/ in the middle of a repeated start$/;"	v	file:
twi_init	Wire/src/utility/twi.c	/^void twi_init(void)$/;"	f
twi_masterBuffer	Wire/src/utility/twi.c	/^static uint8_t twi_masterBuffer[TWI_BUFFER_LENGTH];$/;"	v	file:
twi_masterBufferIndex	Wire/src/utility/twi.c	/^static volatile uint8_t twi_masterBufferIndex;$/;"	v	file:
twi_masterBufferLength	Wire/src/utility/twi.c	/^static volatile uint8_t twi_masterBufferLength;$/;"	v	file:
twi_onSlaveReceive	Wire/src/utility/twi.c	/^static void (*twi_onSlaveReceive)(uint8_t*, int);$/;"	v	file:
twi_onSlaveTransmit	Wire/src/utility/twi.c	/^static void (*twi_onSlaveTransmit)(void);$/;"	v	file:
twi_readFrom	Wire/src/utility/twi.c	/^uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)$/;"	f
twi_releaseBus	Wire/src/utility/twi.c	/^void twi_releaseBus(void)$/;"	f
twi_reply	Wire/src/utility/twi.c	/^void twi_reply(uint8_t ack)$/;"	f
twi_rxBuffer	Wire/src/utility/twi.c	/^static uint8_t twi_rxBuffer[TWI_BUFFER_LENGTH];$/;"	v	file:
twi_rxBufferIndex	Wire/src/utility/twi.c	/^static volatile uint8_t twi_rxBufferIndex;$/;"	v	file:
twi_sendStop	Wire/src/utility/twi.c	/^static volatile uint8_t twi_sendStop;			\/\/ should the transaction end with a stop$/;"	v	file:
twi_setAddress	Wire/src/utility/twi.c	/^void twi_setAddress(uint8_t address)$/;"	f
twi_setFrequency	Wire/src/utility/twi.c	/^void twi_setFrequency(uint32_t frequency)$/;"	f
twi_slarw	Wire/src/utility/twi.c	/^static volatile uint8_t twi_slarw;$/;"	v	file:
twi_state	Wire/src/utility/twi.c	/^static volatile uint8_t twi_state;$/;"	v	file:
twi_stop	Wire/src/utility/twi.c	/^void twi_stop(void)$/;"	f
twi_transmit	Wire/src/utility/twi.c	/^uint8_t twi_transmit(const uint8_t* data, uint8_t length)$/;"	f
twi_txBuffer	Wire/src/utility/twi.c	/^static uint8_t twi_txBuffer[TWI_BUFFER_LENGTH];$/;"	v	file:
twi_txBufferIndex	Wire/src/utility/twi.c	/^static volatile uint8_t twi_txBufferIndex;$/;"	v	file:
twi_txBufferLength	Wire/src/utility/twi.c	/^static volatile uint8_t twi_txBufferLength;$/;"	v	file:
twi_writeTo	Wire/src/utility/twi.c	/^uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)$/;"	f
twoSMSinBuffer	GSM/src/GSM3ShieldV1SMSProvider.h	/^		bool twoSMSinBuffer; \/\/ To detect if the buffer has more than 1 SMS.$/;"	m	class:GSM3ShieldV1SMSProvider
tx	Firmata/utility/SerialFirmata.h	/^    uint8_t tx;$/;"	m	struct:__anon3::serial_pins
txAddress	Wire/src/Wire.cpp	/^uint8_t TwoWire::txAddress = 0;$/;"	m	class:TwoWire	file:
txAddress	Wire/src/Wire.h	/^    static uint8_t txAddress;$/;"	m	class:TwoWire
txBuffer	Wire/src/Wire.cpp	/^uint8_t TwoWire::txBuffer[BUFFER_LENGTH];$/;"	m	class:TwoWire	file:
txBuffer	Wire/src/Wire.h	/^    static uint8_t txBuffer[];$/;"	m	class:TwoWire
txBufferIndex	Wire/src/Wire.cpp	/^uint8_t TwoWire::txBufferIndex = 0;$/;"	m	class:TwoWire	file:
txBufferIndex	Wire/src/Wire.h	/^    static uint8_t txBufferIndex;$/;"	m	class:TwoWire
txBufferLength	Wire/src/Wire.cpp	/^uint8_t TwoWire::txBufferLength = 0;$/;"	m	class:TwoWire	file:
txBufferLength	Wire/src/Wire.h	/^    static uint8_t txBufferLength;$/;"	m	class:TwoWire
tx_buffer_index_t	arduino/HardwareSerial.h	/^typedef uint16_t tx_buffer_index_t;$/;"	t
tx_buffer_index_t	arduino/HardwareSerial.h	/^typedef uint8_t tx_buffer_index_t;$/;"	t
tx_delay	GSM/src/GSM3SoftSerial.cpp	/^  unsigned short tx_delay;$/;"	m	struct:_DELAY_TABLE	file:
tx_pin_write	GSM/src/GSM3SoftSerial.cpp	/^void GSM3SoftSerial::tx_pin_write(uint8_t pin_state)$/;"	f	class:GSM3SoftSerial
type	Robot_Control/src/FatStructs.h	/^  uint8_t  type;$/;"	m	struct:partitionTable
type	SD/src/utility/FatStructs.h	/^  uint8_t  type;$/;"	m	struct:partitionTable
type	SD/src/utility/Sd2Card.h	/^  uint8_t type(void) const {return type_;}$/;"	f	class:Sd2Card
type	SD/src/utility/Sd2Card.h	/^  void type(uint8_t value) {type_ = value;}$/;"	f	class:Sd2Card
type	SD/src/utility/SdFat.h	/^  uint8_t type(void) const {return type_;}$/;"	f	class:SdFile
type_	SD/src/utility/Sd2Card.h	/^  uint8_t type_;$/;"	m	class:Sd2Card
type_	SD/src/utility/SdFat.h	/^  uint8_t   type_;          \/\/ type of file see above for values$/;"	m	class:SdFile
u16	arduino/USBAPI.h	/^typedef unsigned short u16;$/;"	t
u32	arduino/USBAPI.h	/^typedef unsigned long u32;$/;"	t
u8	arduino/USBAPI.h	/^typedef unsigned char u8;$/;"	t
udp_h	arduino/Udp.h	36;"	d
unRegisterUMProvider	GSM/src/GSM3ShieldV1ModemCore.cpp	/^void GSM3ShieldV1ModemCore::unRegisterUMProvider(GSM3ShieldV1BaseProvider* provider)$/;"	f	class:GSM3ShieldV1ModemCore
unbufferedRead	SD/src/utility/SdFat.h	/^  uint8_t unbufferedRead(void) const {$/;"	f	class:SdFile
update	EEPROM/src/EEPROM.h	/^    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }$/;"	f	struct:EERef
update	EEPROM/src/EEPROM.h	/^    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }$/;"	f	struct:EEPROMClass
update	Firmata/utility/SerialFirmata.cpp	/^void SerialFirmata::update()$/;"	f	class:SerialFirmata
updateIR	Robot_Control/src/Sensors.cpp	/^void RobotControl::updateIR(){$/;"	f	class:RobotControl
usToTicks	Servo/src/avr/Servo.cpp	27;"	d	file:
usToTicks	Servo/src/sam/Servo.cpp	24;"	d	file:
usToTicks	Servo/src/samd/Servo.cpp	24;"	d	file:
usbVersion	arduino/USBCore.h	/^	u16 usbVersion;		\/\/ 0x200 or 0x210$/;"	m	struct:__anon15
useFill	Robot_Control/src/utility/Adafruit_GFX.h	/^  bool useFill;$/;"	m	class:Adafruit_GFX
useFill	TFT/src/utility/Adafruit_GFX.h	/^  bool useFill;$/;"	m	class:Adafruit_GFX
useStroke	Robot_Control/src/utility/Adafruit_GFX.h	/^  bool useStroke;$/;"	m	class:Adafruit_GFX
useStroke	TFT/src/utility/Adafruit_GFX.h	/^  bool useStroke;$/;"	m	class:Adafruit_GFX
user	GSM/src/GSM3ShieldV1DataNetworkProvider.h	/^		char* user; \/\/ Username for GPRS$/;"	m	class:GSM3ShieldV1DataNetworkProvider
userName	GSM/src/GSM3ShieldV1.h	/^		char* userName;				\/\/User.$/;"	m	class:GSM3ShieldV1
userNameRead	Robot_Control/src/ArduinoRobot.h	/^inline void RobotControl::userNameRead(char* container){$/;"	f	class:RobotControl
userNameWrite	Robot_Control/src/ArduinoRobot.h	/^inline void RobotControl::userNameWrite(char* text){$/;"	f	class:RobotControl
user_onReceive	Wire/src/Wire.cpp	/^void (*TwoWire::user_onReceive)(int);$/;"	v
user_onReceive	Wire/src/Wire.h	/^    static void (*user_onReceive)(int);$/;"	m	class:TwoWire
user_onRequest	Wire/src/Wire.cpp	/^void (*TwoWire::user_onRequest)(void);$/;"	v
user_onRequest	Wire/src/Wire.h	/^    static void (*user_onRequest)(void);$/;"	m	class:TwoWire
usingInterrupt	SPI/src/SPI.cpp	/^void SPIClass::usingInterrupt(uint8_t interruptNumber)$/;"	f	class:SPIClass
usuallyZero	Robot_Control/src/FatStructs.h	/^  uint16_t usuallyZero;$/;"	m	struct:masterBootRecord
usuallyZero	SD/src/utility/FatStructs.h	/^  uint16_t usuallyZero;$/;"	m	struct:masterBootRecord
v1	SD/src/utility/SdInfo.h	/^  csd1_t v1;$/;"	m	union:csd_t
v2	SD/src/utility/SdInfo.h	/^  csd2_t v2;$/;"	m	union:csd_t
value	Robot_IR_Remote/src/IRremote.h	/^  unsigned long value; \/\/ Decoded value$/;"	m	class:decode_results
vdd_r_curr_max	Robot_Control/src/SdInfo.h	/^  unsigned vdd_r_curr_max : 3;$/;"	m	struct:CSD
vdd_r_curr_max	SD/src/utility/SdInfo.h	/^  unsigned vdd_r_curr_max : 3;$/;"	m	struct:CSDV1
vdd_r_curr_min	Robot_Control/src/SdInfo.h	/^  unsigned vdd_r_curr_min : 3;$/;"	m	struct:CSD
vdd_r_curr_min	SD/src/utility/SdInfo.h	/^  unsigned vdd_r_curr_min : 3;$/;"	m	struct:CSDV1
vdd_w_cur_max	Robot_Control/src/SdInfo.h	/^  unsigned vdd_w_cur_max : 3;$/;"	m	struct:CSD
vdd_w_cur_max	SD/src/utility/SdInfo.h	/^  unsigned vdd_w_cur_max : 3;$/;"	m	struct:CSDV1
vdd_w_curr_min	Robot_Control/src/SdInfo.h	/^  unsigned vdd_w_curr_min : 3;$/;"	m	struct:CSD
vdd_w_curr_min	SD/src/utility/SdInfo.h	/^  unsigned vdd_w_curr_min : 3;$/;"	m	struct:CSDV1
version	Stepper/src/Stepper.cpp	/^int Stepper::version(void)$/;"	f	class:Stepper
versionH	HID/src/HID.h	/^  uint8_t versionH; \/\/ 0x101$/;"	m	struct:__anon8
versionL	HID/src/HID.h	/^  uint8_t versionL; \/\/ 0x101$/;"	m	struct:__anon8
vibr	Robot_Control/src/Squawk.cpp	/^  pto_t     vibr;$/;"	m	struct:__anon6	file:
voiceCall	GSM/src/GSM3MobileMockupProvider.h	/^		inline int voiceCall(const char* number){return 0;};$/;"	f	class:GSM3MobileMockupProvider
voiceCall	GSM/src/GSM3ShieldV1VoiceProvider.cpp	/^int GSM3ShieldV1VoiceProvider::voiceCall(const char* to)$/;"	f	class:GSM3ShieldV1VoiceProvider
voiceCall	GSM/src/GSM3VoiceCallService.cpp	/^int GSM3VoiceCallService::voiceCall(const char* to, unsigned long timeout)$/;"	f	class:GSM3VoiceCallService
voidFuncPtr	arduino/wiring_private.h	/^typedef void (*voidFuncPtr)(void);$/;"	t
vol	Robot_Control/src/Squawk.h	/^  uint8_t  vol;$/;"	m	struct:__anon7
vol_	SD/src/utility/SdFat.h	/^  SdVolume* vol_;           \/\/ volume where file is located$/;"	m	class:SdFile
volume	Robot_Control/src/Squawk.cpp	/^  int8_t    volume;$/;"	m	struct:__anon6	file:
volume	SD/src/SD.h	/^  SdVolume volume;$/;"	m	class:SDLib::SDClass
volume	SD/src/utility/SdFat.h	/^  SdVolume* volume(void) const {return vol_;}$/;"	f	class:SdFile
volumeInitialized_	Robot_Control/src/Fat16.cpp	/^uint8_t  Fat16::volumeInitialized_ = 0;  \/\/ true if FAT16 volume is valid$/;"	m	class:Fat16	file:
volumeInitialized_	Robot_Control/src/Fat16.h	/^  static uint8_t  volumeInitialized_;  \/\/ true if volume has been initialized$/;"	m	class:Fat16
volumeLabel	Robot_Control/src/FatStructs.h	/^  char     volumeLabel[11];$/;"	m	struct:fat32BootSector
volumeLabel	SD/src/utility/FatStructs.h	/^  char     volumeLabel[11];$/;"	m	struct:fat32BootSector
volumeSerialNumber	Robot_Control/src/FatStructs.h	/^  uint32_t volumeSerialNumber;$/;"	m	struct:fat32BootSector
volumeSerialNumber	SD/src/utility/FatStructs.h	/^  uint32_t volumeSerialNumber;$/;"	m	struct:fat32BootSector
wIndex	arduino/USBAPI.h	/^	uint16_t wIndex;$/;"	m	struct:__anon12
wLength	arduino/USBAPI.h	/^	uint16_t wLength;$/;"	m	struct:__anon12
wValueH	arduino/USBAPI.h	/^	uint8_t wValueH;$/;"	m	struct:__anon12
wValueL	arduino/USBAPI.h	/^	uint8_t wValueL;$/;"	m	struct:__anon12
waitContinue	Robot_Control/src/helper.cpp	/^void RobotControl::waitContinue(uint8_t key){$/;"	f	class:RobotControl
waitForAnswer	GSM/src/GSM3MobileClientService.cpp	/^int GSM3MobileClientService::waitForAnswer()$/;"	f	class:GSM3MobileClientService
waitForAnswer	GSM/src/GSM3MobileServerService.cpp	/^int GSM3MobileServerService::waitForAnswer()$/;"	f	class:GSM3MobileServerService
waitForAnswerIfNeeded	GSM/src/GSM3SMSService.cpp	/^int GSM3SMSService::waitForAnswerIfNeeded(int returnvalue)$/;"	f	class:GSM3SMSService
waitForAnswerIfNeeded	GSM/src/GSM3VoiceCallService.cpp	/^int GSM3VoiceCallService::waitForAnswerIfNeeded(int returnvalue)$/;"	f	class:GSM3VoiceCallService
waitForData	Firmata/Firmata.h	/^    byte waitForData; \/\/ this flag says the next serial input will be data$/;"	m	class:FirmataClass
waitForToken	Robot_Control/src/SdCard.cpp	/^static uint8_t waitForToken(uint8_t token, uint16_t timeoutMillis) {$/;"	f	file:
waitNotBusy	SD/src/utility/Sd2Card.cpp	/^uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {$/;"	f	class:Sd2Card
waitStartBlock	SD/src/utility/Sd2Card.cpp	/^uint8_t Sd2Card::waitStartBlock(void) {$/;"	f	class:Sd2Card
wakeupHost	arduino/USBCore.cpp	/^bool USBDevice_::wakeupHost()$/;"	f	class:USBDevice_
walkPath	SD/src/SD.cpp	/^boolean walkPath(const char *filepath, SdFile& parentDir,$/;"	f	namespace:SDLib
wep_index	Firmata/examples/StandardFirmataWiFi/wifiConfig.h	/^byte wep_index = 0;$/;"	v
wep_key	Firmata/examples/StandardFirmataWiFi/wifiConfig.h	/^char wep_key[] = "your_wep_key";$/;"	v
width	Robot_Control/src/ArduinoRobot.h	/^	uint8_t width;$/;"	m	struct:EEPROM_BMP
width	Robot_Control/src/utility/Adafruit_GFX.cpp	/^int16_t Adafruit_GFX::width(void) {$/;"	f	class:Adafruit_GFX
width	TFT/src/utility/Adafruit_GFX.cpp	/^int16_t Adafruit_GFX::width(void) $/;"	f	class:Adafruit_GFX
width	TFT/src/utility/PImage.h	/^  int width() { return _bmpWidth; }$/;"	f	class:PImage
word	arduino/Arduino.h	/^typedef unsigned int word;$/;"	t
word	arduino/Arduino.h	241;"	d
wp_grp_enable	Robot_Control/src/SdInfo.h	/^  unsigned wp_grp_enable : 1;$/;"	m	struct:CSD
wp_grp_enable	SD/src/utility/SdInfo.h	/^  unsigned wp_grp_enable : 1;$/;"	m	struct:CSDV1
wp_grp_enable	SD/src/utility/SdInfo.h	/^  unsigned wp_grp_enable : 1;$/;"	m	struct:CSDV2
wp_grp_size	Robot_Control/src/SdInfo.h	/^  unsigned wp_grp_size : 7;$/;"	m	struct:CSD
wp_grp_size	SD/src/utility/SdInfo.h	/^  unsigned wp_grp_size : 7;$/;"	m	struct:CSDV1
wp_grp_size	SD/src/utility/SdInfo.h	/^  unsigned wp_grp_size : 7;$/;"	m	struct:CSDV2
wpa_passphrase	Firmata/examples/StandardFirmataWiFi/wifiConfig.h	/^char wpa_passphrase[] = "your_wpa_passphrase";$/;"	v
wrap	Robot_Control/src/utility/Adafruit_GFX.h	/^    wrap; \/\/ If set, 'wrap' text at right edge of display$/;"	m	class:Adafruit_GFX
wrap	TFT/src/utility/Adafruit_GFX.h	/^	wrap; \/\/ If set, 'wrap' text at right edge of display$/;"	m	class:Adafruit_GFX
write	EEPROM/src/EEPROM.h	/^    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }$/;"	f	struct:EEPROMClass
write	Ethernet/src/EthernetClient.cpp	/^size_t EthernetClient::write(const uint8_t *buf, size_t size) {$/;"	f	class:EthernetClient
write	Ethernet/src/EthernetClient.cpp	/^size_t EthernetClient::write(uint8_t b) {$/;"	f	class:EthernetClient
write	Ethernet/src/EthernetServer.cpp	/^size_t EthernetServer::write(const uint8_t *buffer, size_t size) $/;"	f	class:EthernetServer
write	Ethernet/src/EthernetServer.cpp	/^size_t EthernetServer::write(uint8_t b) $/;"	f	class:EthernetServer
write	Ethernet/src/EthernetUdp.cpp	/^size_t EthernetUDP::write(const uint8_t *buffer, size_t size)$/;"	f	class:EthernetUDP
write	Ethernet/src/EthernetUdp.cpp	/^size_t EthernetUDP::write(uint8_t byte)$/;"	f	class:EthernetUDP
write	Ethernet/src/utility/w5100.cpp	/^uint16_t W5100Class::write(uint16_t _addr, const uint8_t *_buf, uint16_t _len)$/;"	f	class:W5100Class
write	Ethernet/src/utility/w5100.cpp	/^uint8_t W5100Class::write(uint16_t _addr, uint8_t _data)$/;"	f	class:W5100Class
write	Firmata/Firmata.cpp	/^void FirmataClass::write(byte c)$/;"	f	class:FirmataClass
write	Firmata/utility/BLEStream.h	/^size_t BLEStream::write(uint8_t byte)$/;"	f	class:BLEStream
write	Firmata/utility/EthernetClientStream.h	/^EthernetClientStream::write(uint8_t c)$/;"	f	class:EthernetClientStream
write	Firmata/utility/WiFiStream.h	/^  inline size_t write(uint8_t byte)$/;"	f	class:WiFiStream
write	GSM/src/GSM3CircularBuffer.cpp	/^int GSM3CircularBuffer::write(char c)$/;"	f	class:GSM3CircularBuffer
write	GSM/src/GSM3MobileClientService.cpp	/^size_t GSM3MobileClientService::write(const uint8_t* buf)$/;"	f	class:GSM3MobileClientService
write	GSM/src/GSM3MobileClientService.cpp	/^size_t GSM3MobileClientService::write(const uint8_t* buf, size_t sz)$/;"	f	class:GSM3MobileClientService
write	GSM/src/GSM3MobileClientService.cpp	/^size_t GSM3MobileClientService::write(uint8_t c)$/;"	f	class:GSM3MobileClientService
write	GSM/src/GSM3MobileServerService.cpp	/^size_t GSM3MobileServerService::write(const uint8_t* buf)$/;"	f	class:GSM3MobileServerService
write	GSM/src/GSM3MobileServerService.cpp	/^size_t GSM3MobileServerService::write(const uint8_t* buf, size_t sz)$/;"	f	class:GSM3MobileServerService
write	GSM/src/GSM3MobileServerService.cpp	/^size_t GSM3MobileServerService::write(uint8_t c)$/;"	f	class:GSM3MobileServerService
write	GSM/src/GSM3SMSService.cpp	/^size_t GSM3SMSService::write(uint8_t c)$/;"	f	class:GSM3SMSService
write	GSM/src/GSM3ShieldV1DirectModemProvider.cpp	/^size_t GSM3ShieldV1DirectModemProvider::write(uint8_t c)$/;"	f	class:GSM3ShieldV1DirectModemProvider
write	GSM/src/GSM3ShieldV1ModemCore.cpp	/^size_t GSM3ShieldV1ModemCore::write(uint8_t c)$/;"	f	class:GSM3ShieldV1ModemCore
write	GSM/src/GSM3SoftSerial.cpp	/^size_t GSM3SoftSerial::write(uint8_t c)$/;"	f	class:GSM3SoftSerial
write	LiquidCrystal/src/LiquidCrystal.cpp	/^inline size_t LiquidCrystal::write(uint8_t value) {$/;"	f	class:LiquidCrystal
write	Robot_Control/src/Fat16.cpp	/^int16_t Fat16::write(const char* str) {$/;"	f	class:Fat16
write	Robot_Control/src/Fat16.cpp	/^int16_t Fat16::write(const void* buf, uint16_t nbyte) {$/;"	f	class:Fat16
write	Robot_Control/src/Fat16.cpp	/^size_t Fat16::write(uint8_t b) {$/;"	f	class:Fat16
write	Robot_Control/src/Fat16.cpp	/^void Fat16::write(const char* str) {$/;"	f	class:Fat16
write	Robot_Control/src/Fat16.cpp	/^void Fat16::write(uint8_t b) {$/;"	f	class:Fat16
write	Robot_Control/src/utility/Adafruit_GFX.cpp	/^size_t Adafruit_GFX::write(uint8_t c) {$/;"	f	class:Adafruit_GFX
write	SD/src/File.cpp	/^size_t File::write(const uint8_t *buf, size_t size) {$/;"	f	class:File
write	SD/src/File.cpp	/^size_t File::write(uint8_t val) {$/;"	f	class:File
write	SD/src/utility/SdFile.cpp	/^size_t SdFile::write(const char* str) {$/;"	f	class:SdFile
write	SD/src/utility/SdFile.cpp	/^size_t SdFile::write(const void* buf, uint16_t nbyte) {$/;"	f	class:SdFile
write	SD/src/utility/SdFile.cpp	/^size_t SdFile::write(uint8_t b) {$/;"	f	class:SdFile
write	Servo/src/avr/Servo.cpp	/^void Servo::write(int value)$/;"	f	class:Servo
write	Servo/src/sam/Servo.cpp	/^void Servo::write(int value)$/;"	f	class:Servo
write	Servo/src/samd/Servo.cpp	/^void Servo::write(int value)$/;"	f	class:Servo
write	SoftwareSerial/src/SoftwareSerial.cpp	/^size_t SoftwareSerial::write(uint8_t b)$/;"	f	class:SoftwareSerial
write	TFT/src/utility/Adafruit_GFX.cpp	/^size_t Adafruit_GFX::write(uint8_t c) {$/;"	f	class:Adafruit_GFX
write	Wire/src/Wire.cpp	/^size_t TwoWire::write(const uint8_t *data, size_t quantity)$/;"	f	class:TwoWire
write	Wire/src/Wire.cpp	/^size_t TwoWire::write(uint8_t data)$/;"	f	class:TwoWire
write	Wire/src/Wire.h	/^    inline size_t write(int n) { return write((uint8_t)n); }$/;"	f	class:TwoWire
write	Wire/src/Wire.h	/^    inline size_t write(long n) { return write((uint8_t)n); }$/;"	f	class:TwoWire
write	Wire/src/Wire.h	/^    inline size_t write(unsigned int n) { return write((uint8_t)n); }$/;"	f	class:TwoWire
write	Wire/src/Wire.h	/^    inline size_t write(unsigned long n) { return write((uint8_t)n); }$/;"	f	class:TwoWire
write	arduino/CDC.cpp	/^size_t Serial_::write(const uint8_t *buffer, size_t size)$/;"	f	class:Serial_
write	arduino/CDC.cpp	/^size_t Serial_::write(uint8_t c)$/;"	f	class:Serial_
write	arduino/HardwareSerial.cpp	/^size_t HardwareSerial::write(uint8_t c)$/;"	f	class:HardwareSerial
write	arduino/HardwareSerial.h	/^    inline size_t write(int n) { return write((uint8_t)n); }$/;"	f	class:HardwareSerial
write	arduino/HardwareSerial.h	/^    inline size_t write(long n) { return write((uint8_t)n); }$/;"	f	class:HardwareSerial
write	arduino/HardwareSerial.h	/^    inline size_t write(unsigned int n) { return write((uint8_t)n); }$/;"	f	class:HardwareSerial
write	arduino/HardwareSerial.h	/^    inline size_t write(unsigned long n) { return write((uint8_t)n); }$/;"	f	class:HardwareSerial
write	arduino/Print.cpp	/^size_t Print::write(const uint8_t *buffer, size_t size)$/;"	f	class:Print
write	arduino/Print.h	/^    size_t write(const char *buffer, size_t size) {$/;"	f	class:Print
write	arduino/Print.h	/^    size_t write(const char *str) {$/;"	f	class:Print
write4bits	LiquidCrystal/src/LiquidCrystal.cpp	/^void LiquidCrystal::write4bits(uint8_t value) {$/;"	f	class:LiquidCrystal
write8bits	LiquidCrystal/src/LiquidCrystal.cpp	/^void LiquidCrystal::write8bits(uint8_t value) {$/;"	f	class:LiquidCrystal
writeAllScripts	Robot_Control/examples/explore/R06_Wheel_Calibration/scripts_library.h	/^void writeAllScripts(){$/;"	f
writeBlock	Robot_Control/src/SdCard.cpp	/^uint8_t SdCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {$/;"	f	class:SdCard
writeBlock	SD/src/utility/Sd2Card.cpp	/^uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {$/;"	f	class:Sd2Card
writeBlock	SD/src/utility/SdFat.h	/^  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {$/;"	f	class:SdVolume
writeByte	Robot_Control/src/EEPROM_I2C.cpp	/^void EEPROM_I2C::writeByte(unsigned int eeaddress, byte data){$/;"	f	class:EEPROM_I2C
writeByte	Robot_Control/src/EasyTransfer2.cpp	/^void EasyTransfer2::writeByte(uint8_t dat){$/;"	f	class:EasyTransfer2
writeByte	Robot_Motor/src/EasyTransfer2.cpp	/^void EasyTransfer2::writeByte(uint8_t dat){$/;"	f	class:EasyTransfer2
writeData	SD/src/utility/Sd2Card.cpp	/^uint8_t Sd2Card::writeData(const uint8_t* src) {$/;"	f	class:Sd2Card
writeData	SD/src/utility/Sd2Card.cpp	/^uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {$/;"	f	class:Sd2Card
writeError	Robot_Control/src/Fat16.h	/^  bool writeError;$/;"	m	class:Fat16
writeInt	Robot_Control/src/EasyTransfer2.cpp	/^void EasyTransfer2::writeInt(int dat){$/;"	f	class:EasyTransfer2
writeInt	Robot_Motor/src/EasyTransfer2.cpp	/^void EasyTransfer2::writeInt(int dat){$/;"	f	class:EasyTransfer2
writeMicroseconds	Servo/src/avr/Servo.cpp	/^void Servo::writeMicroseconds(int value)$/;"	f	class:Servo
writeMicroseconds	Servo/src/sam/Servo.cpp	/^void Servo::writeMicroseconds(int value)$/;"	f	class:Servo
writeMicroseconds	Servo/src/samd/Servo.cpp	/^void Servo::writeMicroseconds(int value)$/;"	f	class:Servo
writeModemCommand	GSM/src/GSM3ShieldV1DirectModemProvider.cpp	/^String GSM3ShieldV1DirectModemProvider::writeModemCommand(String ATcommand, int responseDelay)$/;"	f	class:GSM3ShieldV1DirectModemProvider
writePGM	GSM/src/GSM3ShieldV1ModemCore.cpp	/^size_t GSM3ShieldV1ModemCore::writePGM(PGM_P str, bool CR)$/;"	f	class:GSM3ShieldV1ModemCore
writePGMtext	Robot_Control/examples/explore/R06_Wheel_Calibration/scripts_library.h	/^void writePGMtext(int seq){$/;"	f
writePage	Robot_Control/src/EEPROM_I2C.cpp	/^void EEPROM_I2C::writePage(unsigned int eeaddress, byte* data, byte length ){$/;"	f	class:EEPROM_I2C
writePort	Firmata/Boards.h	/^static inline unsigned char writePort(byte port, byte value, byte bitmask)$/;"	f
writeSMS	GSM/src/GSM3MobileMockupProvider.cpp	/^void GSM3MobileMockupProvider::writeSMS(char c)$/;"	f	class:GSM3MobileMockupProvider
writeSMS	GSM/src/GSM3MobileSMSProvider.h	/^		virtual inline void writeSMS(const char c){};$/;"	f	class:GSM3MobileSMSProvider
writeSMS	GSM/src/GSM3ShieldV1SMSProvider.cpp	/^void GSM3ShieldV1SMSProvider::writeSMS(char c)$/;"	f	class:GSM3ShieldV1SMSProvider
writeScript	Robot_Control/examples/explore/R06_Wheel_Calibration/scripts_library.h	/^void writeScript(int seq){$/;"	f
writeScript	Robot_Control/src/utility/RobotTextManager.cpp	/^void TextManager::writeScript(int seq, int line, int col){$/;"	f	class:TextManager
writeSn	Ethernet/src/utility/w5100.h	/^uint16_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {$/;"	f	class:W5100Class
writeSn	Ethernet/src/utility/w5100.h	/^uint8_t W5100Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {$/;"	f	class:W5100Class
writeSocket	GSM/src/GSM3MobileMockupProvider.cpp	/^void GSM3MobileMockupProvider::writeSocket(const uint8_t *buf, size_t size, int id_socket)$/;"	f	class:GSM3MobileMockupProvider
writeSocket	GSM/src/GSM3ShieldV1ClientProvider.cpp	/^void GSM3ShieldV1ClientProvider::writeSocket(const char* buf)$/;"	f	class:GSM3ShieldV1ClientProvider
writeSocket	GSM/src/GSM3ShieldV1ClientProvider.cpp	/^void GSM3ShieldV1ClientProvider::writeSocket(uint8_t c)$/;"	f	class:GSM3ShieldV1ClientProvider
writeSocket	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^void GSM3ShieldV1MultiClientProvider::writeSocket(char c)$/;"	f	class:GSM3ShieldV1MultiClientProvider
writeSocket	GSM/src/GSM3ShieldV1MultiClientProvider.cpp	/^void GSM3ShieldV1MultiClientProvider::writeSocket(const char* buf)$/;"	f	class:GSM3ShieldV1MultiClientProvider
writeStart	SD/src/utility/Sd2Card.cpp	/^uint8_t Sd2Card::writeStart(uint32_t blockNumber, uint32_t eraseCount) {$/;"	f	class:Sd2Card
writeStop	SD/src/utility/Sd2Card.cpp	/^uint8_t Sd2Card::writeStop(void) {$/;"	f	class:Sd2Card
writeText	Robot_Control/src/utility/RobotTextManager.cpp	/^void TextManager::writeText(int lineNum, int colNum, char* txt, bool onOff){$/;"	f	class:TextManager
write_P	Robot_Control/src/Fat16.cpp	/^void Fat16::write_P(PGM_P str) {$/;"	f	class:Fat16
write_P	SD/src/utility/SdFile.cpp	/^void SdFile::write_P(PGM_P str) {$/;"	f	class:SdFile
write_bl_len_high	Robot_Control/src/SdInfo.h	/^  unsigned write_bl_len_high : 2;$/;"	m	struct:CSD
write_bl_len_high	SD/src/utility/SdInfo.h	/^  unsigned write_bl_len_high : 2;$/;"	m	struct:CSDV1
write_bl_len_high	SD/src/utility/SdInfo.h	/^  unsigned write_bl_len_high : 2;$/;"	m	struct:CSDV2
write_bl_len_low	Robot_Control/src/SdInfo.h	/^  unsigned write_bl_len_low : 2;$/;"	m	struct:CSD
write_bl_len_low	SD/src/utility/SdInfo.h	/^  unsigned write_bl_len_low : 2;$/;"	m	struct:CSDV1
write_bl_len_low	SD/src/utility/SdInfo.h	/^  unsigned write_bl_len_low : 2;$/;"	m	struct:CSDV2
write_blk_misalign	Robot_Control/src/SdInfo.h	/^  unsigned write_blk_misalign : 1;$/;"	m	struct:CSD
write_blk_misalign	SD/src/utility/SdInfo.h	/^  unsigned write_blk_misalign : 1;$/;"	m	struct:CSDV1
write_blk_misalign	SD/src/utility/SdInfo.h	/^  unsigned write_blk_misalign : 1;$/;"	m	struct:CSDV2
write_error	arduino/Print.h	/^    int write_error;$/;"	m	class:Print
write_partial	Robot_Control/src/SdInfo.h	/^  unsigned write_partial : 1;$/;"	m	struct:CSD
write_partial	SD/src/utility/SdInfo.h	/^  unsigned write_partial : 1;$/;"	m	struct:CSDV1
write_partial	SD/src/utility/SdInfo.h	/^  unsigned write_partial : 1;$/;"	m	struct:CSDV2
writecommand	Robot_Control/src/Arduino_LCD.cpp	/^void Arduino_LCD::writecommand(uint8_t c) {$/;"	f	class:Arduino_LCD
writecommand	TFT/src/utility/Adafruit_ST7735.cpp	/^void Adafruit_ST7735::writecommand(uint8_t c) {$/;"	f	class:Adafruit_ST7735
writedata	Robot_Control/src/Arduino_LCD.cpp	/^void Arduino_LCD::writedata(uint8_t c) {$/;"	f	class:Arduino_LCD
writedata	TFT/src/utility/Adafruit_ST7735.cpp	/^void Adafruit_ST7735::writedata(uint8_t c) {$/;"	f	class:Adafruit_ST7735
writeln_P	Robot_Control/src/Fat16.cpp	/^void Fat16::writeln_P(PGM_P str) {$/;"	f	class:Fat16
writeln_P	SD/src/utility/SdFile.cpp	/^void SdFile::writeln_P(PGM_P str) {$/;"	f	class:SdFile
xid	Ethernet/src/Dhcp.h	/^	uint32_t xid;$/;"	m	struct:_RIP_MSG_FIXED
yiaddr	Ethernet/src/Dhcp.h	/^	uint8_t  yiaddr[4];$/;"	m	struct:_RIP_MSG_FIXED
~LockEP	arduino/USBCore.cpp	/^	~LockEP()$/;"	f	class:LockEP
~SoftwareSerial	SoftwareSerial/src/SoftwareSerial.cpp	/^SoftwareSerial::~SoftwareSerial()$/;"	f	class:SoftwareSerial
~SquawkStream	Robot_Control/src/Squawk.h	/^inline SquawkStream::~SquawkStream() { }$/;"	f	class:SquawkStream
~String	arduino/WString.cpp	/^String::~String()$/;"	f	class:String
